import si;
import testing;
import geometry;

declare export geometry_suites :: List(TestSuite);

define geometry_suites = [
    vector2d_suite,
    vector3d_suite,
    norm_suite,
    normalized_suite,
    polar2cartesian_suite,
    inclination_suite,
    azimuth_suite
];

run_test_suites(geometry_suites); 

# ------------------------------------------------------------------------------
# Functions vector2d
# ------------------------------------------------------------------------------

define vector2d_suite = test_suite("Function vector2d", [

    test("should construct vector correctly", () ->
        let vec = vector2d(100, 200) in
            get(vec, Geom2@x, _) = 100 and
            get(vec, Geom2@y, _) = 200
        end
    )
]);

# ------------------------------------------------------------------------------
# Functions vector3d
# ------------------------------------------------------------------------------

define vector3d_suite = test_suite("Function vector3d", [

    test("should construct vector correctly", () ->
        let vec = vector3d(100, 200, 500) in
            get(vec, Geom3@x, _) = 100 and
            get(vec, Geom3@y, _) = 200 and
            get(vec, Geom3@z, _) = 500
        end
    )
]);

# ------------------------------------------------------------------------------
# Functions norm
# ------------------------------------------------------------------------------

define norm_suite = test_suite("Function norm", [
   
    test("should be zero for zero vector", () ->
        let vec = vector2d(0, 0) in
            norm(vec) = 0
        end
    ),

   test("should be correct for 2d vector", () ->
        let vec = vector2d(100, 200) in
            norm(vec)^2 = 100^2 + 200^2
        end
    ),

   test("should be correct for 3d vector", () ->
        let vec = vector3d(100, 200, 300) in
           norm(vec)^2 = 100^2 + 200^2 + 300^2
        end
    )
]);

# ------------------------------------------------------------------------------
# Functions normalized
# ------------------------------------------------------------------------------

define normalized_suite = test_suite("Function normalized", [

    test("should normalize a vector in the x direction", () ->
        normalized(vector3d(10, 0, 0)) = vector3d(1, 0, 0)
    ),
   
    test("should normalize a vector in the x and y direction", () ->
        approximates_to(15*|decimals|)(normalized(vector3d(3, 4, 0)), vector3d(0.6, 0.8, 0))
    )
]);
 
# ------------------------------------------------------------------------------
# Functions polar2cartesian
# ------------------------------------------------------------------------------


define polar2cartesian_suite = test_suite("Function polar2cartesian", [

   test("should transform correctly",
      () ->
         approximates(polar2cartesian(4, pi*|radian|, 2*pi*|radian|), vector3d(0, 0, -4), 15*|decimals|)
      ),

   test("should transform correctly with units",
      () ->
         approximates_to(15*|decimals|)(
            polar2cartesian(4*|metre|, pi*|radian|/2, pi*|radian|),
            |metre| '.*' vector3d(-4, 0, 0))
      )   
]);
 
# ------------------------------------------------------------------------------
# Functions inclination
# ------------------------------------------------------------------------------

define inclination_suite = test_suite("Function inclination", [

   test("should give correct result for vector (3,3,0)",
      () ->
         approximates(inclination(vector3d(3,3,0)), 2*pi*|radian|/4, 15*|decimals|)
      )
]);

# ------------------------------------------------------------------------------
# Functions azimuth
# ------------------------------------------------------------------------------

define azimuth_suite = test_suite("Function azimuth", [

   test("should give correct result for vector (3,3,0)",
      () ->
         azimuth(vector3d(3,3,0)) = 2*pi*|radian|/8
      )
]);
