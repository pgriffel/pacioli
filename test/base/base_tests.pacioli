import testing;
import si;

declare base_suites :: List(TestSuite);

define base_suites = [
   indexing_suite,
   comprehensions_suite,
   sort_suite,
   reverse_suite,
   nth_suite,
   top_suite,
   bottom_suite,
   total_suite,
   #ranking_suite,   does not exist in MVM yet
   min_suite,
   max_suite,
   tan_suite,
   expt_suite,
   mexpt_suite,
   random_suite
   #mapnz_suite       does not exist in MVM yet
   #kronecker_suite   TODO port in pacioli-ts
];

run_test_suites(base_suites); 

# ------------------------------------------------------------------------------
# Test vectors
# ------------------------------------------------------------------------------

defindex Bar = {v0, v1, v2, v3, v4, v5};

defunit Bar!unit = {
    v0: second,
    v4: metre,
    v5: gram/second^2
};

define test_vec(v0, v1, v2, v3, v4, v5) =
   v0 '.*' delta(Bar@v0) +
   v1 '.*' delta(Bar@v1) +
   v2 '.*' delta(Bar@v2) +
   v3 '.*' delta(Bar@v3) +
   v4 '.*' delta(Bar@v4) +
   v5 '.*' delta(Bar@v5);

# ------------------------------------------------------------------------------
# Indexing
# ------------------------------------------------------------------------------

define indexing_suite = test_suite("Indexing", [
    
    test("should work for scalars with _",
        fn ()
            get(42, _, _) = 42
        end),
      
   test("should work for vectors with _",
        fn ()
            get(test_vec(1,2,3,4,5,6), Bar@v3, _) = 4
        end),
      
   test("should work for transposed vectors with _",
        fn ()
            get(test_vec(1,2,3,4,5,6)^T, _, Bar@v3) = 4
        end)
]);

# ------------------------------------------------------------------------------
# Comprehensions
# ------------------------------------------------------------------------------

define comprehensions_suite = test_suite("Comprehension", [
    
    test("should count empty list as zero",
         fn ()
            count[true | x <- []] = 0
         end),

    test("should count true as one",
         fn ()
            count[true | x <- [1, 2, 3]] = 3
         end),

    test("should count false as zero",
         fn ()
            count[false | x <- [1, 2, 3]] = 0
         end),
         
    test("count comprehension should filter correctly I",
         fn ()
            count[mod(x, 2) = 0 | x <- naturals(10)] = 5
         end),
         
     test("count comprehension should filter correctly II",
         fn ()
            count[ x < y | x <- naturals(10), y <- naturals(10)] = 45
         end),
             
       test("all comprehension should be true for empty list",
         fn ()
            all[x | x <- []] = true
         end),
         
      test("some comprehension should be false for empty list",
         fn ()
            some[x | x <- []] = false
         end),
             
       test("all comprehension should be true for non-empty list",
         fn ()
            all[x < 5 | x <- [1,2,3]] = true
         end),
         
      test("some comprehension should be true for non-empty list",
         fn ()
            some[x < 5 | x <- [1,2,3]] = true
         end),
             
       test("all comprehension should be false for non-empty list",
         fn ()
            all[x < 3 | x <- [1,2,3]] = false
         end),
         
      test("some comprehension should be true for non-empty list",
         fn ()
            some[x < 3 | x <- [1,2,3]] = true
         end)
    ]);

# ------------------------------------------------------------------------------
# Function sort
# ------------------------------------------------------------------------------

define sort_suite = test_suite("Function sort", [
    
    test("should sort ascending",
         fn ()
            sort_list([1, 9, 3, 2, 5], less) = [1, 2, 3, 5, 9]
         end),
         
    test("should sort decending",
         fn ()
             sort_list([1, 9, 3, 2, 5], greater) = [9, 5, 3, 2, 1]
         end)
    ]);

# ------------------------------------------------------------------------------
# Function reverse
# ------------------------------------------------------------------------------

define reverse_suite = test_suite("Function reverse", [
    
    test("should reverse the empty list",
         fn ()
            reverse([]) = []
         end),

    test("should reverse a list of numbers correctly",
         fn ()
            reverse([1, 9, 3, 2, 5]) = [5, 2, 3, 9, 1]
         end)
   ]);

# ------------------------------------------------------------------------------
# Function nth
# ------------------------------------------------------------------------------

define nth_suite = test_suite("Function nth", [
    
    test("should get 0-th element",
         fn ()
            nth(0, [1, 9, 3, 2, 5]) = 1
         end),

    test("should get last element",
         fn ()
            nth(4, [1, 9, 3, 2, 5]) = 5
         end)
   ]);

# ------------------------------------------------------------------------------
# Function top
# ------------------------------------------------------------------------------

define top_suite = test_suite("Function top", [
    
    test("should do nothing for a zero vector",
         fn ()
            top(3, test_vec(0, 0, 0, 0, 0, 0)) = test_vec(0, 0, 0, 0, 0, 0)
         end),
   
    test("should do nothing for a vector with one entry",
         fn ()
            top(3, test_vec(0, 0, 1, 0, 0, 0)) = test_vec(0, 0, 1, 0, 0, 0)
         end),
   
    test("should be zero for a vector with one entry and top 0",
         fn ()
            top(0, test_vec(0, 0, 1, 0, 0, 0)) = test_vec(0, 0, 0, 0, 0, 0)
         end),
   
    test("should get top 2 a vector with more entries",
         fn ()
            top(2, test_vec(0, 2, 1, 4, 6, 5)) = test_vec(0, 0, 0, 0, 6, 5)
         end),
   
    test("should get top 2 a vector with entries with ties",
         fn ()
            top(2, test_vec(0, 2, 1, 5, 6, 5)) = test_vec(0, 0, 0, 5, 6, 0)
         end),
   
    test("should get top 3 a vector with entries with ties",
         fn ()
            top(3, test_vec(0, 2, 1, 5, 6, 5)) = test_vec(0, 0, 0, 5, 6, 5)
         end),
   
    test("should get top 4 a vector with entries with ties",
         fn ()
            top(4, test_vec(0, 2, 1, 5, 6, 5)) = test_vec(0, 2, 0, 5, 6, 5)
         end)

   ]);

# ------------------------------------------------------------------------------
# Function bottom
# ------------------------------------------------------------------------------

define bottom_suite = test_suite("Function bottom", [
    
    test("should do nothing for a zero vector",
         fn ()
            bottom(3, test_vec(0, 0, 0, 0, 0, 0)) = test_vec(0, 0, 0, 0, 0, 0)
         end),
   
    test("should do nothing for a vector with one entry",
         fn ()
            bottom(3, test_vec(0, 0, 1, 0, 0, 0)) = test_vec(0, 0, 1, 0, 0, 0)
         end),
   
    test("should be zero for a vector with one entry and bottom 0",
         fn ()
            bottom(0, test_vec(0, 0, 1, 0, 0, 0)) = test_vec(0, 0, 0, 0, 0, 0)
         end),
   
    test("should get bottom 2 a vector with more entries",
         fn ()
            bottom(2, test_vec(0, 2, 1, 4, 6, 5)) = test_vec(0, 2, 1, 0, 0, 0)
         end),
   
    test("should get bottom 2 a vector with entries with ties",
         fn ()
            bottom(2, test_vec(0, 2, 1, 5, 6, 5)) = test_vec(0, 2, 1, 0, 0, 0)
         end),
   
    test("should get bottom 3 a vector with entries with ties",
         fn ()
            bottom(3, test_vec(0, 2, 1, 5, 6, 5)) = test_vec(0, 2, 1, 5, 0, 0)
         end),
   
    test("should get bottom 4 a vector with entries with ties",
         fn ()
            bottom(4, test_vec(0, 2, 1, 5, 6, 5)) = test_vec(0, 2, 1, 5, 0, 5)
         end)

   ]);

# ------------------------------------------------------------------------------
# Function ranking
# ------------------------------------------------------------------------------

define ranking_suite = test_suite("Function ranking", [
    
    test("should do nothing for a zero vector",
         fn ()
            ranking(test_vec(0, 0, 0, 0, 0, 0)) = test_vec(0, 0, 0, 0, 0, 0)
         end),
   
   test("should partially rank a parially filled vector",
         fn ()
            ranking(test_vec(1, 0, 3, 0, 2, 0)) = test_vec(1, 0, 3, 0, 2, 0)
         end),
   
    test("should completely rank a sorted vector",
         fn ()
            ranking(test_vec(2, 4, 5, 5, 6, 7)) = test_vec(1, 2, 3, 4, 5, 6)
         end),
   
    test("should rank an unsorted vector",
         fn ()
            ranking(test_vec(7, 6, 5, 0, 4, 4)) = test_vec(5, 4, 3, 0, 1, 2)
         end)
   ]);

# ------------------------------------------------------------------------------
# Function total
# ------------------------------------------------------------------------------

define total_suite = test_suite("Function total", [
    
    test("should be zero for the zero vector",
         fn ()
            total(test_vec(0, 0, 0, 0, 0, 0)) = 0
         end),
         
   test("should be correct a vector with one non-zero entry",
         fn ()
            total(test_vec(0, 0, 0, 0, 10, 0)) = 10
         end),
         
   test("should be correct for a vector with multiple positive entries",
         fn ()
            total(test_vec(0, 4, 0, 7, 10, 0)) = 21
         end),
         
   test("should be correct for a vector with multiple positive and negative entries",
         fn ()
            total(test_vec(3, 6, -4, -7, 10, 0)) = 8
         end)
   ]);

# ------------------------------------------------------------------------------
# Function min
# ------------------------------------------------------------------------------

define min_suite = test_suite("Function min", [
    
    test("should give the vector for two identical vectors",
         fn ()
            min(test_vec(0, 4, 0, 7, 10, 0), test_vec(0, 4, 0, 7, 10, 0)) = test_vec(0, 4, 0, 7, 10, 0)
         end),

    test("should do element wise min",
         fn ()
            min(test_vec(0, 12, 0, 7, -10, 0), test_vec(0, 4, 2, -7, -7, 1)) = test_vec(0, 4, 0, -7, -10, 0)
         end)
   ]);

# ------------------------------------------------------------------------------
# Function max
# ------------------------------------------------------------------------------

define max_suite = test_suite("Function max", [
    
    test("should give the vector for two identical vectors",
         fn ()
            max(test_vec(0, 4, 0, 7, 10, 0), test_vec(0, 4, 0, 7, 10, 0)) = test_vec(0, 4, 0, 7, 10, 0)
         end),

    test("should do element wise max",
         fn ()
            max(test_vec(0, 12, 0, 7, -10, 0), test_vec(0, 4, 2, -7, -7, 1)) = test_vec(0, 12, 2, 7, -7, 1)
         end)
   ]);

# ------------------------------------------------------------------------------
# Function tan
# ------------------------------------------------------------------------------

define tan_suite = test_suite("Function tan", [
    
    test("should be correct for 0",
         fn ()
            tan(0*|radian|) = 0
         end),

    test("should be correct for pi/2",
         fn ()
            tan(0.5*pi*|radian|) > 10^10
         end),

      test("should be correct for pi",
         fn ()
            approximates(tan(pi*|radian|), 0, 15*|decimals|)
         end),
      
      test("should be correct for -pi/4",
         fn ()
            approximates(tan(-0.25*pi*|radian|), -1, 15*|decimals|)
         end)
   ]);

# ------------------------------------------------------------------------------
# Function expt
# ------------------------------------------------------------------------------

define expt_suite = test_suite("Function expt", [
    
    test("should be correct for scalars",
         fn ()
            2 ^ 3 = 8
         end),

    test("should be correct matrices without units",
         fn ()
            let mat = test_vec(1,2,3,4,5,6) '*' test_vec(1,2,3,4,5,6)^T in
               mat ^ 3 = mat * mat * mat
            end
         end),

    test("should be correct for negative powers",
         fn ()
            let mat = test_vec(1,2,3,4,5,6) '*' test_vec(1,2,3,4,5,6)^T in
               false # mat^-3 * mat^3 =  mat^0
            end
         end),

    test("should be correct for non-integer powers",
         fn ()
            approximates(expt(1.5, 1.5), 1.83711730709, 11*|decimals|)
         end)              
   ]);

# ------------------------------------------------------------------------------
# Function mexpt
# ------------------------------------------------------------------------------

define mexpt_suite = test_suite("Function mexpt", [
    
    test("should be correct for scalars",
         fn ()
            2 '^' 3 = 8
         end),

   test("should be correct matrices without units",
         fn ()
            let mat = test_vec(1,2,3,4,5,6) '*' test_vec(1,2,3,4,5,6)^T in
               mat '^' 3 = mat '*' mat '*' mat
            end
         end),

   test("should be correct for negative powers",
         fn ()
            let mat = test_vec(1,2,3,4,5,6) '*' test_vec(1,2,3,4,5,6)^T in
               false # mat'^'-3 * mat'^'3 =  mat'^'0
            end
         end),

    test("should for matrices with units",
         fn ()
            let
               vec = test_vec(1,2,3,4,5,6) * |Bar!unit|,
               mat = vec '*' vec^D
            in
               approximates(mat '^' 3, mat '*' mat '*' mat, 14*|decimals|)
            end
         end) ,

    test("should be correct for non-integer powers",
         fn ()
            approximates(_printed(mexpt(1.5, 1.5)), 1.83711730709, 10*|decimals|)
         end)              
   ]);

# ------------------------------------------------------------------------------
# Function random
# ------------------------------------------------------------------------------

define random_suite = test_suite("Function random", [
    
    test("should do something",
         fn ()
            let r = random() in
               r >= 0 and r <= 1
            end
         end)
   ]);

# ------------------------------------------------------------------------------
# Function mapnz
# ------------------------------------------------------------------------------

define mapnz_suite = test_suite("Function mapnz", [
    
    test("should do something",
         fn ()
            mapnz(fn (x) x + 1 end, test_vec(0, 0, 1, 0, 3, 4)) = test_vec(0, 0, 2, 0, 4, 5)
         end)
   ]);

# ------------------------------------------------------------------------------
# Function kronecker
# ------------------------------------------------------------------------------

define kronecker_suite = test_suite("Function kronecker", [
    
    test("should do something",
         fn ()
            false
         end)
   ]);
