# ------------------------------------------------------------------------------
# MultiVector functional layer - instances for applications
# ------------------------------------------------------------------------------

include term_layer;
include multivector_layer;
include blade;

import geometry;

export
    e0, e1, e12, e123, e13, e2, e23, e3,
    f0, f1, f12, f2,
    parse_base_blade,
    parse_mv,
    vec2mv;

# ------------------------------------------------------------------------------
# Mapping from symbol representation     to vector representation
#
# Symbols for the 3D base blades and its representations as numbers
# Needed for testeing the Representation conversions
# ------------------------------------------------------------------------------

#
# Outer product ^ units:
# base1 and base2 represent a grade-1 (|metre|) -> e12 and -e12 represent grade-2 |metre|^2 
# e1 ^ e1  represents grade-0 -> 0 |metre|^2
# 1 represents a scalar in |metre| -> 1 ^ 1 represents Scalar(|metre|^2) 

#
#     ^          1 g0, m          e1 g1, m        e2 g1, m       e12 g2, m^2
#              +-------------+---------------+---------------+--------------+
# 1  g0, m     | 1 g0, m^2   |    e1 g1, m^2 |    e2 g1, m^2 |   e12 g2, m^3|
#              +-------------+---------------+---------------+--------------+
# e1 g1, m     | e1 g1, m^2  |    0  g0, 1(?)|   e12 g2, m^2 |   0 g0, 1(?) |
#              +-------------+---------------+---------------+--------------+
# e2 g1, m     | e2 g1, m^2  |  -e12 g2, m^2 |   0 g0, 1(?)  |   0 g0, 1(?) |
#              +-------------+---------------+---------------+--------------+
# e12 g2, m^2  | e12 g2, m^3 |    0, g0, 1(?)|   0 g0, 1(?)  |   0 g0, 1    |
#              +-------------+---------------+---------------+--------------+
#
# Hypothesis: unit follows grade.
# 0 entries: unit is 1 but could also follow the product rule, for the algebra it does not matter. 
# 
# Test casus: scalar 3 m * vector 5 m => vector 15 m^2 = scalar 3 * vector 5 m^2
# 3*|metre| '.*' vector3d(3*|metre|, 3*|metre|, 3*|metre|) = 3 '.*' vector3d(3*|metre^2|, 3*|metre^2|, 3*|metre^2|);
# 
# 3*|metre| '.*' vector3d(3*|metre|, 3*|metre|, 3*|metre|);
# 3 '.*' vector3d(3*|metre^2|, 3*|metre^2|, 3*|metre^2|);
#
#     M          1 g0, m          e1 g1, m        e2 g1, m      e12 g2, m^2
#              +-------------+---------------+---------------+--------------+
# 1  g0, m     | 1 g0, m^2   |   e1 g1, m^2  |   e2 g1, m^2  |  e12 g2, m^3 |
#              +-------------+---------------+---------------+--------------+
# e1 g1, m     | e1 g1, m^2  |   1  g0, m^2  |   0, g0, 1    |  e2 g1, m    |
#              +-------------+---------------+---------------+--------------+
# e2 g1, m     | e2 g1, m^2  |   0, g0, m^2  |   1 g0, m^2   |  e1 g1, m    |
#              +-------------+---------------+---------------+--------------+
# e12 g2, m^2  | e12 g2,m^3  |   -e2, g1, m  |   e1, g1, m   | -1, g0, 1    |
#              +-------------+---------------+---------------+--------------+
#
# 

# TODO: separate aliases for term_weight AND term_base_blade
defalias unit_2D = metre;
defalias unit_3D = metre;

define blades_2D = 
    let 
        base1 = vector2d(1, 0),
        base2 = vector2d(0, 1),
        context = make_context("Geom2", [
            tuple("1", []),
            tuple("f1", [base1]),
            tuple("f2", [base2]),
            tuple("f12", [base1, base2])
        ])
    in
        context_blades(context)
    end;

define terms_2D = 
    [make_term(|unit_2D|, blade) | blade <- blades_2D];

define blades_3D = 
    let 
        base1 = vector3d(1, 0, 0),
        base2 = vector3d(0, 1, 0),
        base3 = vector3d(0, 0, 1),
        context = make_context("Geom3", [
            tuple("1", []),
            tuple("e1", [base1]),
            tuple("e2", [base2]),
            tuple("e12", [base1, base2]),
            tuple("e3", [base3]),
            tuple("e13", [base1, base3]),
            tuple("e23", [base2, base3]),
            tuple("e123", [base1, base2, base3])
        ])
    in
        context_blades(context)
    end;

define terms_3D = 
    [make_term(|unit_3D|, blade) | blade <- blades_3D];

set_nr_decimals(0);

table(terms_3D, terms_3D, outer_product, "^");
table(terms_3D, terms_3D, geometric_product, "*");
table(terms_3D, terms_3D, left_contraction, "L");
table(terms_3D, terms_3D, right_contraction , "R");
table(terms_3D, terms_3D, hestenes_inner_product, "H");
table(terms_3D, terms_3D, modified_hestenes_inner_product, "M");

table(terms_2D, terms_2D, outer_product, "^");
table(terms_2D, terms_2D, geometric_product, "*");
table(terms_2D, terms_2D, left_contraction, "L");
table(terms_2D, terms_2D, right_contraction , "R");
table(terms_2D, terms_2D, hestenes_inner_product, "H");
table(terms_2D, terms_2D, modified_hestenes_inner_product, "M");

# ------------------------------------------------------------------------------
# Blades used in geometric_algebra_tests.pacioli
# ------------------------------------------------------------------------------

declare e0 :: BaseBlade(1, Geom3!);
declare e1 :: BaseBlade(1, Geom3!);
declare e2 :: BaseBlade(1, Geom3!);
declare e12 :: BaseBlade(1, Geom3!);
declare e3 :: BaseBlade(1, Geom3!);
declare e13 :: BaseBlade(1, Geom3!);
declare e23 :: BaseBlade(1, Geom3!);
declare e123 :: BaseBlade(1, Geom3!);

define e0 = nth(0, blades_3D);
define e1 = nth(1, blades_3D);
define e2 = nth(2, blades_3D);
define e12 = nth(3, blades_3D);
define e3 = nth(4, blades_3D);
define e13 = nth(5, blades_3D);
define e23 = nth(6, blades_3D);
define e123 = nth(7, blades_3D);

declare f0 :: BaseBlade(1, Geom2!);
declare f1 :: BaseBlade(1, Geom2!);
declare f2 :: BaseBlade(1, Geom2!);
declare f12 :: BaseBlade(1, Geom2!);

define f0 = nth(0, blades_2D);
define f1 = nth(1, blades_2D);
define f2 = nth(2, blades_2D);
define f12 = nth(3, blades_2D);


declare parse_mv :: (String) -> MultiVector(unit_3D, Geom3!);

define parse_mv(x) = parse_multivector(parse_base_blade, x);

declare parse_base_blade :: (String) -> Term(unit_3D, Geom3!);

# TODO: parse_base_blade is 3D specific, should also handle 2D
define parse_base_blade(input) =
    if input = "0" then make_term(|unit_3D|, e0)
    else if input = "1" then make_term(|unit_3D|, e1)
    else if input = "2" then make_term(|unit_3D|, e2)
    else if input = "3" then make_term(|unit_3D|, e3)
    else if input = "12" then make_term(|unit_3D|, e12)
    else if input = "13" then make_term(|unit_3D|, e13)
    else if input = "21" then make_term(-|unit_3D|, e12)
    else if input = "23" then make_term(|unit_3D|, e23)
    else if input = "31" then make_term(-|unit_3D|, e13)
    else if input = "32" then make_term(-|unit_3D|, e23)
    else if input = "123" then make_term(|unit_3D|, e123)
    else if input = "132" then make_term(-|unit_3D|, e123)
    else if input = "213" then make_term(-|unit_3D|, e123)    
    else if input = "231" then make_term(|unit_3D|, e123)    
    else if input = "321" then make_term(-|unit_3D|, e123)    
    else if input = "312" then make_term(|unit_3D|, e123)    
    else error(concatenate("Unexpected base blade in input: e", input))
    end;

# ------------------------------------------------------------------------------
# vec2mv
# ------------------------------------------------------------------------------

declare vec2mv :: for_unit a: (a * Geom3!) -> MultiVector(a, Geom3!);

define vec2mv(vec) =
    let u = unit_factor(vec) in
        let mag = magnitude(vec) in
            make_multivector([
                scale_term(u,make_term(get(mag, Geom3@x, _), e1)),
                scale_term(u,make_term(get(mag, Geom3@y, _), e2)),
                scale_term(u,make_term(get(mag, Geom3@z, _), e3))
            ])
        end
    end;

