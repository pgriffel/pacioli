# Copyright (c) 2013 Paul Griffioen
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

module Primitives;

declare public tuple :: for_type a: a -> a;
declare public apply :: for_type a,b: (a -> b, a) -> b;
declare public identity :: for_type a: (a) -> a;
declare public equal :: for_type a: (a, a) -> Boole();
declare public not_equal :: for_type a: (a, a) -> Boole();
declare public not :: (Boole()) -> Boole();

declare public printed :: for_type a: (a) -> a;
declare public print :: for_type a: (a) -> Void();
declare public write :: for_type a: (a) -> Void();

declare ref_get :: for_type a: (Ref(a)) -> a;
declare ref_set :: for_type a: (Ref(a), a) -> Void();
declare empty_ref :: for_type a: () -> Ref(a);
declare new_ref :: for_type a: (a) -> Ref(a);

declare public error :: for_type a: (1) -> a;

declare throw_result :: for_type a: (Ref(a), a) -> Void();
declare catch_result :: for_type a: (() -> Void(), Ref(a)) -> a;
declare skip :: () -> Void();
declare seq :: (Void(), Void()) -> Void();
declare while_function :: (() -> Boole(), () -> Void()) -> Void();

#declare nothing :: Void();
