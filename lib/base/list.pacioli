# Copyright (c) 2018 Paul Griffioen
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# ----------------------------------------------------------------------------
# Lists
# ----------------------------------------------------------------------------

declare export empty_list :: for_type a: () ->  List(a);

declare export singleton_list :: for_type a: (a) -> List(a);

declare export head :: for_type a: (List(a)) -> a;

declare export nth :: for_type a: (1, List(a)) -> a;

declare export tail :: for_type a: (List(a)) -> List(a);

declare export list_size :: for_type a: (List(a)) -> 1;

declare export cons :: for_type a: (a, List(a)) -> List(a);

declare export append :: for_type a: (List(a), List(a)) -> List(a);

declare export loop_list :: for_type a,b: (a, (a, b) -> a, List(b)) -> a;

declare export fold_list :: for_type a: ((a, a) -> a, List(a)) -> a;

declare export zip :: for_type a,b: (List(a), List(b)) -> List(Tuple(a, b));

declare export naturals :: (1) -> List(1);

declare export map_list :: for_type a,b: ((a) -> b, List(a)) -> List(b);

declare export reverse :: for_type a: (List(a)) -> List(a);

declare export sort_list :: for_type a: (List(a), (a, a) -> Boole) -> List(a);

declare export contains :: for_type a: (List(a), a) -> Boole;
