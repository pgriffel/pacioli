# Copyright (c) 2018 Paul Griffioen
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

include string;
include list;
include array;
include matrix;
include io;
include system;

# ----------------------------------------------------------------------------
# Units
#
# The SI units are defined here to make them available in the standard 
# library. The SI library gives extensions.
# ----------------------------------------------------------------------------

defunit metre "m";
defunit gram "g";
defunit second "s";
defunit ampere "A";
defunit kelvin "K";
defunit mole "mol";
defunit candela "cd";

# ----------------------------------------------------------------------------
# General primitives
# ----------------------------------------------------------------------------
 
doc tuple
    "Creates a tuple from the arguments.";

declare export tuple :: for_type t: t -> t;

# ----------------------------------------------------------------------------

doc apply
    "Applies a function to a tuple of arguments.";

declare export apply :: for_type s,t: (s -> t, s) -> t;

# ----------------------------------------------------------------------------

doc identity
    "The identity function. Just returns its single argument.";

declare export identity :: for_type t: (t) -> t;

# ----------------------------------------------------------------------------

doc type_of
    "One of 'string', 'matrix' and 'generic'.";

declare export type_of :: for_type t: (t) -> Identifier;

# ----------------------------------------------------------------------------

doc equal
    "Are the given values equal?";

declare export equal :: for_type t: (t, t) -> Boole;

# ----------------------------------------------------------------------------

doc not_equal
    "Shorthand for <code>not(equal(x, y))</code>.";

declare export not_equal :: for_type t: (t, t) -> Boole;

# ----------------------------------------------------------------------------

doc not
    "Logical complement";

declare export not :: (Boole) -> Boole;

# ----------------------------------------------------------------------------

doc error
    "Signals an error.";

declare export error :: for_type t: (String) -> t;

# ----------------------------------------------------------------------------
# Maybe
# ----------------------------------------------------------------------------

declare export just :: for_type t: (t) -> Maybe(t);

declare export nothing :: for_type t: () -> Maybe(t);

declare export is_nothing :: for_type t: (Maybe(t)) -> Boole;
