# Copyright (c) 2018 Paul Griffioen
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# ----------------------------------------------------------------------------
# Units
# ----------------------------------------------------------------------------

# SI units
defunit metre "m";
defunit gram "g";
defunit second "s";
defunit ampere "A";
defunit kelvin "K";
defunit mole "mol";
defunit candela "cd";

defunit radian "rad" = 1;

# ----------------------------------------------------------------------------
# General primitives
# ----------------------------------------------------------------------------

declare public tuple :: for_type a: a -> a;
declare public apply :: for_type a,b: (a -> b, a) -> b;

declare public identity :: for_type a: (a) -> a;
declare public type_of :: for_type a: (a) -> Identifier;

declare public equal :: for_type a: (a, a) -> Boole;
declare public not_equal :: for_type a: (a, a) -> Boole;
declare public not :: (Boole) -> Boole;

declare public just :: for_type t: (t) -> Maybe(t);
declare public nothing :: for_type t: () -> Maybe(t);
declare public is_nothing :: for_type t: (Maybe(t)) -> Boole;

declare public _system_time :: () -> 1;

# ----------------------------------------------------------------------------
# Obsolete
# ----------------------------------------------------------------------------

declare public error :: for_type a: (String) -> a;
declare public num2string :: for_unit a: (a, 1) -> String;

# ----------------------------------------------------------------------------
# System functions
# ----------------------------------------------------------------------------

declare public _add_mut :: for_type a: (List(a), a) -> List(a);

declare public _asin :: for_index P,Q: (P! per Q!) -> P! per Q!;
declare public _acos :: for_index P,Q: (P! per Q!) -> P! per Q!;
declare public _atan :: for_index P,Q: (P! per Q!) -> P! per Q!;

declare public _atan2 ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v, a*P!u per Q!v) -> P! per Q!;

#declare _ref_get :: for_type a: (Ref(a)) -> a;
#declare _ref_set :: for_type a: (Ref(a), a) -> Void;
#declare _empty_ref :: for_type a: () -> Ref(a);
#declare _new_ref :: for_type a: (a) -> Ref(a);

#declare _throw_result :: for_type a: (Ref(a), a) -> Void;
#declare _catch_result :: for_type a: (() -> Void, Ref(a)) -> a;
declare public _skip :: () -> Void;
#declare _seq :: (Void, Void) -> Void;
#declare _while :: (() -> Boole, () -> Void) -> Void;

declare public _three_question_marks :: for_type t: () -> t;

# ----------------------------------------------------------------------------
# Lists
# ----------------------------------------------------------------------------

declare public empty_list :: for_type a: () ->  List(a);
declare public singleton_list :: for_type a: (a) -> List(a);
declare public head :: for_type a: (List(a)) -> a;
declare public nth :: for_type a: (1, List(a)) -> a;
declare public tail :: for_type a: (List(a)) -> List(a);
declare public list_size :: for_type a: (List(a)) -> 1;
declare public cons :: for_type a: (a, List(a)) -> List(a);
declare public append :: for_type a: (List(a), List(a)) -> List(a);
declare public loop_list :: for_type a,b: (a, (a, b) -> a, List(b)) -> a;
declare public fold_list :: for_type a: ((a, a) -> a, List(a)) -> a;
declare public zip :: for_type a,b: (List(a), List(b)) -> List(Tuple(a, b));
declare public naturals :: (1) -> List(1);
declare public map_list :: for_type a,b: ((a) -> b, List(a)) -> List(b);
declare public reverse :: for_type a: (List(a)) -> List(a);
declare public sort_list :: for_type a: (List(a), (a, a) -> Boole) -> List(a);
declare public contains :: for_type a: (List(a), a) -> Boole;

# ----------------------------------------------------------------------------
# Strings
# ----------------------------------------------------------------------------

declare public string_compare :: (String, String) -> 1;
declare public concatenate :: (String, String) -> String;
declare public format :: for_type t: t -> String();

# ----------------------------------------------------------------------------
# Indices
# ----------------------------------------------------------------------------

declare public _ :: Index();

declare public index_less :: for_index P: (P, P) -> Boole();

# ----------------------------------------------------------------------------
# Matrix Shape
# ----------------------------------------------------------------------------

declare public make_matrix ::
  for_index P,Q: for_unit a: (List(Tuple(P, Q, a))) -> a*P! per Q!;

declare public magnitude ::
  for_index P,Q: for_unit a,P!u,Q!v: (a*P!u per Q!v) -> P! per Q!;

declare public unit_factor ::
  for_index P,Q: for_unit a,P!u,Q!v: (a*P!u per Q!v) -> a;

declare public row_unit ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v) -> P!u;

declare public column_unit ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v) -> Q!v;

declare public row_domain ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v) -> List(P);

declare public column_domain ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v) -> List(Q);

declare public row ::
  for_index P,Q: for_unit a,Q!v: (a*P! per Q!v, P) -> a per Q!v;

declare public column ::
  for_index P,Q: for_unit a,P!v: (a*P!v per Q!, Q) -> a*P!v;

declare public get ::
  for_index P,Q: for_unit a: (a*P! per Q!, P, Q) -> a;

declare public get_num ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v, P, Q) -> 1;

declare public left_identity ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v) -> P!u per P!u;

declare public right_identity ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v) -> Q!v per Q!v;

declare public signum ::
  for_index D,E: for_unit a,D!b,E!c: (a*D!b per E!c) -> D! per E!;

declare public support ::
  for_index D,E: for_unit a,D!b,E!c: (a*D!b per E!c) -> D! per E!;

declare public positive_support ::
  for_index D,E: for_unit a,D!b,E!c: (a*D!b per E!c) -> D! per E!;

declare public negative_support ::
  for_index D,E: for_unit a,D!b,E!c: (a*D!b per E!c) -> D! per E!;

# ----------------------------------------------------------------------------
# Linear Algebra Operators
# ----------------------------------------------------------------------------

declare public sum ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v, a*P!u per Q!v) -> a*P!u per Q!v;

declare public minus ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v, a*P!u per Q!v) -> a*P!u per Q!v;

declare public multiply ::
  for_index P,Q: for_unit a,b,P!u,P!w,Q!v,Q!z: (a*P!u per Q!v, b*P!w per Q!z) -> a*b*P!u*P!w per Q!v*Q!z;

declare public divide ::
  for_index P,Q: for_unit a,b,P!u,Q!v,P!x,Q!y: (a*P!u per Q!v, b*P!x per Q!y) -> a*P!u/P!x per b*Q!v/Q!y;

declare public left_divide ::
  for_index P,Q: for_unit a,b,P!u,Q!v,P!x,Q!y: (a*P!u per Q!v, b*P!x per Q!y) -> a*P!x/P!u per b*Q!y/Q!v;

declare public expt ::
  for_index P,Q: (P! per Q!, 1) -> P! per Q!;

declare public mexpt ::
  for_index P: for_unit P!u: (P!u per P!u, 1) -> P!u per P!u;

declare public mmult ::
  for_index P,Q,R: for_unit a,b,P!u,Q!v,R!w: (a*P!u per Q!v, b*Q!v per R!w) -> a*b*P!u per R!w;

declare public scale ::
  for_index P,Q: for_unit a,b,P!u,Q!v: (a, b*P!u per Q!v) -> a*b*P!u per Q!v;

declare public rscale ::
  for_index P,Q: for_unit a,b,P!u,Q!v: (a*P!u per Q!v, b) -> a*b*P!u per Q!v;

declare public scale_down ::
  for_index P,Q: for_unit a,b,P!u,Q!v: (a*P!u per Q!v, b) -> a*P!u per b*Q!v;

declare public lscale_down ::
  for_index P,Q: for_unit a,b,P!u,Q!v: (a, b*P!u per Q!v) -> a*P!u per b*Q!v;

declare public negative ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v) -> a*P!u per Q!v;

declare public reciprocal ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v) -> a^-1*P!u^-1 per Q!v^-1;

declare public transpose ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v) -> a*Q!v^-1 per P!u^-1;

declare public dim_inv ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v) -> Q!v per a*P!u;

declare public dim_div ::
  for_index D,E,H: for_unit a,D!b,E!c,f,H!g: (a*D!b per E!c, f*H!g per E!c) -> a*D!b per f*H!g;

declare public total ::
  for_index P,Q: for_unit a: (a*P! per Q!) -> a;

# ----------------------------------------------------------------------------
# Predicates
# ----------------------------------------------------------------------------

declare public less ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v, a*P!u per Q!v) -> Boole();

declare public less_eq ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v, a*P!u per Q!v) -> Boole();

declare public greater ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v, a*P!u per Q!v) -> Boole();

declare public greater_eq ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v, a*P!u per Q!v) -> Boole();

declare public is_zero ::
  for_index D,E: for_unit a,D!b,E!c: (a*D!b per E!c) -> Boole();

# ----------------------------------------------------------------------------
# Other Operations
# ----------------------------------------------------------------------------

declare public sqrt ::
  for_index P,Q: for_unit a, P!u, Q!v: (a^2*P!u^2 per Q!v^2) -> a*P!u per Q!v;

declare public log ::
  for_index P,Q: (P! per Q!, 1) -> P! per Q!;

declare public exp ::
  for_index P,Q: (P! per Q!) -> P! per Q!;

declare public ln ::
  for_index P,Q: (P! per Q!) -> P! per Q!;

declare public abs ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v) -> a*P!u per Q!v;

declare public max ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v, a*P!u per Q!v) -> a*P!u per Q!v;

declare public min ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v, a*P!u per Q!v) -> a*P!u per Q!v;

declare public gcd ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v, a*P!u per Q!v) -> P! per Q!;

declare public mod ::
  for_index P,Q: for_unit a,b,P!u,Q!v,P!x,Q!y: (a*P!u per Q!v, b*P!x per Q!y) -> a*P!u per Q!v;

declare public div ::
  for_index P,Q: for_unit a,b,P!u,Q!v,P!x,Q!y: (a*P!u per Q!v, b*P!x per Q!y) -> a*P!u/P!x per b/Q!v/Q!y;

declare public sin ::
  for_index P,Q: (radian * P! per Q!) -> P! per Q!;

declare public cos ::
  for_index P,Q: (radian * P! per Q!) -> P! per Q!;

declare public tan ::
  for_index P,Q: (radian * P! per Q!) -> P! per Q!;

declare public top ::
  for_index P,Q: for_unit a, P!u, Q!v: (1, a*P!u per Q!v) -> a*P!u per Q!v;

declare public bottom ::
  for_index P,Q: for_unit a, P!u, Q!v: (1, a*P!u per Q!v) -> a*P!u per Q!v;

declare public random ::
  () -> 1;

declare public ranking ::
  #for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v) -> P! per Q!;
  for_index P,Q: for_unit a: (a*P! per Q!) -> P! per Q!;

# ----------------------------------------------------------------------------
# Factorizations
# ----------------------------------------------------------------------------

declare public plu ::
  for_index P: for_unit a,P!u: (a*P!u per P!u) -> Tuple(P!u per P!u, P!u per P!u, a*P!u per P!u);

declare public svd ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v) -> List(Tuple(a, P!u, Q!v^-1));

declare public qr ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v) -> Tuple(P!u per P!u, a*P!u per Q!v);

declare public solve ::
  for_index P,Q,R: for_unit a,b,P!u,Q!v,R!w: (a*P!u per Q!v, b*P!u per R!w) -> a^-1*b*Q!v per R!w;

declare public mapnz ::
#  for_index P,Q: for_unit a,b: ((a) -> b, a*P! per Q!) -> b*P! per Q!;
  for_index P,Q: for_unit a, P!u, Q!v: ((1) -> 1, a*P!u per Q!v) -> a*P!u per Q!v;

# ----------------------------------------------------------------------------
# IO Settings
# ----------------------------------------------------------------------------

deftype IOSettings() = Tuple(1, Boole());

declare public io_settings :: IOSettings();

declare public decs :: (1) -> IOSettings();
declare public decs_io :: (1, IOSettings()) -> IOSettings();

declare public thousands_separator :: (Boole()) -> IOSettings();
declare public thousands_separator_io :: (Boole(), IOSettings()) -> IOSettings();

define io_settings =
  tuple(2, true);

define decs(n) =
  decs_io(n, io_settings);

define thousands_separator(boole) =
  thousands_separator_io(boole, io_settings);

define decs_io(n, settings) =
  let (_, thousands_separator) = settings in
    tuple(n, thousands_separator)
  end;

define thousands_separator_io(boole, settings) =
  let (decs, _) = settings in
    tuple(decs, boole)
  end;

# ----------------------------------------------------------------------------
# String IO
# ----------------------------------------------------------------------------

declare public int2str, num2str :: for_unit a: (a) -> String();
declare public int2str_io, num2str_io :: for_unit a: (a,  IOSettings()) -> String();

declare public as_text :: for_type t: (t) -> String();

declare public _printed :: for_type a: (a) -> a;
declare public _print :: for_type a: (a) -> Void();
#declare public write :: for_type a: (a) -> Void();

declare public print_grid :: for_type t: (List(List(t))) -> String();

declare public unit_text :: for_unit a: (a) -> String();
declare public unit_expression :: for_unit a: (a) -> String();

declare public get_unit_text ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v, P, Q) -> String();

declare public get_unit_expression ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v, P, Q) -> String();

declare public text2string :: (Report()) -> String();

declare public split_string :: (String, String) -> List(String);

declare public trim :: (String) -> String;

declare public parse_num :: (String) -> 1;

define num2str(x) =
  num2str_io(x, io_settings);

define int2str_io(x, settings) =
  num2str_io(x, decs_io(0, settings));

define int2str(x) =
  int2str_io(x, io_settings);

# ----------------------------------------------------------------------------
# Array
# ----------------------------------------------------------------------------

declare public make_array :: for_type t: (1) -> Array(t);
declare public array_get :: for_type t: (Array(t), 1) -> t;
declare public array_put :: for_type t: (Array(t), 1, t) -> Void;
declare public array_size :: for_type t: (Array(t)) -> 1;
