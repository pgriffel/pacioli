# Copyright (c) 2018 Paul Griffioen
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

export
    set_nr_decimals,
    nr_decimals,
    with_output_file,
    file_write,
    print;

# ----------------------------------------------------------------------------
# Number of decimals
# ----------------------------------------------------------------------------

doc set_nr_decimals
    "Sets the number of decimals that is used when printing numbers.
    
    This is a global effect.";

declare set_nr_decimals :: (1) -> Void;

# ----------------------------------------------------------------------------

doc nr_decimals
    "The number of decimals that is used when printing numbers.
    
    See <code>set_nr_decimals</code>";

declare nr_decimals :: () -> 1;

# ----------------------------------------------------------------------------
# File IO
# ----------------------------------------------------------------------------

doc with_output_file
    "Opens a file for writing and calls the callback with a handle to
    the file";
    
declare with_output_file :: (String, (File) -> Void) -> Void;

# ----------------------------------------------------------------------------

doc file_write
    "Write a string to a file. Use <code>with_output_file</code> to get a file
    handle.";

declare file_write :: (File, String) -> Void;

# ----------------------------------------------------------------------------
# Terminal IO
# ----------------------------------------------------------------------------

doc print
    "Writes a string to standard output.";

declare print :: (String) -> Void;
