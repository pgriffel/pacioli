# Copyright (c) 2013 Paul Griffioen
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

include system;
include string;
include list;
include matrix;

declare export int2str :: for_index D, E: for_unit a, D!b, E!c:
    (a*D!b per E!c, a*D!b per E!c) -> String;

define int2str(x, unit) = num2string(x, 0, unit);

# ------------------------------------------------------------------------------
# Constants
# ------------------------------------------------------------------------------

declare export pi :: 1;

define pi = 3.141592653589793;

# ------------------------------------------------------------------------------
# Percentages and Fractions
# ------------------------------------------------------------------------------

defunit percent "%" = 0.01;

defconv percent_conv :: percent;

declare export to_percentage :: for_index D,E: (D! per E!) -> percent*D! per E!;
declare export from_percentage :: for_index D,E: (percent*D! per E!) -> D! per E!;

define to_percentage(x) = percent_conv '.*' x;
define from_percentage(x) = x '/.' percent_conv;

define fraction(x, y) = to_percentage(x / y);

# ------------------------------------------------------------------------------
# Radian functons
# ------------------------------------------------------------------------------

declare export asin, acos, atan ::
  for_index P,Q: (P! per Q!) -> radian * P! per Q!;

declare export atan2 ::
  for_index P,Q: for_unit a, P!u, Q!v: (a*P!u per Q!v, a*P!u per Q!v) -> radian * P! per Q!;

define asin(x) = |radian| '.*' _asin(x);
define acos(x) = |radian| '.*' _acos(x);
define atan(x) = |radian| '.*' _atan(x);
define atan2(x, y) = |radian| '.*' _atan2(x, y);

# ------------------------------------------------------------------------------
# Approximate equality
# ------------------------------------------------------------------------------

defunit decimals "decs";

declare export approximates :: for_index I, J: for_unit a, I!u, J!v:
    (a*I!u per J!v, a*I!u per J!v, decimals) -> Boole;

declare export approximates_to :: for_index I, J: for_unit a, I!u, J!v:
    (decimals) -> (a*I!u per J!v, a*I!u per J!v) -> Boole;

define approximates(x, y, decs) =
    let diff = abs(x - y) in
        magnitude(diff) <= support(diff) '/.' expt(10, magnitude(decs))
    end;

define approximates_to(decs) =
    (x, y) ->
        let diff = abs(x - y) in
            magnitude(diff) <= support(diff) '/.' expt(10, magnitude(decs))
        end;

# ----------------------------------------------------------------------------
# Comparison
# ----------------------------------------------------------------------------

declare export compare :: (1, 1) -> 1;

define compare(x, y) =
    if x < y then
        -1
    else if x > y then
        1
    else
        0
    end;

# ------------------------------------------------------------------------------
# Primitives for Comprehensions (todo: implement properly)
# ------------------------------------------------------------------------------

declare export list_count :: (List(Boole())) -> 1;

declare export list_concat :: (List(String())) -> String();

declare export list_sum, list_min, list_max :: 
  for_index P, Q: for_unit a, P!u, Q!v: (List(a*P!u per Q!v)) -> a*P!u per Q!v;

declare export list_gcd :: 
  for_index P, Q: for_unit a, P!u, Q!v: (List(P! per Q!)) -> P! per Q!;

declare export list_all, list_some :: (List(Boole())) -> Boole();


define list_count(xs) = list_size([x | x <- xs, x]);
define list_concat(xs) = if xs = [] then "" else fold_list(concatenate, xs) end;
define list_sum(x) = fold_list(sum, x);
define list_min(x) = fold_list(min, x);
define list_max(x) = fold_list(max, x);
define list_gcd(x) = fold_list(gcd, x);
define list_all(x) = if x = [] then true else fold_list((a, b) -> a and b, x) end;
define list_some(x) = if x = [] then false else fold_list((a, b) -> a or b, x) end;
