# Copyright (c) 2013 Paul Griffioen
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

export
    flatten,
    combis,
    scanl1,
    scanl,
    zip_with,
    unzip,
    remove_nth;

# ------------------------------------------------------------------------------
# Lists
# ------------------------------------------------------------------------------

declare combis :: for_type t: (List(t)) -> List(Tuple(t, t));
declare flatten :: for_type t: (List(List(t))) -> List(t);
declare scanl1 :: for_type t: ((t, t) -> t, List(t)) -> List(t);
declare scanl :: for_type s,t: ((t, s) -> t, t, List(s)) -> List(t);
declare zip_with :: for_type s,t,u: ((s, t) -> u, List(s), List(t)) -> List(u);
declare unzip :: for_type s, t: (List(Tuple(s, t))) -> Tuple(List(s), List(t));
declare remove_nth :: for_type t: (1, List(t)) -> List(t);

# ------------------------------------------------------------------------------

doc combis
    "A list of pairs containing all combinations of elements from the two given
    lists. 

    For example <code>combis([1,2,3])</code> contains the elements
    <code>(1,2)</code>, <code>(1,3)</code> and <code>(2,3)</code>.

    The order is undefined.";
    
define combis(list) =
    let accumulator(accu, x) =
        let (result, tails) = accu in
            tuple(append([tuple(x,y) | y <- tail(tails)], result), tail(tails))
        end
    in
        let (result, _) = loop_list(tuple([], list), accumulator, list) in result end
    end;

# ------------------------------------------------------------------------------

doc flatten
    "Turns a list of lists into a list. All lists are appened.";
    
define flatten(xss) =
    [x | xs <- xss, x <- xs];

# ------------------------------------------------------------------------------

doc unzip
    "Turns a list of pairs into a pair of lists.";
    
define unzip(xs) = 
    tuple([a | (a, _) <- xs], [b | (_, b) <- xs]);

# ------------------------------------------------------------------------------

doc scanl1
    "";
    
define scanl1(f, acc) = 
    scanl(f, head(acc), tail(acc));

# ------------------------------------------------------------------------------

doc scanl
    "";
    
define scanl(f, x, acc) =
    if acc = [] then
        [x]
    else
        cons(x, scanl(f, f(x, head(acc)), tail(acc)))
    end;

# ------------------------------------------------------------------------------

doc zip_with
    "Applies the given function to corresponding pairs of elements from the
    two given lists.";
    
define zip_with(f, xs, ys) = 
    map_list((pair) -> apply(f, pair), zip(xs, ys));

# ------------------------------------------------------------------------------

doc remove_nth
    "Copy of the given list with the n-th element removed.";
    
define remove_nth(n, list) =
  begin
      result := [];
      i := 0;
      size := list_size(list);
      while i != size do
          if i != n then
              result := _add_mut(result, nth(i, list));
          end
          i := i + 1;
      end
      return result;
  end;
