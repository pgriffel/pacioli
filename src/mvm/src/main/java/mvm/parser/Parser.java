
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package mvm.parser;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.LinkedList;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.Symbol;
import mvm.ast.*;
import mvm.ast.expression.*;
import mvm.ast.shape.*;
import mvm.ast.unit.*;
import mvm.MVMException;
import mvm.values.matrix.Matrix;
import mvm.values.PacioliString;
import mvm.values.Boole;
import uom.Fraction;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\002\000\002\007\005\000\002\007\002" +
    "\000\002\010\005\000\002\010\007\000\002\010\007\000" +
    "\002\010\006\000\002\010\005\000\002\010\004\000\002" +
    "\010\007\000\002\011\003\000\002\011\005\000\002\015" +
    "\003\000\002\015\005\000\002\014\004\000\002\014\005" +
    "\000\002\020\004\000\002\020\005\000\002\021\005\000" +
    "\002\021\007\000\002\016\003\000\002\016\003\000\002" +
    "\017\003\000\002\017\004\000\002\004\003\000\002\004" +
    "\005\000\002\005\004\000\002\005\005\000\002\006\002" +
    "\000\002\006\005\000\002\013\007\000\002\013\016\000" +
    "\002\013\014\000\002\013\005\000\002\013\012\000\002" +
    "\013\006\000\002\013\006\000\002\013\010\000\002\013" +
    "\010\000\002\013\004\000\002\013\006\000\002\022\002" +
    "\000\002\022\004\000\002\024\006\000\002\025\012\000" +
    "\002\025\010\000\002\025\010\000\002\025\010\000\002" +
    "\025\006\000\002\012\006\000\002\012\010\000\002\012" +
    "\010\000\002\012\010\000\002\012\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\022\002\ufffe\004\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\023\ufffe\024\ufffe\001\002\000\004\002\271" +
    "\001\002\000\022\002\ufffc\004\007\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\023\ufffc\024\ufffc\001\002\000\020\002\001" +
    "\016\021\017\015\020\022\021\020\023\016\024\017\001" +
    "\002\000\004\055\010\001\002\000\006\005\ufff4\015\ufff4" +
    "\001\002\000\006\005\012\015\013\001\002\000\022\002" +
    "\uffff\004\uffff\016\uffff\017\uffff\020\uffff\021\uffff\023\uffff" +
    "\024\uffff\001\002\000\004\055\014\001\002\000\006\005" +
    "\ufff3\015\ufff3\001\002\000\004\056\265\001\002\000\004" +
    "\056\263\001\002\000\026\025\027\026\035\027\033\030" +
    "\042\031\036\033\030\034\032\035\031\053\041\054\040" +
    "\001\002\000\004\056\243\001\002\000\004\056\241\001" +
    "\002\000\004\056\025\001\002\000\004\005\024\001\002" +
    "\000\020\002\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\023" +
    "\ufffd\024\ufffd\001\002\000\004\056\026\001\002\000\030" +
    "\025\027\026\035\027\033\030\042\031\036\033\030\034" +
    "\032\035\031\037\034\053\041\054\040\001\002\000\004" +
    "\010\233\001\002\000\004\010\174\001\002\000\004\010" +
    "\213\001\002\000\004\010\210\001\002\000\004\010\205" +
    "\001\002\000\004\010\174\001\002\000\004\010\174\001" +
    "\002\000\004\010\164\001\002\000\004\005\ufff8\001\002" +
    "\000\004\010\152\001\002\000\004\010\046\001\002\000" +
    "\004\010\043\001\002\000\004\056\044\001\002\000\004" +
    "\011\045\001\002\000\010\005\uffda\007\uffda\011\uffda\001" +
    "\002\000\004\056\047\001\002\000\004\007\050\001\002" +
    "\000\014\043\052\047\056\050\051\051\054\052\055\001" +
    "\002\000\004\010\145\001\002\000\004\010\140\001\002" +
    "\000\004\011\137\001\002\000\004\010\130\001\002\000" +
    "\004\010\123\001\002\000\004\010\057\001\002\000\014" +
    "\017\060\042\065\044\062\045\063\046\061\001\002\000" +
    "\004\010\120\001\002\000\004\010\113\001\002\000\004" +
    "\010\101\001\002\000\004\010\074\001\002\000\004\011" +
    "\073\001\002\000\004\010\066\001\002\000\004\056\067" +
    "\001\002\000\004\007\070\001\002\000\004\056\071\001" +
    "\002\000\004\011\072\001\002\000\010\005\uffcc\007\uffcc" +
    "\011\uffcc\001\002\000\006\007\uffce\011\uffce\001\002\000" +
    "\014\017\060\042\065\044\062\045\063\046\061\001\002" +
    "\000\004\007\076\001\002\000\014\017\060\042\065\044" +
    "\062\045\063\046\061\001\002\000\004\011\100\001\002" +
    "\000\010\005\uffcb\007\uffcb\011\uffcb\001\002\000\014\017" +
    "\060\042\065\044\062\045\063\046\061\001\002\000\004" +
    "\007\103\001\002\000\010\013\106\057\107\060\110\001" +
    "\002\000\004\011\uffe8\001\002\000\004\011\112\001\002" +
    "\000\006\057\107\060\110\001\002\000\016\011\uffea\017" +
    "\uffea\042\uffea\044\uffea\045\uffea\046\uffea\001\002\000\016" +
    "\011\uffe9\017\uffe9\042\uffe9\044\uffe9\045\uffe9\046\uffe9\001" +
    "\002\000\004\011\uffe7\001\002\000\010\005\uffc9\007\uffc9" +
    "\011\uffc9\001\002\000\014\017\060\042\065\044\062\045" +
    "\063\046\061\001\002\000\004\007\115\001\002\000\014" +
    "\017\060\042\065\044\062\045\063\046\061\001\002\000" +
    "\004\011\117\001\002\000\010\005\uffca\007\uffca\011\uffca" +
    "\001\002\000\004\056\121\001\002\000\004\011\122\001" +
    "\002\000\010\005\uffcd\007\uffcd\011\uffcd\001\002\000\014" +
    "\043\052\047\056\050\051\051\054\052\055\001\002\000" +
    "\004\007\125\001\002\000\010\013\106\057\107\060\110" +
    "\001\002\000\004\011\127\001\002\000\006\007\uffd0\011" +
    "\uffd0\001\002\000\004\056\131\001\002\000\004\007\132" +
    "\001\002\000\014\043\052\047\056\050\051\051\054\052" +
    "\055\001\002\000\004\007\134\001\002\000\014\043\052" +
    "\047\056\050\051\051\054\052\055\001\002\000\004\011" +
    "\136\001\002\000\006\007\uffd2\011\uffd2\001\002\000\010" +
    "\005\uffd8\007\uffd8\011\uffd8\001\002\000\004\056\141\001" +
    "\002\000\004\007\142\001\002\000\004\056\143\001\002" +
    "\000\004\011\144\001\002\000\006\007\uffcf\011\uffcf\001" +
    "\002\000\004\056\146\001\002\000\004\007\147\001\002" +
    "\000\014\043\052\047\056\050\051\051\054\052\055\001" +
    "\002\000\004\011\151\001\002\000\006\007\uffd1\011\uffd1" +
    "\001\002\000\014\043\052\047\056\050\051\051\054\052" +
    "\055\001\002\000\004\007\154\001\002\000\006\011\uffd5" +
    "\060\uffd5\001\002\000\006\011\157\060\160\001\002\000" +
    "\006\011\uffd4\060\uffd4\001\002\000\010\005\uffd9\007\uffd9" +
    "\011\uffd9\001\002\000\004\060\161\001\002\000\004\056" +
    "\162\001\002\000\004\007\163\001\002\000\006\011\uffd3" +
    "\060\uffd3\001\002\000\026\025\027\026\035\027\033\030" +
    "\042\031\036\033\030\034\032\035\031\053\041\054\040" +
    "\001\002\000\004\007\166\001\002\000\026\025\027\026" +
    "\035\027\033\030\042\031\036\033\030\034\032\035\031" +
    "\053\041\054\040\001\002\000\004\007\170\001\002\000" +
    "\026\025\027\026\035\027\033\030\042\031\036\033\030" +
    "\034\032\035\031\053\041\054\040\001\002\000\004\011" +
    "\172\001\002\000\010\005\uffdc\007\uffdc\011\uffdc\001\002" +
    "\000\026\025\027\026\035\027\033\030\042\031\036\033" +
    "\030\034\032\035\031\053\041\054\040\001\002\000\006" +
    "\011\177\056\176\001\002\000\006\007\200\011\201\001" +
    "\002\000\006\007\ufff2\011\ufff2\001\002\000\034\005\ufff0" +
    "\007\ufff0\011\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\053\ufff0\054\ufff0\001\002" +
    "\000\004\056\202\001\002\000\034\005\uffef\007\uffef\011" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\033\uffef" +
    "\034\uffef\035\uffef\053\uffef\054\uffef\001\002\000\006\007" +
    "\ufff1\011\ufff1\001\002\000\010\005\uffdd\007\uffdd\011\uffdd" +
    "\001\002\000\004\005\ufff9\001\002\000\004\056\206\001" +
    "\002\000\004\011\207\001\002\000\010\005\uffdb\007\uffdb" +
    "\011\uffdb\001\002\000\004\056\211\001\002\000\004\011" +
    "\212\001\002\000\010\005\uffd6\007\uffd6\011\uffd6\001\002" +
    "\000\004\056\214\001\002\000\004\007\215\001\002\000" +
    "\004\056\216\001\002\000\004\007\217\001\002\000\004" +
    "\056\220\001\002\000\004\007\221\001\002\000\026\025" +
    "\027\026\035\027\033\030\042\031\036\033\030\034\032" +
    "\035\031\053\041\054\040\001\002\000\006\007\223\011" +
    "\224\001\002\000\026\025\027\026\035\027\033\030\042" +
    "\031\036\033\030\034\032\035\031\053\041\054\040\001" +
    "\002\000\010\005\uffde\007\uffde\011\uffde\001\002\000\006" +
    "\007\227\011\230\001\002\000\006\007\uffe6\011\uffe6\001" +
    "\002\000\026\025\027\026\035\027\033\030\042\031\036" +
    "\033\030\034\032\035\031\053\041\054\040\001\002\000" +
    "\010\005\uffdf\007\uffdf\011\uffdf\001\002\000\006\007\uffe5" +
    "\011\uffe5\001\002\000\010\005\uffd7\007\uffd7\011\uffd7\001" +
    "\002\000\026\025\027\026\035\027\033\030\042\031\036" +
    "\033\030\034\032\035\031\053\041\054\040\001\002\000" +
    "\006\007\uffe2\011\uffe2\001\002\000\006\007\236\011\237" +
    "\001\002\000\026\025\027\026\035\027\033\030\042\031" +
    "\036\033\030\034\032\035\031\053\041\054\040\001\002" +
    "\000\010\005\uffe0\007\uffe0\011\uffe0\001\002\000\006\007" +
    "\uffe1\011\uffe1\001\002\000\004\056\242\001\002\000\004" +
    "\005\ufffb\001\002\000\004\056\244\001\002\000\004\037" +
    "\245\001\002\000\004\010\247\001\002\000\004\005\ufff5" +
    "\001\002\000\006\011\252\056\251\001\002\000\006\007" +
    "\255\011\256\001\002\000\004\006\253\001\002\000\004" +
    "\005\uffee\001\002\000\014\017\060\042\065\044\062\045" +
    "\063\046\061\001\002\000\006\007\uffec\011\uffec\001\002" +
    "\000\004\056\257\001\002\000\004\005\uffed\001\002\000" +
    "\004\006\260\001\002\000\014\017\060\042\065\044\062" +
    "\045\063\046\061\001\002\000\006\007\uffeb\011\uffeb\001" +
    "\002\000\004\005\ufff6\001\002\000\026\025\027\026\035" +
    "\027\033\030\042\031\036\033\030\034\032\035\031\053" +
    "\041\054\040\001\002\000\004\005\ufff7\001\002\000\004" +
    "\056\266\001\002\000\006\057\107\060\110\001\002\000" +
    "\014\017\060\042\065\044\062\045\063\046\061\001\002" +
    "\000\004\005\ufffa\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\007\005\001\001\000\004\010\022\001\001" +
    "\000\004\011\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\036\001\001\000\002\001\001\000\004\014\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\203\001\001\000\004\014\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\074\001\001" +
    "\000\002\001\001\000\004\012\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\101\001\001\000\002" +
    "\001\001\000\006\016\103\017\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\113\001\001\000\002\001\001\000\004" +
    "\012\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\123\001\001\000\002\001\001\000\006\016\103\017" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\132\001\001\000" +
    "\002\001\001\000\004\025\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\152\001\001\000\002\001\001\000\004\022\154\001" +
    "\001\000\004\024\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\164\001\001\000\002" +
    "\001\001\000\004\013\166\001\001\000\002\001\001\000" +
    "\004\013\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\202\001\001\000\004\015\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\221\001\001\000\002\001\001\000\006" +
    "\004\224\013\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\233\001\001\000\004\006\234\001\001\000\002\001\001" +
    "\000\004\013\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\245\001\001\000\002\001" +
    "\001\000\004\021\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\266\001\001\000\004\012" +
    "\267\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* The file being parsed. Only needed for location info. */
   File file;                   

    /* Buffer to get syntax error ino from message and location info
       from CUP's syntax_error to CUP's report_fatal_error
       function. */
    String errorMessage;
    String errorLocation;

   /* Public interface */
    public Parser(Lexer lex, ComplexSymbolFactory sf, File file) {
        super(lex,sf);
        this.file = file;
    }

    public static Program parseFile(File file) throws Exception {
        BufferedReader reader = new BufferedReader(new FileReader(file));
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        Lexer lexer = new Lexer(reader, csf, file, null);
        Parser parser = new Parser(lexer, csf, file);
        return (Program ) parser.parse().value;
    }

   /* CUP overrides to get error handling with location info */
    public void report_error(String message, Object info) {
    }

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        done_parsing();      
        throw new MVMException("Error at %s: %s %s %s", errorLocation, errorMessage, message, info);
    }

    public void syntax_error(Symbol cur_token) {
        assert(cur_token instanceof ComplexSymbol);
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();
        for (Integer expected : ids){
            list.add(symbl_name_from_id(expected));
        }
        ComplexSymbol token = (ComplexSymbol) cur_token;
        errorLocation = String.format("%s-%s", token.getLeft(), token.getRight());
        errorMessage = "Expected one of " + list;
    }

   /* Utility functions for the grammar rules */
//    private pacioli.Location makeLoc(Location from, Location to) {
//        pacioli.Location pacioliFrom = new pacioli.Location(file, from.getLine(), from.getColumn(), from.getOffset());
//        pacioli.Location pacioliTo = new pacioli.Location(file, to.getLine(), to.getColumn(), to.getOffset());
//        return pacioliFrom.join(pacioliTo);
//    }

    private class UnitDecl {

        String name;
        UnitNode unit;

        public UnitDecl(String name, UnitNode unit) {
            this.name = name;
            this.unit = unit;
        }
    };

    private class ValueDecl {

        String row;
        String column;
        String value;

        public ValueDecl(String row, String column, String value) {
            this.row = row;
            this.column = column;
            this.value = value;
        }
    };



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= requires commands 
            {
              Program RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Identifier> r = (List<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruction> c = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Program prog = new Program(); 
                                                         for(Identifier req: r) {
                                                             prog.addRequire(req.name());
                                                         };
                                                         for(Instruction inst: c) {
                                                             prog.addInstruction(inst);
                                                         };
                                                         RESULT = prog; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // requires ::= requires REQUIRE path SEMICOLON 
            {
              List<Identifier> RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Identifier> is = (List<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier p = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 is.add(p); RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requires",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // requires ::= 
            {
              List<Identifier> RESULT =null;
		 RESULT = new LinkedList<Identifier>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requires",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // commands ::= commands command SEMICOLON 
            {
              List<Instruction> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruction> cs = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 cs.add(c); RESULT = cs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commands",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // commands ::= 
            {
              List<Instruction> RESULT =null;
		 RESULT = new LinkedList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commands",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // command ::= BASEUNIT STR STR 
            {
              Instruction RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StoreUnit(b, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command ::= UNIT STR STR unsigned unit 
            {
              Instruction RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int unleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int unright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnitNode un = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StoreUnit(b, n, d, un); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command ::= INDEXSET STR STR LIST string_list 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> s = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StoreIndexSet(f, n, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // command ::= INDEXSET STR STR expr 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StoreDynamicIndexSet(f, n, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // command ::= STORE STR expr 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StoreValue(n, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // command ::= PRINT expr 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // command ::= UNITVECTOR STR STR LIST unit_list 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<UnitDecl> l = (List<UnitDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> names = new ArrayList<String>();
                                                         List<UnitNode> units = new ArrayList<UnitNode>();
                                                         for (UnitDecl d: l) {
                                                           names.add(d.name);
                                                           units.add(d.unit);
                                                         }
                                                         RESULT = new StoreUnitVector(e, u, names, units); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // path ::= IDENT 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Identifier(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // path ::= path DIV IDENT 
            {
              Identifier RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identifier p = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Identifier(p.name() + "/" + i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // strings ::= STR 
            {
              List<String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<String>(Arrays.asList(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // strings ::= strings COMMA STR 
            {
              List<String> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> ss = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // string_list ::= LPAR RPAR 
            {
              List<String> RESULT =null;
		 RESULT = new LinkedList<String>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // string_list ::= LPAR strings RPAR 
            {
              List<String> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> ss = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unit_list ::= LPAR RPAR 
            {
              List<UnitDecl> RESULT =null;
		 RESULT = new LinkedList<UnitDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unit_list ::= LPAR unit_parts RPAR 
            {
              List<UnitDecl> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<UnitDecl> ps = (List<UnitDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unit_parts ::= STR COLON unit 
            {
              List<UnitDecl> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<UnitDecl>(Arrays.asList(new UnitDecl(n, u))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_parts",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // unit_parts ::= unit_parts COMMA STR COLON unit 
            {
              List<UnitDecl> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<UnitDecl> ps = (List<UnitDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(new UnitDecl(n, u)); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_parts",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unsigned ::= DECIMAL 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unsigned ::= NATURAL 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // number ::= unsigned 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // number ::= NEG unsigned 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "-" + u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exprs ::= expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Expression>(Arrays.asList(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprs",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exprs ::= exprs COMMA expr 
            {
              List<Expression> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> es = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 es.add(e); RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprs",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exprlist ::= LPAR RPAR 
            {
              List<Expression> RESULT =null;
		 RESULT = new LinkedList<Expression>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exprlist ::= LPAR exprs RPAR 
            {
              List<Expression> RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> exprs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exprs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // args ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new LinkedList<Expression>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // args ::= args COMMA expr 
            {
              List<Expression> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> es = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 es.add(e); RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= APPLICATION LPAR expr args RPAR 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> a = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Application(f, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= APPLICATION_DEBUG LPAR STR COMMA STR COMMA STR COMMA expr COMMA exprs RPAR 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int traceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int traceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String trace = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int funleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression fun = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ApplicationDebug(a,b,trace.equals("true"),fun, args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= APPLICATION_DEBUG LPAR STR COMMA STR COMMA STR COMMA expr RPAR 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int traceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int traceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String trace = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int funleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression fun = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ApplicationDebug(a,b,trace.equals("true"),fun, new ArrayList<Expression>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= LAMBDA string_list expr 
            {
              Expression RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lambda(ids, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= IF LPAR expr COMMA expr COMMA expr RPAR 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Branch(t, p, n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= VAR LPAR STR RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Identifier(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= CONST LPAR STR RPAR 
            {
              Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (value.equals("true")) {
                                                                RESULT = new Const(new Boole(true));
                                                          } else if (value.equals("false")) {
                                                                RESULT = new Const(new Boole(false));
  						          } else {
  							        RESULT = new Const(new Matrix(Double .parseDouble(value)));
  						          }; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= LITERAL_MATRIX LPAR shape COMMA listlit RPAR 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ShapeNode s = (ShapeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ValueDecl> l = (List<ValueDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 int size = l.size();
                                                           List<String> rows = new ArrayList<String>();
                                                           List<String> columns = new ArrayList<String>();
                                                           List<String> values = new ArrayList<String>();
                                                           for (ValueDecl dec: l) {
                                                               rows.add(dec.row);
                                                               columns.add(dec.column);
                                                               values.add(dec.value);
                                                           }
                                                           RESULT = new LitMat(s, rows, columns, values); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= MATRIX_CONSTRUCTOR LPAR STR COMMA shape RPAR 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ShapeNode s = (ShapeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MatrixConstructor(n, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= KEY string_list 
            {
              Expression RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 int size = ids.size();
                                                           List<String> sets = new ArrayList<String>();
                                                           List<String> items = new ArrayList<String>();
                                                           for (int i = 0; i < size; i+=2) {
                                                               sets.add(ids.get(i));
                                                               items.add(ids.get(i + 1));
                                                           }
                                                           RESULT = new LitKey(sets, items); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= STRING LPAR STR RPAR 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Const(new PacioliString(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listlit ::= 
            {
              List<ValueDecl> RESULT =null;
		 RESULT = new LinkedList<ValueDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listlit",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listlit ::= listlit part 
            {
              List<ValueDecl> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ValueDecl> ps = (List<ValueDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ValueDecl p = (ValueDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(p); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listlit",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // part ::= NATURAL NATURAL STR COMMA 
            {
              ValueDecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ValueDecl(i, j, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // shape ::= SHAPE_BINOP LPAR STR COMMA shape COMMA shape RPAR 
            {
              ShapeNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ShapeNode l = (ShapeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ShapeNode r = (ShapeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ShapeBinop(op, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shape",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // shape ::= SHAPE_UNOP LPAR STR COMMA shape RPAR 
            {
              ShapeNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ShapeNode r = (ShapeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ShapeUnop(op, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shape",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // shape ::= SHAPE_EXPT LPAR shape COMMA number RPAR 
            {
              ShapeNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ShapeNode l = (ShapeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ShapeExpt(l, new Fraction(Integer.parseInt(n))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shape",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // shape ::= BANG_SHAPE LPAR STR COMMA STR RPAR 
            {
              ShapeNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BangShape(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shape",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // shape ::= SCALAR_SHAPE LPAR unit RPAR 
            {
              ShapeNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ScalarShape(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shape",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unit ::= UNIT LPAR STR RPAR 
            {
              UnitNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UnitNamed(x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unit ::= SCALED_UNIT LPAR STR COMMA STR RPAR 
            {
              UnitNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UnitNamed(x + ":" + y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unit ::= UNIT_MULT LPAR unit COMMA unit RPAR 
            {
              UnitNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		UnitNode x = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		UnitNode y = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UnitMult(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unit ::= UNIT_DIV LPAR unit COMMA unit RPAR 
            {
              UnitNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		UnitNode x = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		UnitNode y = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UnitDiv(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unit ::= UNIT_EXPT LPAR unit COMMA number RPAR 
            {
              UnitNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		UnitNode x = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UnitExpt(x, new Fraction(Integer.parseInt(n))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
