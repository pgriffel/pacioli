// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package mvm.parser;

import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java.io.File;
import java.io.IOException;
import mvm.MVMException;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRINGSEQ = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\0\1\4\1\5\1\6\3\0\1\7\1\10\1\11"+
    "\1\0\1\12\1\13\1\14\1\15\12\16\1\17\1\20"+
    "\5\0\32\6\1\0\1\21\1\0\1\22\1\23\1\0"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\6\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\6\1\51"+
    "\1\52\1\6\u0185\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\14\4\1\17\1\20\1\1\1\0\1\2\2\0\3\4"+
    "\1\21\16\4\1\22\1\23\1\24\1\25\1\26\2\0"+
    "\1\27\5\4\1\30\15\4\1\31\1\0\1\4\1\32"+
    "\4\4\1\33\1\4\1\34\1\4\1\35\6\4\1\36"+
    "\3\4\1\37\1\40\3\4\1\41\4\4\1\42\7\4"+
    "\1\43\1\4\1\44\4\4\1\45\12\4\1\46\13\4"+
    "\1\47\1\50\7\4\1\51\14\4\1\52\1\53\2\4"+
    "\1\54\5\4\1\55\1\56\1\57\1\60\3\4\1\61"+
    "\1\62\3\4\1\63\4\4\1\64\5\4\1\65\1\4"+
    "\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\126\0\201\0\126\0\254\0\327"+
    "\0\126\0\126\0\126\0\126\0\126\0\u0102\0\u012d\0\126"+
    "\0\126\0\126\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\126"+
    "\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4"+
    "\0\327\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1"+
    "\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\126"+
    "\0\126\0\126\0\126\0\126\0\u0739\0\u0764\0\u0433\0\u078f"+
    "\0\u07ba\0\u07e5\0\u0810\0\u083b\0\327\0\u0866\0\u0891\0\u08bc"+
    "\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14"+
    "\0\u0a3f\0\u0a6a\0\327\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41"+
    "\0\u0b6c\0\u0b97\0\327\0\u0bc2\0\327\0\u0bed\0\327\0\u0c18"+
    "\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70"+
    "\0\u0d9b\0\327\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\327\0\u0e72"+
    "\0\u0e9d\0\u0ec8\0\u0ef3\0\327\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f"+
    "\0\u0fca\0\u0ff5\0\u1020\0\327\0\u104b\0\u1076\0\u10a1\0\u10cc"+
    "\0\u10f7\0\u1122\0\327\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9"+
    "\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0\0\327\0\u12fb\0\u1326"+
    "\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e"+
    "\0\u14a9\0\327\0\327\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580"+
    "\0\u15ab\0\u15d6\0\327\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad"+
    "\0\u16d8\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da\0\327"+
    "\0\327\0\u1805\0\u1830\0\327\0\u185b\0\u1886\0\u18b1\0\u18dc"+
    "\0\u1907\0\327\0\327\0\327\0\u1932\0\u195d\0\u1988\0\u19b3"+
    "\0\327\0\327\0\u19de\0\u1a09\0\u1a34\0\327\0\u1a5f\0\u1a8a"+
    "\0\u1ab5\0\u1ae0\0\327\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7"+
    "\0\327\0\u1be2\0\327";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\3\1\16\1\17\1\20\1\21"+
    "\1\3\1\22\1\10\1\23\1\24\1\25\5\10\1\26"+
    "\1\27\1\30\1\31\2\10\1\32\1\10\1\33\1\34"+
    "\1\10\1\35\1\36\2\10\4\37\1\40\14\37\1\41"+
    "\31\37\55\0\1\42\50\0\2\7\1\4\1\43\47\7"+
    "\6\0\1\10\7\0\1\10\4\0\30\10\11\0\1\44"+
    "\55\0\1\45\1\0\1\17\42\0\1\10\7\0\1\10"+
    "\4\0\17\10\1\46\10\10\6\0\1\10\7\0\1\10"+
    "\4\0\1\10\1\47\26\10\6\0\1\10\7\0\1\10"+
    "\4\0\16\10\1\50\11\10\6\0\1\10\7\0\1\10"+
    "\4\0\6\10\1\51\6\10\1\52\12\10\6\0\1\10"+
    "\7\0\1\10\4\0\5\10\1\53\22\10\6\0\1\10"+
    "\7\0\1\10\4\0\1\10\1\54\7\10\1\55\4\10"+
    "\1\56\11\10\6\0\1\10\7\0\1\10\4\0\1\10"+
    "\1\57\26\10\6\0\1\10\7\0\1\10\4\0\1\10"+
    "\1\60\17\10\1\61\6\10\6\0\1\10\7\0\1\10"+
    "\4\0\5\10\1\62\22\10\6\0\1\10\7\0\1\10"+
    "\4\0\3\10\1\63\4\10\1\64\12\10\1\65\4\10"+
    "\6\0\1\10\7\0\1\10\4\0\15\10\1\66\12\10"+
    "\6\0\1\10\7\0\1\10\4\0\1\10\1\67\26\10"+
    "\4\37\1\0\14\37\1\0\31\37\4\0\1\70\14\0"+
    "\1\71\16\0\1\72\3\0\1\73\1\0\1\74\24\0"+
    "\1\4\34\0\1\4\50\0\11\75\1\76\41\75\16\0"+
    "\1\77\42\0\1\10\7\0\1\10\4\0\17\10\1\100"+
    "\10\10\6\0\1\10\7\0\1\10\4\0\15\10\1\101"+
    "\4\10\1\102\5\10\6\0\1\10\7\0\1\10\4\0"+
    "\15\10\1\103\12\10\6\0\1\10\7\0\1\10\4\0"+
    "\4\10\1\104\23\10\6\0\1\10\7\0\1\10\4\0"+
    "\27\10\1\105\6\0\1\10\7\0\1\10\4\0\14\10"+
    "\1\106\13\10\6\0\1\10\7\0\1\10\4\0\22\10"+
    "\1\107\1\110\4\10\6\0\1\10\7\0\1\10\4\0"+
    "\1\10\1\111\26\10\6\0\1\10\7\0\1\10\4\0"+
    "\23\10\1\112\4\10\6\0\1\10\7\0\1\10\4\0"+
    "\23\10\1\113\4\10\6\0\1\10\7\0\1\10\4\0"+
    "\11\10\1\114\16\10\6\0\1\10\7\0\1\10\4\0"+
    "\20\10\1\115\7\10\6\0\1\10\7\0\1\10\4\0"+
    "\1\10\1\116\26\10\6\0\1\10\7\0\1\10\4\0"+
    "\1\10\1\117\26\10\6\0\1\10\7\0\1\10\4\0"+
    "\16\10\1\120\2\10\1\121\6\10\6\0\1\10\7\0"+
    "\1\10\4\0\11\10\1\122\16\10\6\0\1\10\7\0"+
    "\1\10\4\0\21\10\1\123\6\10\11\75\1\124\41\75"+
    "\11\0\1\76\3\0\1\4\43\0\1\10\7\0\1\10"+
    "\4\0\13\10\1\125\14\10\6\0\1\10\7\0\1\10"+
    "\4\0\7\10\1\126\20\10\6\0\1\10\7\0\1\10"+
    "\4\0\5\10\1\127\22\10\6\0\1\10\7\0\1\10"+
    "\4\0\22\10\1\130\5\10\6\0\1\10\7\0\1\10"+
    "\4\0\5\10\1\131\22\10\6\0\1\10\7\0\1\10"+
    "\4\0\2\10\1\132\25\10\6\0\1\10\7\0\1\10"+
    "\4\0\23\10\1\133\4\10\6\0\1\10\7\0\1\10"+
    "\4\0\5\10\1\134\22\10\6\0\1\10\7\0\1\10"+
    "\4\0\4\10\1\135\23\10\6\0\1\10\7\0\1\10"+
    "\4\0\21\10\1\136\6\10\6\0\1\10\7\0\1\10"+
    "\4\0\10\10\1\137\17\10\6\0\1\10\7\0\1\10"+
    "\4\0\15\10\1\140\12\10\6\0\1\10\7\0\1\10"+
    "\4\0\24\10\1\141\3\10\6\0\1\10\7\0\1\10"+
    "\4\0\13\10\1\142\14\10\6\0\1\10\7\0\1\10"+
    "\4\0\17\10\1\143\10\10\6\0\1\10\7\0\1\10"+
    "\4\0\21\10\1\144\6\10\6\0\1\10\7\0\1\10"+
    "\4\0\11\10\1\145\16\10\6\0\1\10\7\0\1\10"+
    "\4\0\23\10\1\146\4\10\11\75\1\124\3\75\1\4"+
    "\35\75\6\0\1\10\7\0\1\10\4\0\11\10\1\147"+
    "\16\10\6\0\1\10\7\0\1\10\4\0\1\150\27\10"+
    "\6\0\1\10\7\0\1\10\4\0\24\10\1\151\3\10"+
    "\6\0\1\10\7\0\1\10\4\0\23\10\1\152\4\10"+
    "\6\0\1\10\7\0\1\10\4\0\26\10\1\153\1\10"+
    "\6\0\1\10\7\0\1\10\4\0\4\10\1\154\23\10"+
    "\6\0\1\10\7\0\1\10\4\0\21\10\1\155\6\10"+
    "\6\0\1\10\7\0\1\10\4\0\11\10\1\156\16\10"+
    "\6\0\1\10\7\0\1\10\4\0\23\10\1\157\4\10"+
    "\6\0\1\10\7\0\1\10\4\0\11\10\1\160\16\10"+
    "\6\0\1\10\7\0\1\10\4\0\1\10\1\161\3\10"+
    "\1\162\22\10\6\0\1\10\7\0\1\10\4\0\5\10"+
    "\1\163\22\10\6\0\1\10\7\0\1\10\4\0\5\10"+
    "\1\164\22\10\6\0\1\10\7\0\1\10\4\0\15\10"+
    "\1\165\12\10\6\0\1\10\7\0\1\10\4\0\1\166"+
    "\24\10\1\167\2\10\6\0\1\10\7\0\1\10\4\0"+
    "\3\10\1\170\24\10\6\0\1\10\7\0\1\10\4\0"+
    "\22\10\1\171\5\10\6\0\1\10\7\0\1\10\4\0"+
    "\15\10\1\172\12\10\6\0\1\10\7\0\1\10\4\0"+
    "\22\10\1\173\5\10\6\0\1\10\7\0\1\10\4\0"+
    "\1\10\1\174\26\10\6\0\1\10\7\0\1\10\4\0"+
    "\1\10\1\175\26\10\6\0\1\10\7\0\1\10\4\0"+
    "\26\10\1\176\1\10\6\0\1\10\7\0\1\10\4\0"+
    "\21\10\1\177\6\10\6\0\1\10\7\0\1\10\4\0"+
    "\21\10\1\200\6\10\6\0\1\10\7\0\1\10\4\0"+
    "\4\10\1\201\23\10\6\0\1\10\7\0\1\10\4\0"+
    "\1\202\27\10\6\0\1\10\7\0\1\10\4\0\7\10"+
    "\1\203\20\10\6\0\1\10\7\0\1\10\4\0\4\10"+
    "\1\204\1\205\6\10\1\206\13\10\6\0\1\10\7\0"+
    "\1\10\4\0\5\10\1\207\22\10\6\0\1\10\7\0"+
    "\1\10\4\0\1\10\1\210\26\10\6\0\1\10\7\0"+
    "\1\10\4\0\10\10\1\211\17\10\6\0\1\10\7\0"+
    "\1\10\4\0\11\10\1\212\16\10\6\0\1\10\7\0"+
    "\1\10\4\0\5\10\1\213\22\10\6\0\1\10\7\0"+
    "\1\10\4\0\13\10\1\214\14\10\6\0\1\10\7\0"+
    "\1\10\4\0\1\215\27\10\6\0\1\10\7\0\1\10"+
    "\4\0\5\10\1\216\22\10\6\0\1\10\7\0\1\10"+
    "\4\0\1\217\27\10\6\0\1\10\7\0\1\10\4\0"+
    "\1\220\27\10\6\0\1\10\7\0\1\10\4\0\2\10"+
    "\1\221\2\10\1\222\16\10\1\223\3\10\6\0\1\10"+
    "\7\0\1\10\4\0\11\10\1\224\16\10\6\0\1\10"+
    "\7\0\1\10\4\0\26\10\1\225\1\10\6\0\1\10"+
    "\7\0\1\10\4\0\24\10\1\226\3\10\6\0\1\10"+
    "\7\0\1\10\4\0\3\10\1\227\24\10\6\0\1\10"+
    "\7\0\1\10\4\0\23\10\1\230\4\10\6\0\1\10"+
    "\7\0\1\10\4\0\1\10\1\231\26\10\6\0\1\10"+
    "\7\0\1\10\4\0\23\10\1\232\4\10\6\0\1\10"+
    "\7\0\1\10\4\0\23\10\1\233\4\10\6\0\1\10"+
    "\7\0\1\10\4\0\1\234\27\10\6\0\1\10\7\0"+
    "\1\10\4\0\3\10\1\235\24\10\6\0\1\10\7\0"+
    "\1\10\4\0\22\10\1\236\5\10\6\0\1\10\7\0"+
    "\1\10\4\0\24\10\1\237\3\10\6\0\1\10\7\0"+
    "\1\10\4\0\11\10\1\240\16\10\6\0\1\10\7\0"+
    "\1\10\4\0\26\10\1\241\1\10\6\0\1\10\7\0"+
    "\1\10\4\0\15\10\1\242\12\10\6\0\1\10\7\0"+
    "\1\10\4\0\25\10\1\243\2\10\6\0\1\10\7\0"+
    "\1\10\4\0\17\10\1\244\10\10\6\0\1\10\7\0"+
    "\1\10\4\0\13\10\1\245\14\10\6\0\1\10\7\0"+
    "\1\10\4\0\23\10\1\246\4\10\6\0\1\10\7\0"+
    "\1\10\4\0\11\10\1\247\16\10\6\0\1\10\7\0"+
    "\1\10\4\0\17\10\1\250\10\10\6\0\1\10\7\0"+
    "\1\10\4\0\14\10\1\251\13\10\6\0\1\10\7\0"+
    "\1\10\4\0\16\10\1\252\11\10\6\0\1\10\7\0"+
    "\1\10\4\0\10\10\1\253\17\10\6\0\1\10\7\0"+
    "\1\10\4\0\15\10\1\254\12\10\6\0\1\10\7\0"+
    "\1\10\4\0\15\10\1\255\12\10\6\0\1\10\7\0"+
    "\1\10\4\0\17\10\1\256\10\10\6\0\1\10\7\0"+
    "\1\10\4\0\16\10\1\257\11\10\6\0\1\10\7\0"+
    "\1\10\4\0\23\10\1\260\4\10\6\0\1\10\7\0"+
    "\1\10\4\0\23\10\1\261\4\10\6\0\1\10\7\0"+
    "\1\10\4\0\16\10\1\262\11\10\6\0\1\10\7\0"+
    "\1\10\4\0\16\10\1\263\11\10\6\0\1\10\7\0"+
    "\1\10\4\0\5\10\1\264\22\10\6\0\1\10\7\0"+
    "\1\10\4\0\1\10\1\265\26\10\6\0\1\10\7\0"+
    "\1\10\4\0\15\10\1\266\12\10\6\0\1\10\7\0"+
    "\1\10\4\0\1\10\1\267\26\10\6\0\1\10\7\0"+
    "\1\10\4\0\11\10\1\270\16\10\6\0\1\10\7\0"+
    "\1\10\4\0\16\10\1\271\11\10\6\0\1\10\7\0"+
    "\1\10\4\0\23\10\1\272\4\10\6\0\1\10\7\0"+
    "\1\10\4\0\17\10\1\273\10\10\6\0\1\10\7\0"+
    "\1\10\4\0\21\10\1\274\6\10\6\0\1\10\7\0"+
    "\1\10\4\0\15\10\1\275\12\10\6\0\1\10\7\0"+
    "\1\10\4\0\23\10\1\276\4\10\6\0\1\10\7\0"+
    "\1\10\4\0\22\10\1\277\5\10\6\0\1\10\7\0"+
    "\1\10\4\0\17\10\1\300\10\10\6\0\1\10\7\0"+
    "\1\10\4\0\23\10\1\301\4\10\6\0\1\10\7\0"+
    "\1\10\4\0\17\10\1\302\10\10\6\0\1\10\7\0"+
    "\1\10\4\0\1\303\27\10\6\0\1\10\7\0\1\10"+
    "\4\0\21\10\1\304\6\10\6\0\1\10\7\0\1\10"+
    "\4\0\23\10\1\305\4\10\6\0\1\10\7\0\1\10"+
    "\4\0\5\10\1\306\22\10\6\0\1\10\7\0\1\10"+
    "\4\0\4\10\1\307\23\10\6\0\1\10\7\0\1\10"+
    "\4\0\11\10\1\310\16\10\6\0\1\10\7\0\1\10"+
    "\4\0\21\10\1\311\6\10\6\0\1\10\7\0\1\10"+
    "\4\0\5\10\1\312\22\10\6\0\1\10\7\0\1\10"+
    "\4\0\26\10\1\313\1\10\6\0\1\10\7\0\1\10"+
    "\4\0\24\10\1\314\3\10\6\0\1\10\7\0\1\10"+
    "\4\0\2\10\1\315\25\10\6\0\1\10\7\0\1\10"+
    "\4\0\3\10\1\316\24\10\6\0\1\10\7\0\1\10"+
    "\4\0\24\10\1\317\3\10\6\0\1\10\7\0\1\10"+
    "\4\0\23\10\1\320\4\10\6\0\1\10\7\0\1\10"+
    "\4\0\7\10\1\321\20\10\6\0\1\10\7\0\1\10"+
    "\4\0\16\10\1\322\11\10\6\0\1\10\7\0\1\10"+
    "\4\0\21\10\1\323\6\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7181];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\2\1\5\11\2\1\3\11"+
    "\15\1\1\11\1\1\1\0\1\1\2\0\22\1\5\11"+
    "\2\0\25\1\1\0\177\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    public Lexer(java.io.Reader in, ComplexSymbolFactory sf, File file, String source){
	this(in);
	symbolFactory = sf;
        this.file = file;
        this.source = source;
    }
    File file;
    String source;
    ComplexSymbolFactory symbolFactory;

  private Symbol symbol(String name, int sym) {
      //return symbolFactory.newSymbol(name, sym, new Location(yyline, yycolumn, yychar), new Location(yyline, yycolumn+yylength(), yychar+yylength()));
      return symbolFactory.newSymbol(name, sym, new Location(yyline, yycolumn, (int)(long)yychar), new Location(yyline, yycolumn+yylength(), (int)(long)yychar+yylength()));
  }

  private Symbol symbol(String name, int sym, Object val) {
      Location left = new Location(yyline,yycolumn,(int)(long)yychar);
      Location right= new Location(yyline,yycolumn+yylength(), (int)(long)yychar+yylength());
      return symbolFactory.newSymbol(name, sym, left, right,val);
  }
  private Symbol symbol(String name, int sym, Object val,int buflength) {
      Location left = new Location(yyline, yycolumn+yylength()-buflength, (int)(long)yychar+yylength()-buflength);
      Location right= new Location(yyline, yycolumn+yylength(), (int)(long)yychar+yylength());
      return symbolFactory.newSymbol(name, sym, left, right,val);
  }
  private void error(String message) {
      throw new RuntimeException(new MVMException("Parse error at line %s column %s (%s length)", yyline, yycolumn, yylength()));
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {      return symbolFactory.newSymbol("EOF", EOF, new Location(yyline,yycolumn,(int)(long)yychar), new Location(yyline,yycolumn,(int)(long)yychar));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* throw new Error("Illegal character <"+ yytext()+">");*/
		    error("Illegal character '"+ yytext()+"'");
            }
            // fall through
          case 55: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 56: break;
          case 3:
            { string.setLength(0); yybegin(STRINGSEQ);
            }
            // fall through
          case 57: break;
          case 4:
            { return symbol("Ident",IDENT, yytext());
            }
            // fall through
          case 58: break;
          case 5:
            { return symbol("(", LPAR);
            }
            // fall through
          case 59: break;
          case 6:
            { return symbol(")", RPAR);
            }
            // fall through
          case 60: break;
          case 7:
            { return symbol("mult", MULT);
            }
            // fall through
          case 61: break;
          case 8:
            { return symbol("comma", COMMA);
            }
            // fall through
          case 62: break;
          case 9:
            { return symbol("neg", NEG);
            }
            // fall through
          case 63: break;
          case 10:
            { return symbol("div", DIV);
            }
            // fall through
          case 64: break;
          case 11:
            { return symbol("Natural", NATURAL, yytext());
            }
            // fall through
          case 65: break;
          case 12:
            { return symbol("colon", COLON);
            }
            // fall through
          case 66: break;
          case 13:
            { return symbol("semicolon", SEMICOLON);
            }
            // fall through
          case 67: break;
          case 14:
            { return symbol("hat", HAT);
            }
            // fall through
          case 68: break;
          case 15:
            { string.append(yytext());
            }
            // fall through
          case 69: break;
          case 16:
            { yybegin(YYINITIAL); 
                    return symbol("String", STR, string.toString(), string.length());
            }
            // fall through
          case 70: break;
          case 17:
            { return symbol("if", IF);
            }
            // fall through
          case 71: break;
          case 18:
            { string.append('\"');
            }
            // fall through
          case 72: break;
          case 19:
            { string.append('\\');
            }
            // fall through
          case 73: break;
          case 20:
            { string.append('\n');
            }
            // fall through
          case 74: break;
          case 21:
            { string.append('\r');
            }
            // fall through
          case 75: break;
          case 22:
            { string.append('\t');
            }
            // fall through
          case 76: break;
          case 23:
            { return symbol("Decimal", DECIMAL, yytext());
            }
            // fall through
          case 77: break;
          case 24:
            { return symbol("key", KEY);
            }
            // fall through
          case 78: break;
          case 25:
            { return symbol("var", VAR);
            }
            // fall through
          case 79: break;
          case 26:
            { return symbol("bang", BANG);
            }
            // fall through
          case 80: break;
          case 27:
            { return symbol("list", LIST);
            }
            // fall through
          case 81: break;
          case 28:
            { return symbol("load", LOAD);
            }
            // fall through
          case 82: break;
          case 29:
            { return symbol("path", PATH);
            }
            // fall through
          case 83: break;
          case 30:
            { return symbol("unit", UNIT);
            }
            // fall through
          case 84: break;
          case 31:
            { return symbol("const", CONST);
            }
            // fall through
          case 85: break;
          case 32:
            { return symbol("index", INDEX);
            }
            // fall through
          case 86: break;
          case 33:
            { return symbol("print", PRINT);
            }
            // fall through
          case 87: break;
          case 34:
            { return symbol("store", STORE);
            }
            // fall through
          case 88: break;
          case 35:
            { return symbol("lambda", LAMBDA);
            }
            // fall through
          case 89: break;
          case 36:
            { return symbol("matrix", MATRIX);
            }
            // fall through
          case 90: break;
          case 37:
            { return symbol("string", STRING);
            }
            // fall through
          case 91: break;
          case 38:
            { return symbol("require", REQUIRE);
            }
            // fall through
          case 92: break;
          case 39:
            { return symbol("baseunit", BASEUNIT);
            }
            // fall through
          case 93: break;
          case 40:
            { return symbol("indexset", INDEXSET);
            }
            // fall through
          case 94: break;
          case 41:
            { return symbol("unit_div", UNIT_DIV);
            }
            // fall through
          case 95: break;
          case 42:
            { return symbol("unit_expt", UNIT_EXPT);
            }
            // fall through
          case 96: break;
          case 43:
            { return symbol("unit_mult", UNIT_MULT);
            }
            // fall through
          case 97: break;
          case 44:
            { return symbol("bang_shape", BANG_SHAPE);
            }
            // fall through
          case 98: break;
          case 45:
            { return symbol("shape_expt", SHAPE_EXPT);
            }
            // fall through
          case 99: break;
          case 46:
            { return symbol("shape_unop", SHAPE_UNOP);
            }
            // fall through
          case 100: break;
          case 47:
            { return symbol("unitvector", UNITVECTOR);
            }
            // fall through
          case 101: break;
          case 48:
            { return symbol("application", APPLICATION);
            }
            // fall through
          case 102: break;
          case 49:
            { return symbol("scaled_unit", SCALED_UNIT);
            }
            // fall through
          case 103: break;
          case 50:
            { return symbol("shape_binop", SHAPE_BINOP);
            }
            // fall through
          case 104: break;
          case 51:
            { return symbol("scalar_shape", SCALAR_SHAPE);
            }
            // fall through
          case 105: break;
          case 52:
            { return symbol("literal_matrix", LITERAL_MATRIX);
            }
            // fall through
          case 106: break;
          case 53:
            { return symbol("application_debug", APPLICATION_DEBUG);
            }
            // fall through
          case 107: break;
          case 54:
            { return symbol("matrix_constructor", MATRIX_CONSTRUCTOR);
            }
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
