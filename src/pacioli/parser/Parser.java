
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pacioli.parser;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.List;
import java.util.HashMap;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.LinkedList;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.Symbol;
import pacioli.PacioliException;
import pacioli.ast.*;
import pacioli.ast.definition.*;
import pacioli.ast.definition.UnitVectorDefinition.UnitDecl;
import pacioli.ast.expression.MatrixLiteralNode.ValueDecl;
import pacioli.ast.expression.*;
import pacioli.ast.unit.*;
import pacioli.types.ast.*;
import pacioli.TypeContext;
import pacioli.Utils;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\247\000\002\002\004\000\002\002\004\000\002\004" +
    "\006\000\002\004\002\000\002\005\005\000\002\005\002" +
    "\000\002\006\006\000\002\006\007\000\002\006\007\000" +
    "\002\006\004\000\002\006\010\000\002\006\006\000\002" +
    "\006\006\000\002\006\010\000\002\006\005\000\002\006" +
    "\007\000\002\006\010\000\002\006\006\000\002\006\003" +
    "\000\002\062\003\000\002\062\002\000\002\031\003\000" +
    "\002\031\005\000\002\035\004\000\002\035\005\000\002" +
    "\034\005\000\002\034\007\000\002\032\004\000\002\032" +
    "\005\000\002\033\005\000\002\033\007\000\002\027\003" +
    "\000\002\027\004\000\002\030\003\000\002\030\004\000" +
    "\002\026\003\000\002\026\003\000\002\016\003\000\002" +
    "\020\003\000\002\020\005\000\002\022\004\000\002\022" +
    "\005\000\002\017\003\000\002\017\003\000\002\021\003" +
    "\000\002\021\005\000\002\014\003\000\002\014\005\000" +
    "\002\015\004\000\002\015\005\000\002\007\005\000\002" +
    "\007\004\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\004\000\002\007\006\000\002\007\004" +
    "\000\002\007\007\000\002\007\003\000\002\007\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\010\000\002\010\005\000\002\046\005" +
    "\000\002\046\007\000\002\011\006\000\002\011\006\000" +
    "\002\011\007\000\002\012\005\000\002\012\004\000\002" +
    "\056\003\000\002\055\003\000\002\055\004\000\002\057" +
    "\003\000\002\057\007\000\002\060\010\000\002\060\005" +
    "\000\002\060\003\000\002\061\006\000\002\061\006\000" +
    "\002\061\005\000\002\061\005\000\002\061\004\000\002" +
    "\061\007\000\002\013\004\000\002\013\005\000\002\047" +
    "\007\000\002\047\010\000\002\050\003\000\002\050\005" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\052\005\000\002\052\005\000\002\053\003\000\002" +
    "\054\005\000\002\054\005\000\002\041\006\000\002\041" +
    "\006\000\002\041\006\000\002\041\003\000\002\045\003" +
    "\000\002\045\005\000\002\044\003\000\002\044\005\000" +
    "\002\042\003\000\002\042\005\000\002\043\004\000\002" +
    "\043\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\004\000\002\036\003\000\002\037\003\000\002\037\005" +
    "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\003\000\002\040\005\000\002" +
    "\040\004\000\002\040\005\000\002\040\003\000\002\024" +
    "\003\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\025\005\000\002\025\003\000\002\025\005\000" +
    "\002\025\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016a\000\060\002\ufffe\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\020\ufffe" +
    "\022\ufffe\034\ufffe\040\ufffe\051\ufffe\055\ufffe\057\ufffe\066" +
    "\ufffe\115\ufffe\116\ufffe\117\ufffe\120\ufffe\121\ufffe\001\002" +
    "\000\004\002\u016c\001\002\000\060\002\ufffc\005\007\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\020\ufffc\022\ufffc\034\ufffc\040\ufffc\051\ufffc\055" +
    "\ufffc\057\ufffc\066\ufffc\115\ufffc\116\ufffc\117\ufffc\120\ufffc" +
    "\121\ufffc\001\002\000\056\002\001\006\022\007\045\010" +
    "\027\011\035\012\046\013\044\014\036\015\031\020\030" +
    "\022\032\034\042\040\050\051\047\055\026\057\016\066" +
    "\020\115\033\116\017\117\024\120\010\121\034\001\002" +
    "\000\004\120\010\001\002\000\150\021\uffdc\023\uffdc\025" +
    "\uffdc\026\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc" +
    "\036\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc" +
    "\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067" +
    "\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc" +
    "\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc\104" +
    "\uffdc\105\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc\112\uffdc" +
    "\113\uffdc\114\uffdc\121\uffdc\001\002\000\006\046\013\062" +
    "\014\001\002\000\006\046\uffec\062\uffec\001\002\000\060" +
    "\002\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\015\uffff\020\uffff\022\uffff\034\uffff" +
    "\040\uffff\051\uffff\055\uffff\057\uffff\066\uffff\115\uffff\116" +
    "\uffff\117\uffff\120\uffff\121\uffff\001\002\000\004\120\010" +
    "\001\002\000\006\046\uffeb\062\uffeb\001\002\000\006\116" +
    "\240\120\010\001\002\000\122\021\uffdd\023\uffdd\025\uffdd" +
    "\033\uffdd\035\uffdd\036\uffdd\046\uffdd\050\uffdd\052\uffdd\054" +
    "\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\064\uffdd" +
    "\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073" +
    "\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd" +
    "\102\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd\107\uffdd\110" +
    "\uffdd\111\uffdd\112\uffdd\113\uffdd\114\uffdd\001\002\000\034" +
    "\020\030\022\032\034\042\040\050\051\047\055\026\057" +
    "\016\066\020\115\033\116\017\117\024\120\010\121\034" +
    "\001\002\000\076\035\116\046\uffef\060\065\061\101\062" +
    "\102\064\106\065\070\066\063\067\115\070\100\071\062" +
    "\072\114\073\110\074\077\075\111\076\105\077\107\100" +
    "\072\101\103\102\064\103\113\104\104\105\076\106\075" +
    "\107\112\110\067\111\061\112\066\113\074\114\073\001" +
    "\002\000\004\120\010\001\002\000\004\046\u0162\001\002" +
    "\000\122\021\uffde\023\uffde\025\uffde\033\uffde\035\uffde\036" +
    "\uffde\046\uffde\050\uffde\052\uffde\054\uffde\056\uffde\057\uffde" +
    "\060\uffde\061\uffde\062\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde" +
    "\076\uffde\077\uffde\100\uffde\101\uffde\102\uffde\103\uffde\104" +
    "\uffde\105\uffde\106\uffde\107\uffde\110\uffde\111\uffde\112\uffde" +
    "\113\uffde\114\uffde\001\002\000\120\021\uffa6\023\uffa6\025" +
    "\uffa6\033\uffa6\035\uffa6\036\uffa6\046\uffa6\050\uffa6\052\uffa6" +
    "\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\064\uffa6\065" +
    "\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6" +
    "\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\102" +
    "\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6" +
    "\111\uffa6\112\uffa6\113\uffa6\114\uffa6\001\002\000\036\020" +
    "\030\022\032\034\042\040\050\051\047\055\026\056\u015b" +
    "\057\016\066\020\115\033\116\017\117\024\120\010\121" +
    "\034\001\002\000\004\120\010\001\002\000\034\020\030" +
    "\022\032\034\042\040\050\051\047\055\026\057\016\066" +
    "\020\115\033\116\017\117\024\120\010\121\034\001\002" +
    "\000\004\120\010\001\002\000\014\020\u0124\024\u0120\037" +
    "\u0128\051\056\120\010\001\002\000\120\021\uffa5\023\uffa5" +
    "\025\uffa5\033\uffa5\035\uffa5\036\uffa5\046\uffa5\050\uffa5\052" +
    "\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\064\uffa5" +
    "\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073" +
    "\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5\101\uffa5" +
    "\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\110" +
    "\uffa5\111\uffa5\112\uffa5\113\uffa5\114\uffa5\001\002\000\122" +
    "\021\uffa4\023\uffa4\025\uffa4\033\uffa4\035\uffa4\036\uffa4\044" +
    "\uffd6\046\uffa4\050\uffa4\052\uffa4\056\uffa4\057\uffa4\060\uffa4" +
    "\061\uffa4\062\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070" +
    "\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4" +
    "\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105" +
    "\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4\112\uffa4\113\uffa4" +
    "\114\uffa4\001\002\000\016\041\241\042\242\043\236\051" +
    "\235\116\240\120\010\001\002\000\004\120\010\001\002" +
    "\000\120\021\uffac\023\uffac\025\uffac\033\uffac\035\uffac\036" +
    "\uffac\046\uffac\050\uffac\052\uffac\056\uffac\057\uffac\060\uffac" +
    "\061\uffac\062\uffac\064\uffac\065\uffac\066\uffac\067\uffac\070" +
    "\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac\076\uffac" +
    "\077\uffac\100\uffac\101\uffac\102\uffac\103\uffac\104\uffac\105" +
    "\uffac\106\uffac\107\uffac\110\uffac\111\uffac\112\uffac\113\uffac" +
    "\114\uffac\001\002\000\126\021\uffa8\023\uffa8\025\uffa8\033" +
    "\uffa8\035\uffa8\036\uffa8\044\uffd7\046\uffa8\050\uffa8\051\373" +
    "\052\uffa8\055\374\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8" +
    "\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100" +
    "\uffa8\101\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8" +
    "\107\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\114\uffa8\001" +
    "\002\000\122\021\uffa7\023\uffa7\025\uffa7\033\uffa7\035\uffa7" +
    "\036\uffa7\046\uffa7\050\uffa7\052\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\062\uffa7\063\366\064\uffa7\065\uffa7\066\uffa7" +
    "\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075" +
    "\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7" +
    "\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\112" +
    "\uffa7\113\uffa7\114\uffa7\001\002\000\006\051\056\120\010" +
    "\001\002\000\120\021\uffab\023\uffab\025\uffab\033\uffab\035" +
    "\uffab\036\uffab\046\uffab\050\uffab\052\uffab\056\uffab\057\uffab" +
    "\060\uffab\061\uffab\062\uffab\064\uffab\065\uffab\066\uffab\067" +
    "\uffab\070\uffab\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab" +
    "\076\uffab\077\uffab\100\uffab\101\uffab\102\uffab\103\uffab\104" +
    "\uffab\105\uffab\106\uffab\107\uffab\110\uffab\111\uffab\112\uffab" +
    "\113\uffab\114\uffab\001\002\000\004\120\010\001\002\000" +
    "\006\017\227\120\uffed\001\002\000\004\120\010\001\002" +
    "\000\034\020\030\022\032\034\042\040\050\051\047\055" +
    "\026\057\016\066\020\115\033\116\017\117\024\120\010" +
    "\121\034\001\002\000\004\051\056\001\002\000\004\044" +
    "\052\001\002\000\006\120\010\121\053\001\002\000\132" +
    "\021\uffd6\023\uffd6\025\uffd6\031\uffd6\033\uffd6\035\uffd6\036" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\050\uffd6\052\uffd6\054\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064" +
    "\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6" +
    "\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101" +
    "\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6" +
    "\110\uffd6\111\uffd6\112\uffd6\113\uffd6\114\uffd6\001\002\000" +
    "\122\021\uffa1\023\uffa1\025\uffa1\033\uffa1\035\uffa1\036\uffa1" +
    "\046\uffa1\050\uffa1\052\uffa1\056\uffa1\057\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1" +
    "\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076" +
    "\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1" +
    "\105\uffa1\106\uffa1\107\uffa1\110\uffa1\111\uffa1\112\uffa1\113" +
    "\uffa1\114\uffa1\001\002\000\132\021\uffd7\023\uffd7\025\uffd7" +
    "\031\uffd7\033\uffd7\035\uffd7\036\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\050\uffd7\052\uffd7\054\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067" +
    "\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7" +
    "\076\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103\uffd7\104" +
    "\uffd7\105\uffd7\106\uffd7\107\uffd7\110\uffd7\111\uffd7\112\uffd7" +
    "\113\uffd7\114\uffd7\001\002\000\006\052\152\120\010\001" +
    "\002\000\034\020\030\022\032\034\042\040\050\051\047" +
    "\055\026\057\016\066\020\115\033\116\017\117\024\120" +
    "\010\121\034\001\002\000\076\023\071\035\116\060\065" +
    "\061\101\062\102\064\106\065\070\066\063\067\115\070" +
    "\100\071\062\072\114\073\110\074\077\075\111\076\105" +
    "\077\107\100\072\101\103\102\064\103\113\104\104\105" +
    "\076\106\075\107\112\110\067\111\061\112\066\113\074" +
    "\114\073\001\002\000\034\020\030\022\032\034\042\040" +
    "\050\051\047\055\026\057\016\066\020\115\033\116\017" +
    "\117\024\120\010\121\034\001\002\000\034\020\030\022" +
    "\032\034\042\040\050\051\047\055\026\057\016\066\020" +
    "\115\033\116\017\117\024\120\010\121\034\001\002\000" +
    "\034\020\030\022\032\034\042\040\050\051\047\055\026" +
    "\057\016\066\020\115\033\116\017\117\024\120\010\121" +
    "\034\001\002\000\034\020\030\022\032\034\042\040\050" +
    "\051\047\055\026\057\016\066\020\115\033\116\017\117" +
    "\024\120\010\121\034\001\002\000\034\020\030\022\032" +
    "\034\042\040\050\051\047\055\026\057\016\066\020\115" +
    "\033\116\017\117\024\120\010\121\034\001\002\000\034" +
    "\020\030\022\032\034\042\040\050\051\047\055\026\057" +
    "\016\066\020\115\033\116\017\117\024\120\010\121\034" +
    "\001\002\000\034\020\030\022\032\034\042\040\050\051" +
    "\047\055\026\057\016\066\020\115\033\116\017\117\024" +
    "\120\010\121\034\001\002\000\034\020\030\022\032\034" +
    "\042\040\050\051\047\055\026\057\016\066\020\115\033" +
    "\116\017\117\024\120\010\121\034\001\002\000\120\021" +
    "\uffaf\023\uffaf\025\uffaf\033\uffaf\035\uffaf\036\uffaf\046\uffaf" +
    "\050\uffaf\052\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf" +
    "\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100" +
    "\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf\106\uffaf" +
    "\107\uffaf\110\uffaf\111\uffaf\112\uffaf\113\uffaf\114\uffaf\001" +
    "\002\000\120\021\uffc7\023\uffc7\025\uffc7\033\uffc7\035\uffc7" +
    "\036\uffc7\046\uffc7\050\uffc7\052\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7" +
    "\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076" +
    "\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7" +
    "\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\112\uffc7\113" +
    "\uffc7\114\uffc7\001\002\000\034\020\030\022\032\034\042" +
    "\040\050\051\047\055\026\057\016\066\020\115\033\116" +
    "\017\117\024\120\010\121\034\001\002\000\034\020\030" +
    "\022\032\034\042\040\050\051\047\055\026\057\016\066" +
    "\020\115\033\116\017\117\024\120\010\121\034\001\002" +
    "\000\034\020\030\022\032\034\042\040\050\051\047\055" +
    "\026\057\016\066\020\115\033\116\017\117\024\120\010" +
    "\121\034\001\002\000\034\020\030\022\032\034\042\040" +
    "\050\051\047\055\026\057\016\066\020\115\033\116\017" +
    "\117\024\120\010\121\034\001\002\000\034\020\030\022" +
    "\032\034\042\040\050\051\047\055\026\057\016\066\020" +
    "\115\033\116\017\117\024\120\010\121\034\001\002\000" +
    "\034\020\030\022\032\034\042\040\050\051\047\055\026" +
    "\057\016\066\020\115\033\116\017\117\024\120\010\121" +
    "\034\001\002\000\034\020\030\022\032\034\042\040\050" +
    "\051\047\055\026\057\016\066\020\115\033\116\017\117" +
    "\024\120\010\121\034\001\002\000\034\020\030\022\032" +
    "\034\042\040\050\051\047\055\026\057\016\066\020\115" +
    "\033\116\017\117\024\120\010\121\034\001\002\000\120" +
    "\021\uffc8\023\uffc8\025\uffc8\033\uffc8\035\uffc8\036\uffc8\046" +
    "\uffc8\050\uffc8\052\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071" +
    "\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8" +
    "\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106" +
    "\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8\113\uffc8\114\uffc8" +
    "\001\002\000\034\020\030\022\032\034\042\040\050\051" +
    "\047\055\026\057\016\066\020\115\033\116\017\117\024" +
    "\120\010\121\034\001\002\000\034\020\030\022\032\034" +
    "\042\040\050\051\047\055\026\057\016\066\020\115\033" +
    "\116\017\117\024\120\010\121\034\001\002\000\034\020" +
    "\030\022\032\034\042\040\050\051\047\055\026\057\016" +
    "\066\020\115\033\116\017\117\024\120\010\121\034\001" +
    "\002\000\120\021\uffc9\023\uffc9\025\uffc9\033\uffc9\035\uffc9" +
    "\036\uffc9\046\uffc9\050\uffc9\052\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\061\uffc9\062\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9" +
    "\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076" +
    "\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9" +
    "\105\uffc9\106\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9\113" +
    "\uffc9\114\uffc9\001\002\000\034\020\030\022\032\034\042" +
    "\040\050\051\047\055\026\057\016\066\020\115\033\116" +
    "\017\117\024\120\010\121\034\001\002\000\034\020\030" +
    "\022\032\034\042\040\050\051\047\055\026\057\016\066" +
    "\020\115\033\116\017\117\024\120\010\121\034\001\002" +
    "\000\034\020\030\022\032\034\042\040\050\051\047\055" +
    "\026\057\016\066\020\115\033\116\017\117\024\120\010" +
    "\121\034\001\002\000\034\020\030\022\032\034\042\040" +
    "\050\051\047\055\026\057\016\066\020\115\033\116\017" +
    "\117\024\120\010\121\034\001\002\000\034\020\030\022" +
    "\032\034\042\040\050\051\047\055\026\057\016\066\020" +
    "\115\033\116\017\117\024\120\010\121\034\001\002\000" +
    "\034\020\030\022\032\034\042\040\050\051\047\055\026" +
    "\057\016\066\020\115\033\116\017\117\024\120\010\121" +
    "\034\001\002\000\034\020\030\022\032\034\042\040\050" +
    "\051\047\055\026\057\016\066\020\115\033\116\017\117" +
    "\024\120\010\121\034\001\002\000\120\021\uffcb\023\uffcb" +
    "\025\uffcb\033\uffcb\035\uffcb\036\uffcb\046\uffcb\050\uffcb\052" +
    "\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\064\uffcb" +
    "\065\070\066\uffcb\067\uffcb\070\uffcb\071\062\072\uffcb\073" +
    "\uffcb\074\uffcb\075\uffcb\076\uffcb\077\107\100\072\101\103" +
    "\102\uffcb\103\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110" +
    "\uffcb\111\uffcb\112\uffcb\113\uffcb\114\uffcb\001\002\000\120" +
    "\021\uffc0\023\uffc0\025\uffc0\033\uffc0\035\116\036\uffc0\046" +
    "\uffc0\050\uffc0\052\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\064\uffc0\065\070\066\uffc0\067\uffc0\070\uffc0\071" +
    "\062\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\107" +
    "\100\072\101\103\102\uffc0\103\uffc0\104\uffc0\105\uffc0\106" +
    "\uffc0\107\uffc0\110\uffc0\111\uffc0\112\uffc0\113\uffc0\114\uffc0" +
    "\001\002\000\120\021\uffbf\023\uffbf\025\uffbf\033\uffbf\035" +
    "\116\036\uffbf\046\uffbf\050\uffbf\052\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\064\uffbf\065\070\066\uffbf\067" +
    "\uffbf\070\uffbf\071\062\072\uffbf\073\uffbf\074\uffbf\075\uffbf" +
    "\076\uffbf\077\107\100\072\101\103\102\uffbf\103\uffbf\104" +
    "\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111\uffbf\112\uffbf" +
    "\113\uffbf\114\uffbf\001\002\000\104\021\uffb8\023\uffb8\025" +
    "\uffb8\033\uffb8\035\116\036\uffb8\046\uffb8\050\uffb8\052\uffb8" +
    "\056\uffb8\057\uffb8\060\065\061\101\062\102\064\106\065" +
    "\070\066\063\067\115\070\100\071\062\072\114\073\110" +
    "\074\077\075\111\076\105\077\107\100\072\101\103\104" +
    "\uffb8\111\uffb8\112\uffb8\113\uffb8\114\uffb8\001\002\000\104" +
    "\021\uffba\023\uffba\025\uffba\033\uffba\035\116\036\uffba\046" +
    "\uffba\050\uffba\052\uffba\056\uffba\057\uffba\060\065\061\101" +
    "\062\102\064\106\065\070\066\063\067\115\070\100\071" +
    "\062\072\114\073\110\074\077\075\111\076\105\077\107" +
    "\100\072\101\103\104\uffba\111\uffba\112\uffba\113\uffba\114" +
    "\uffba\001\002\000\120\021\uffbc\023\uffbc\025\uffbc\033\uffbc" +
    "\035\116\036\uffbc\046\uffbc\050\uffbc\052\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\064\uffbc\065\070\066\uffbc" +
    "\067\uffbc\070\uffbc\071\062\072\uffbc\073\uffbc\074\uffbc\075" +
    "\uffbc\076\uffbc\077\107\100\072\101\103\102\uffbc\103\uffbc" +
    "\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112" +
    "\uffbc\113\uffbc\114\uffbc\001\002\000\120\021\uffbb\023\uffbb" +
    "\025\uffbb\033\uffbb\035\116\036\uffbb\046\uffbb\050\uffbb\052" +
    "\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\064\uffbb" +
    "\065\070\066\uffbb\067\uffbb\070\uffbb\071\062\072\uffbb\073" +
    "\uffbb\074\uffbb\075\uffbb\076\uffbb\077\107\100\072\101\103" +
    "\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110" +
    "\uffbb\111\uffbb\112\uffbb\113\uffbb\114\uffbb\001\002\000\120" +
    "\021\uffc4\023\uffc4\025\uffc4\033\uffc4\035\116\036\uffc4\046" +
    "\uffc4\050\uffc4\052\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\062\uffc4\064\uffc4\065\070\066\uffc4\067\uffc4\070\uffc4\071" +
    "\062\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\107" +
    "\100\072\101\103\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106" +
    "\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\113\uffc4\114\uffc4" +
    "\001\002\000\120\021\uffbe\023\uffbe\025\uffbe\033\uffbe\035" +
    "\116\036\uffbe\046\uffbe\050\uffbe\052\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\061\uffbe\062\uffbe\064\uffbe\065\070\066\uffbe\067" +
    "\uffbe\070\uffbe\071\062\072\uffbe\073\uffbe\074\uffbe\075\uffbe" +
    "\076\uffbe\077\107\100\072\101\103\102\uffbe\103\uffbe\104" +
    "\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe" +
    "\113\uffbe\114\uffbe\001\002\000\112\021\uffb3\023\uffb3\025" +
    "\uffb3\033\uffb3\035\116\036\uffb3\046\uffb3\050\uffb3\052\uffb3" +
    "\056\uffb3\057\uffb3\060\065\061\101\062\102\064\106\065" +
    "\070\066\063\067\115\070\100\071\062\072\114\073\110" +
    "\074\077\075\111\076\105\077\107\100\072\101\103\102" +
    "\064\103\113\105\076\106\075\107\112\110\067\111\061" +
    "\112\066\001\002\000\120\021\uffc2\023\uffc2\025\uffc2\033" +
    "\uffc2\035\116\036\uffc2\046\uffc2\050\uffc2\052\uffc2\056\uffc2" +
    "\057\uffc2\060\uffc2\061\uffc2\062\uffc2\064\uffc2\065\070\066" +
    "\uffc2\067\uffc2\070\uffc2\071\062\072\uffc2\073\uffc2\074\uffc2" +
    "\075\uffc2\076\uffc2\077\107\100\072\101\103\102\uffc2\103" +
    "\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2\111\uffc2" +
    "\112\uffc2\113\uffc2\114\uffc2\001\002\000\120\021\uffc6\023" +
    "\uffc6\025\uffc6\033\uffc6\035\116\036\uffc6\046\uffc6\050\uffc6" +
    "\052\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\064" +
    "\uffc6\065\070\066\uffc6\067\uffc6\070\uffc6\071\062\072\uffc6" +
    "\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\107\100\072\101" +
    "\103\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6" +
    "\110\uffc6\111\uffc6\112\uffc6\113\uffc6\114\uffc6\001\002\000" +
    "\120\021\uffc1\023\uffc1\025\uffc1\033\uffc1\035\116\036\uffc1" +
    "\046\uffc1\050\uffc1\052\uffc1\056\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\064\uffc1\065\070\066\uffc1\067\uffc1\070\uffc1" +
    "\071\062\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077" +
    "\107\100\072\101\103\102\uffc1\103\uffc1\104\uffc1\105\uffc1" +
    "\106\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1\114" +
    "\uffc1\001\002\000\120\021\uffbd\023\uffbd\025\uffbd\033\uffbd" +
    "\035\116\036\uffbd\046\uffbd\050\uffbd\052\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\064\uffbd\065\070\066\uffbd" +
    "\067\uffbd\070\uffbd\071\062\072\uffbd\073\uffbd\074\uffbd\075" +
    "\uffbd\076\uffbd\077\107\100\072\101\103\102\uffbd\103\uffbd" +
    "\104\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd\111\uffbd\112" +
    "\uffbd\113\uffbd\114\uffbd\001\002\000\104\021\uffb7\023\uffb7" +
    "\025\uffb7\033\uffb7\035\116\036\uffb7\046\uffb7\050\uffb7\052" +
    "\uffb7\056\uffb7\057\uffb7\060\065\061\101\062\102\064\106" +
    "\065\070\066\063\067\115\070\100\071\062\072\114\073" +
    "\110\074\077\075\111\076\105\077\107\100\072\101\103" +
    "\104\uffb7\111\uffb7\112\uffb7\113\uffb7\114\uffb7\001\002\000" +
    "\104\021\uffb6\023\uffb6\025\uffb6\033\uffb6\035\116\036\uffb6" +
    "\046\uffb6\050\uffb6\052\uffb6\056\uffb6\057\uffb6\060\065\061" +
    "\101\062\102\064\106\065\070\066\063\067\115\070\100" +
    "\071\062\072\114\073\110\074\077\075\111\076\105\077" +
    "\107\100\072\101\103\104\uffb6\111\uffb6\112\uffb6\113\uffb6" +
    "\114\uffb6\001\002\000\112\021\uffb4\023\uffb4\025\uffb4\033" +
    "\uffb4\035\116\036\uffb4\046\uffb4\050\uffb4\052\uffb4\056\uffb4" +
    "\057\uffb4\060\065\061\101\062\102\064\106\065\070\066" +
    "\063\067\115\070\100\071\062\072\114\073\110\074\077" +
    "\075\111\076\105\077\107\100\072\101\103\102\064\103" +
    "\113\105\076\106\075\107\112\110\067\111\061\112\066" +
    "\001\002\000\112\021\uffb5\023\uffb5\025\uffb5\033\uffb5\035" +
    "\116\036\uffb5\046\uffb5\050\uffb5\052\uffb5\056\uffb5\057\uffb5" +
    "\060\065\061\101\062\102\064\106\065\070\066\063\067" +
    "\115\070\100\071\062\072\114\073\110\074\077\075\111" +
    "\076\105\077\107\100\072\101\103\102\064\103\113\105" +
    "\076\106\075\107\112\110\067\111\061\112\066\001\002" +
    "\000\120\021\uffcc\023\uffcc\025\uffcc\033\uffcc\035\uffcc\036" +
    "\uffcc\046\uffcc\050\uffcc\052\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070" +
    "\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc" +
    "\077\107\100\072\101\103\102\uffcc\103\uffcc\104\uffcc\105" +
    "\uffcc\106\uffcc\107\uffcc\110\uffcc\111\uffcc\112\uffcc\113\uffcc" +
    "\114\uffcc\001\002\000\104\021\uffb9\023\uffb9\025\uffb9\033" +
    "\uffb9\035\116\036\uffb9\046\uffb9\050\uffb9\052\uffb9\056\uffb9" +
    "\057\uffb9\060\065\061\101\062\102\064\106\065\070\066" +
    "\063\067\115\070\100\071\062\072\114\073\110\074\077" +
    "\075\111\076\105\077\107\100\072\101\103\104\uffb9\111" +
    "\uffb9\112\uffb9\113\uffb9\114\uffb9\001\002\000\120\021\uffb1" +
    "\023\uffb1\025\uffb1\033\uffb1\035\116\036\uffb1\046\uffb1\050" +
    "\uffb1\052\uffb1\056\uffb1\057\uffb1\060\065\061\101\062\102" +
    "\064\106\065\070\066\063\067\115\070\100\071\062\072" +
    "\114\073\110\074\077\075\111\076\105\077\107\100\072" +
    "\101\103\102\064\103\113\104\uffb1\105\076\106\075\107" +
    "\112\110\067\111\uffb1\112\uffb1\113\uffb1\114\uffb1\001\002" +
    "\000\120\021\uffc5\023\uffc5\025\uffc5\033\uffc5\035\116\036" +
    "\uffc5\046\uffc5\050\uffc5\052\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\061\101\062\102\064\106\065\070\066\uffc5\067\115\070" +
    "\100\071\062\072\114\073\110\074\077\075\111\076\105" +
    "\077\107\100\072\101\103\102\uffc5\103\uffc5\104\uffc5\105" +
    "\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5" +
    "\114\uffc5\001\002\000\104\021\uffca\023\uffca\025\uffca\033" +
    "\uffca\035\116\036\uffca\046\uffca\050\uffca\052\uffca\056\uffca" +
    "\057\uffca\060\065\061\101\062\102\064\106\065\070\066" +
    "\063\067\115\070\100\071\062\072\114\073\110\074\077" +
    "\075\111\076\105\077\107\100\072\101\103\104\uffca\111" +
    "\uffca\112\uffca\113\uffca\114\uffca\001\002\000\120\021\uffcd" +
    "\023\uffcd\025\uffcd\033\uffcd\035\116\036\uffcd\046\uffcd\050" +
    "\uffcd\052\uffcd\056\uffcd\057\uffcd\060\uffcd\061\101\062\102" +
    "\064\106\065\070\066\uffcd\067\115\070\100\071\062\072" +
    "\114\073\110\074\077\075\111\076\105\077\107\100\072" +
    "\101\103\102\uffcd\103\uffcd\104\uffcd\105\uffcd\106\uffcd\107" +
    "\uffcd\110\uffcd\111\uffcd\112\uffcd\113\uffcd\114\uffcd\001\002" +
    "\000\120\021\uffc3\023\uffc3\025\uffc3\033\uffc3\035\uffc3\036" +
    "\uffc3\046\uffc3\050\uffc3\052\uffc3\056\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\062\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070" +
    "\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3" +
    "\077\107\100\072\101\103\102\uffc3\103\uffc3\104\uffc3\105" +
    "\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3" +
    "\114\uffc3\001\002\000\120\021\uffb2\023\uffb2\025\uffb2\033" +
    "\uffb2\035\116\036\uffb2\046\uffb2\050\uffb2\052\uffb2\056\uffb2" +
    "\057\uffb2\060\065\061\101\062\102\064\106\065\070\066" +
    "\063\067\115\070\100\071\062\072\114\073\110\074\077" +
    "\075\111\076\105\077\107\100\072\101\103\102\064\103" +
    "\113\104\uffb2\105\076\106\075\107\112\110\067\111\uffb2" +
    "\112\uffb2\113\uffb2\114\uffb2\001\002\000\006\050\154\052" +
    "\155\001\002\000\042\020\uffd9\022\uffd9\026\uffd9\032\uffd9" +
    "\034\uffd9\040\uffd9\051\uffd9\055\uffd9\057\uffd9\066\uffd9\102" +
    "\uffd9\115\uffd9\116\uffd9\117\uffd9\120\uffd9\121\uffd9\001\002" +
    "\000\012\045\uffdb\047\uffdb\050\uffdb\052\uffdb\001\002\000" +
    "\004\120\010\001\002\000\042\020\uffd8\022\uffd8\026\uffd8" +
    "\032\uffd8\034\uffd8\040\uffd8\051\uffd8\055\uffd8\057\uffd8\066" +
    "\uffd8\102\uffd8\115\uffd8\116\uffd8\117\uffd8\120\uffd8\121\uffd8" +
    "\001\002\000\012\045\uffda\047\uffda\050\uffda\052\uffda\001" +
    "\002\000\076\035\116\052\160\060\065\061\101\062\102" +
    "\064\106\065\070\066\063\067\115\070\100\071\062\072" +
    "\114\073\110\074\077\075\111\076\105\077\107\100\072" +
    "\101\103\102\064\103\113\104\104\105\076\106\075\107" +
    "\112\110\067\111\061\112\066\113\074\114\073\001\002" +
    "\000\120\021\uffcf\023\uffcf\025\uffcf\033\uffcf\035\uffcf\036" +
    "\uffcf\046\uffcf\050\uffcf\052\uffcf\056\uffcf\057\uffcf\060\uffcf" +
    "\061\uffcf\062\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070" +
    "\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf" +
    "\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\105" +
    "\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf\112\uffcf\113\uffcf" +
    "\114\uffcf\001\002\000\006\030\163\121\162\001\002\000" +
    "\006\046\ufff3\102\223\001\002\000\004\120\010\001\002" +
    "\000\004\102\165\001\002\000\004\053\166\001\002\000" +
    "\010\054\172\120\010\121\053\001\002\000\004\046\ufff4" +
    "\001\002\000\006\050\216\054\217\001\002\000\004\045" +
    "\173\001\002\000\004\046\uffe6\001\002\000\012\051\175" +
    "\116\017\117\024\120\010\001\002\000\020\046\uff5c\050" +
    "\uff5c\052\uff5c\054\uff5c\061\uff5c\062\uff5c\065\uff5c\001\002" +
    "\000\012\051\175\116\017\117\024\120\010\001\002\000" +
    "\014\050\uffe4\054\uffe4\061\203\062\204\065\205\001\002" +
    "\000\016\046\uff63\050\uff63\054\uff63\061\uff63\062\uff63\065" +
    "\uff63\001\002\000\022\045\201\046\uff5e\050\uff5e\052\uff5e" +
    "\054\uff5e\061\uff5e\062\uff5e\065\uff5e\001\002\000\004\120" +
    "\010\001\002\000\020\046\uff5d\050\uff5d\052\uff5d\054\uff5d" +
    "\061\uff5d\062\uff5d\065\uff5d\001\002\000\012\051\175\116" +
    "\017\117\024\120\010\001\002\000\012\051\175\116\017" +
    "\117\024\120\010\001\002\000\006\066\207\116\210\001" +
    "\002\000\016\046\uff60\050\uff60\054\uff60\061\uff60\062\uff60" +
    "\065\uff60\001\002\000\004\116\211\001\002\000\030\035" +
    "\uffe0\046\uffe0\050\uffe0\052\uffe0\054\uffe0\057\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\065\uffe0\102\uffe0\001\002\000\030\035" +
    "\uffdf\046\uffdf\050\uffdf\052\uffdf\054\uffdf\057\uffdf\061\uffdf" +
    "\062\uffdf\063\uffdf\065\uffdf\102\uffdf\001\002\000\016\046" +
    "\uff61\050\uff61\054\uff61\061\uff61\062\uff61\065\205\001\002" +
    "\000\016\046\uff62\050\uff62\054\uff62\061\uff62\062\uff62\065" +
    "\205\001\002\000\004\052\215\001\002\000\020\046\uff5f" +
    "\050\uff5f\052\uff5f\054\uff5f\061\uff5f\062\uff5f\065\uff5f\001" +
    "\002\000\006\120\010\121\053\001\002\000\004\046\uffe5" +
    "\001\002\000\004\045\221\001\002\000\012\051\175\116" +
    "\017\117\024\120\010\001\002\000\014\050\uffe3\054\uffe3" +
    "\061\203\062\204\065\205\001\002\000\012\051\175\116" +
    "\017\117\024\120\010\001\002\000\004\046\ufff2\001\002" +
    "\000\012\046\uff5b\061\203\062\204\065\205\001\002\000" +
    "\004\120\010\001\002\000\004\120\uffee\001\002\000\006" +
    "\047\231\050\154\001\002\000\016\041\241\042\242\043" +
    "\236\051\235\116\240\120\010\001\002\000\034\030\254" +
    "\031\313\035\uff68\045\255\046\uff68\050\uff68\051\235\052" +
    "\uff68\061\uff68\062\uff68\063\uff68\065\uff68\102\uff68\001\002" +
    "\000\012\046\uff6f\050\uff6f\052\uff6f\102\uff6f\001\002\000" +
    "\004\046\ufff9\001\002\000\012\051\235\052\307\116\240" +
    "\120\010\001\002\000\004\120\010\001\002\000\006\046" +
    "\uff7b\102\uff7b\001\002\000\026\035\uff64\046\uff64\050\uff64" +
    "\052\uff64\057\uff64\061\uff64\062\uff64\063\uff64\065\uff64\102" +
    "\uff64\001\002\000\004\120\010\001\002\000\004\120\010" +
    "\001\002\000\004\031\264\001\002\000\026\035\251\046" +
    "\uff6e\050\uff6e\052\uff6e\057\uff6e\061\246\062\247\063\245" +
    "\065\250\102\uff6e\001\002\000\006\116\240\120\010\001" +
    "\002\000\006\116\240\120\010\001\002\000\006\116\240" +
    "\120\010\001\002\000\006\066\207\116\210\001\002\000" +
    "\006\116\240\120\010\001\002\000\024\046\uff6d\050\uff6d" +
    "\052\uff6d\057\uff6d\061\246\062\247\063\245\065\250\102" +
    "\uff6d\001\002\000\032\030\254\035\uff68\045\255\046\uff68" +
    "\050\uff68\052\uff68\057\uff68\061\uff68\062\uff68\063\uff68\065" +
    "\uff68\102\uff68\001\002\000\030\035\uff66\046\uff66\050\uff66" +
    "\052\uff66\057\uff66\061\uff66\062\uff66\063\uff66\065\uff66\102" +
    "\uff66\120\010\001\002\000\004\120\010\001\002\000\026" +
    "\035\uff67\046\uff67\050\uff67\052\uff67\057\uff67\061\uff67\062" +
    "\uff67\063\uff67\065\uff67\102\uff67\001\002\000\026\035\uff65" +
    "\046\uff65\050\uff65\052\uff65\057\uff65\061\uff65\062\uff65\063" +
    "\uff65\065\uff65\102\uff65\001\002\000\026\035\uff6a\046\uff6a" +
    "\050\uff6a\052\uff6a\057\uff6a\061\uff6a\062\uff6a\063\uff6a\065" +
    "\uff6a\102\uff6a\001\002\000\026\035\uff6b\046\uff6b\050\uff6b" +
    "\052\uff6b\057\uff6b\061\uff6b\062\uff6b\063\uff6b\065\250\102" +
    "\uff6b\001\002\000\026\035\uff6c\046\uff6c\050\uff6c\052\uff6c" +
    "\057\uff6c\061\uff6c\062\uff6c\063\uff6c\065\250\102\uff6c\001" +
    "\002\000\026\035\uff69\046\uff69\050\uff69\052\uff69\057\uff69" +
    "\061\246\062\247\063\uff69\065\250\102\uff69\001\002\000" +
    "\010\051\235\116\240\120\010\001\002\000\012\046\uff72" +
    "\050\uff72\052\uff72\102\uff72\001\002\000\006\045\uff7a\050" +
    "\uff7a\001\002\000\006\045\274\050\273\001\002\000\010" +
    "\030\271\045\uff78\050\uff78\001\002\000\004\120\010\001" +
    "\002\000\006\045\uff77\050\uff77\001\002\000\004\120\010" +
    "\001\002\000\016\041\241\042\242\043\236\051\235\116" +
    "\240\120\010\001\002\000\006\046\uff7c\102\uff7c\001\002" +
    "\000\006\045\uff79\050\uff79\001\002\000\006\045\300\050" +
    "\154\001\002\000\016\041\241\042\242\043\236\051\235" +
    "\116\240\120\010\001\002\000\006\046\uff7e\102\uff7e\001" +
    "\002\000\006\045\303\050\154\001\002\000\016\041\241" +
    "\042\242\043\236\051\235\116\240\120\010\001\002\000" +
    "\006\046\uff7d\102\uff7d\001\002\000\006\050\310\052\311" +
    "\001\002\000\006\050\uff76\052\uff76\001\002\000\014\031" +
    "\uff74\046\uff74\050\uff74\052\uff74\102\uff74\001\002\000\010" +
    "\051\235\116\240\120\010\001\002\000\014\031\uff73\046" +
    "\uff73\050\uff73\052\uff73\102\uff73\001\002\000\006\050\uff75" +
    "\052\uff75\001\002\000\010\051\235\116\240\120\010\001" +
    "\002\000\012\046\uff70\050\uff70\052\uff70\102\uff70\001\002" +
    "\000\012\046\uff71\050\uff71\052\uff71\102\uff71\001\002\000" +
    "\004\047\317\001\002\000\010\051\235\116\240\120\010" +
    "\001\002\000\004\102\321\001\002\000\004\053\322\001" +
    "\002\000\010\054\326\120\010\121\053\001\002\000\004" +
    "\046\ufff1\001\002\000\006\050\337\054\340\001\002\000" +
    "\010\031\uffd5\050\uffd5\054\uffd5\001\002\000\004\046\uffea" +
    "\001\002\000\006\031\330\050\331\001\002\000\010\066" +
    "\335\116\017\117\024\001\002\000\006\120\010\121\053" +
    "\001\002\000\010\031\uffd4\050\uffd4\054\uffd4\001\002\000" +
    "\006\050\uffe2\054\uffe2\001\002\000\006\050\uffe8\054\uffe8" +
    "\001\002\000\006\116\017\117\024\001\002\000\006\050" +
    "\uffe1\054\uffe1\001\002\000\006\120\010\121\053\001\002" +
    "\000\004\046\uffe9\001\002\000\006\031\342\050\331\001" +
    "\002\000\010\066\335\116\017\117\024\001\002\000\006" +
    "\050\uffe7\054\uffe7\001\002\000\120\021\uffae\023\uffae\025" +
    "\uffae\033\uffae\035\uffae\036\uffae\046\uffae\050\uffae\052\uffae" +
    "\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae\064\uffae\065" +
    "\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae" +
    "\074\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102" +
    "\uffae\103\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae" +
    "\111\uffae\112\uffae\113\uffae\114\uffae\001\002\000\004\102" +
    "\363\001\002\000\006\051\056\102\347\001\002\000\034" +
    "\020\030\022\032\034\042\040\050\051\047\055\026\057" +
    "\016\066\020\115\033\116\017\117\024\120\010\121\034" +
    "\001\002\000\004\102\351\001\002\000\034\020\030\022" +
    "\032\034\042\040\050\051\047\055\026\057\016\066\020" +
    "\115\033\116\017\117\024\120\010\121\034\001\002\000" +
    "\100\033\353\035\116\050\354\060\065\061\101\062\102" +
    "\064\106\065\070\066\063\067\115\070\100\071\062\072" +
    "\114\073\110\074\077\075\111\076\105\077\107\100\072" +
    "\101\103\102\064\103\113\104\104\105\076\106\075\107" +
    "\112\110\067\111\061\112\066\113\074\114\073\001\002" +
    "\000\034\020\030\022\032\034\042\040\050\051\047\055" +
    "\026\057\016\066\020\115\033\116\017\117\024\120\010" +
    "\121\034\001\002\000\006\051\056\120\010\001\002\000" +
    "\120\021\uff9d\023\uff9d\025\uff9d\033\uff9d\035\uff9d\036\uff9d" +
    "\046\uff9d\050\uff9d\052\uff9d\056\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077" +
    "\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d" +
    "\106\uff9d\107\uff9d\110\uff9d\111\uff9d\112\uff9d\113\uff9d\114" +
    "\uff9d\001\002\000\120\021\uff9b\023\uff9b\025\uff9b\033\uff9b" +
    "\035\uff9b\036\uff9b\046\uff9b\050\uff9b\052\uff9b\056\uff9b\057" +
    "\uff9b\060\uff9b\061\uff9b\062\uff9b\064\uff9b\065\uff9b\066\uff9b" +
    "\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075" +
    "\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b" +
    "\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\111\uff9b\112" +
    "\uff9b\113\uff9b\114\uff9b\001\002\000\076\023\360\035\116" +
    "\060\065\061\101\062\102\064\106\065\070\066\063\067" +
    "\115\070\100\071\062\072\114\073\110\074\077\075\111" +
    "\076\105\077\107\100\072\101\103\102\064\103\113\104" +
    "\104\105\076\106\075\107\112\110\067\111\061\112\066" +
    "\113\074\114\073\001\002\000\120\021\uff9c\023\uff9c\025" +
    "\uff9c\033\uff9c\035\uff9c\036\uff9c\046\uff9c\050\uff9c\052\uff9c" +
    "\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\064\uff9c\065" +
    "\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c" +
    "\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\102" +
    "\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c\110\uff9c" +
    "\111\uff9c\112\uff9c\113\uff9c\114\uff9c\001\002\000\100\033" +
    "\353\035\116\050\354\060\065\061\101\062\102\064\106" +
    "\065\070\066\063\067\115\070\100\071\062\072\114\073" +
    "\110\074\077\075\111\076\105\077\107\100\072\101\103" +
    "\102\064\103\113\104\104\105\076\106\075\107\112\110" +
    "\067\111\061\112\066\113\074\114\073\001\002\000\120" +
    "\021\uff9f\023\uff9f\025\uff9f\033\uff9f\035\uff9f\036\uff9f\046" +
    "\uff9f\050\uff9f\052\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071" +
    "\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f" +
    "\100\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106" +
    "\uff9f\107\uff9f\110\uff9f\111\uff9f\112\uff9f\113\uff9f\114\uff9f" +
    "\001\002\000\034\020\030\022\032\034\042\040\050\051" +
    "\047\055\026\057\016\066\020\115\033\116\017\117\024" +
    "\120\010\121\034\001\002\000\100\033\353\035\116\050" +
    "\354\060\065\061\101\062\102\064\106\065\070\066\063" +
    "\067\115\070\100\071\062\072\114\073\110\074\077\075" +
    "\111\076\105\077\107\100\072\101\103\102\064\103\113" +
    "\104\104\105\076\106\075\107\112\110\067\111\061\112" +
    "\066\113\074\114\073\001\002\000\120\021\uff9e\023\uff9e" +
    "\025\uff9e\033\uff9e\035\uff9e\036\uff9e\046\uff9e\050\uff9e\052" +
    "\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\064\uff9e" +
    "\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073" +
    "\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e\101\uff9e" +
    "\102\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\110" +
    "\uff9e\111\uff9e\112\uff9e\113\uff9e\114\uff9e\001\002\000\006" +
    "\120\010\121\053\001\002\000\004\044\370\001\002\000" +
    "\006\120\010\121\053\001\002\000\122\021\uffa0\023\uffa0" +
    "\025\uffa0\033\uffa0\035\uffa0\036\uffa0\046\uffa0\050\uffa0\052" +
    "\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0" +
    "\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072" +
    "\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0" +
    "\101\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107" +
    "\uffa0\110\uffa0\111\uffa0\112\uffa0\113\uffa0\114\uffa0\001\002" +
    "\000\120\021\uffb0\023\uffb0\025\uffb0\033\uffb0\035\uffb0\036" +
    "\uffb0\046\uffb0\050\uffb0\052\uffb0\056\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0" +
    "\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105" +
    "\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0" +
    "\114\uffb0\001\002\000\036\020\030\022\032\034\042\040" +
    "\050\051\047\052\u0116\055\026\057\016\066\020\115\033" +
    "\116\017\117\024\120\010\121\034\001\002\000\034\020" +
    "\030\022\032\034\042\040\050\051\047\055\026\057\016" +
    "\066\020\115\033\116\017\117\024\120\010\121\034\001" +
    "\002\000\076\035\116\057\376\060\065\061\101\062\102" +
    "\064\106\065\070\066\063\067\115\070\100\071\062\072" +
    "\114\073\110\074\077\075\111\076\105\077\107\100\072" +
    "\101\103\102\064\103\113\104\104\105\076\106\075\107" +
    "\112\110\067\111\061\112\066\113\074\114\073\001\002" +
    "\000\034\020\030\022\032\034\042\040\050\051\u0107\055" +
    "\026\057\016\066\020\115\033\116\017\117\024\120\010" +
    "\121\034\001\002\000\006\050\uff86\056\uff86\001\002\000" +
    "\100\035\116\050\uff81\056\uff81\060\065\061\101\062\102" +
    "\064\106\065\070\066\063\067\115\070\100\071\062\072" +
    "\114\073\110\074\077\075\111\076\105\077\107\100\072" +
    "\101\103\102\064\103\113\104\104\105\076\106\075\107" +
    "\112\110\067\111\061\112\066\113\074\114\073\001\002" +
    "\000\006\026\u0111\032\u0110\001\002\000\006\050\uff85\056" +
    "\uff85\001\002\000\112\026\u010d\032\u010c\035\uffa8\044\uffd7" +
    "\050\uffa8\051\373\055\374\056\uffa8\060\uffa8\061\uffa8\062" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8" +
    "\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100" +
    "\uffa8\101\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8" +
    "\107\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\114\uffa8\001" +
    "\002\000\006\050\u010a\056\u0109\001\002\000\006\050\uff88" +
    "\056\uff88\001\002\000\006\050\uff84\056\uff84\001\002\000" +
    "\036\020\030\022\032\034\042\040\050\051\047\052\152" +
    "\055\026\057\016\066\020\115\033\116\017\117\024\120" +
    "\010\121\034\001\002\000\106\035\uffa8\044\uffd7\050\uffdb" +
    "\051\373\052\uffdb\055\374\060\uffa8\061\uffa8\062\uffa8\064" +
    "\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8" +
    "\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101" +
    "\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8" +
    "\110\uffa8\111\uffa8\112\uffa8\113\uffa8\114\uffa8\001\002\000" +
    "\120\021\uff89\023\uff89\025\uff89\033\uff89\035\uff89\036\uff89" +
    "\046\uff89\050\uff89\052\uff89\056\uff89\057\uff89\060\uff89\061" +
    "\uff89\062\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89" +
    "\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077" +
    "\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105\uff89" +
    "\106\uff89\107\uff89\110\uff89\111\uff89\112\uff89\113\uff89\114" +
    "\uff89\001\002\000\034\020\030\022\032\034\042\040\050" +
    "\051\u0107\055\026\057\016\066\020\115\033\116\017\117" +
    "\024\120\010\121\034\001\002\000\006\050\uff87\056\uff87" +
    "\001\002\000\034\020\030\022\032\034\042\040\050\051" +
    "\047\055\026\057\016\066\020\115\033\116\017\117\024" +
    "\120\010\121\034\001\002\000\034\020\030\022\032\034" +
    "\042\040\050\051\047\055\026\057\016\066\020\115\033" +
    "\116\017\117\024\120\010\121\034\001\002\000\100\035" +
    "\116\050\uff80\056\uff80\060\065\061\101\062\102\064\106" +
    "\065\070\066\063\067\115\070\100\071\062\072\114\073" +
    "\110\074\077\075\111\076\105\077\107\100\072\101\103" +
    "\102\064\103\113\104\104\105\076\106\075\107\112\110" +
    "\067\111\061\112\066\113\074\114\073\001\002\000\100" +
    "\035\116\050\uff83\056\uff83\060\065\061\101\062\102\064" +
    "\106\065\070\066\063\067\115\070\100\071\062\072\114" +
    "\073\110\074\077\075\111\076\105\077\107\100\072\101" +
    "\103\102\064\103\113\104\104\105\076\106\075\107\112" +
    "\110\067\111\061\112\066\113\074\114\073\001\002\000" +
    "\034\020\030\022\032\034\042\040\050\051\047\055\026" +
    "\057\016\066\020\115\033\116\017\117\024\120\010\121" +
    "\034\001\002\000\034\020\030\022\032\034\042\040\050" +
    "\051\047\055\026\057\016\066\020\115\033\116\017\117" +
    "\024\120\010\121\034\001\002\000\100\035\116\050\uff7f" +
    "\056\uff7f\060\065\061\101\062\102\064\106\065\070\066" +
    "\063\067\115\070\100\071\062\072\114\073\110\074\077" +
    "\075\111\076\105\077\107\100\072\101\103\102\064\103" +
    "\113\104\104\105\076\106\075\107\112\110\067\111\061" +
    "\112\066\113\074\114\073\001\002\000\100\035\116\050" +
    "\uff82\056\uff82\060\065\061\101\062\102\064\106\065\070" +
    "\066\063\067\115\070\100\071\062\072\114\073\110\074" +
    "\077\075\111\076\105\077\107\100\072\101\103\102\064" +
    "\103\113\104\104\105\076\106\075\107\112\110\067\111" +
    "\061\112\066\113\074\114\073\001\002\000\100\035\116" +
    "\050\uffd3\052\uffd3\060\065\061\101\062\102\064\106\065" +
    "\070\066\063\067\115\070\100\071\062\072\114\073\110" +
    "\074\077\075\111\076\105\077\107\100\072\101\103\102" +
    "\064\103\113\104\104\105\076\106\075\107\112\110\067" +
    "\111\061\112\066\113\074\114\073\001\002\000\006\050" +
    "\u0117\052\u0118\001\002\000\120\021\uffd1\023\uffd1\025\uffd1" +
    "\033\uffd1\035\uffd1\036\uffd1\046\uffd1\050\uffd1\052\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\064\uffd1\065\uffd1" +
    "\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074" +
    "\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1" +
    "\103\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1\110\uffd1\111" +
    "\uffd1\112\uffd1\113\uffd1\114\uffd1\001\002\000\034\020\030" +
    "\022\032\034\042\040\050\051\047\055\026\057\016\066" +
    "\020\115\033\116\017\117\024\120\010\121\034\001\002" +
    "\000\120\021\uffd0\023\uffd0\025\uffd0\033\uffd0\035\uffd0\036" +
    "\uffd0\046\uffd0\050\uffd0\052\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\061\uffd0\062\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070" +
    "\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0" +
    "\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105" +
    "\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0\112\uffd0\113\uffd0" +
    "\114\uffd0\001\002\000\102\035\116\050\uffd2\052\uffd2\056" +
    "\uffd2\060\065\061\101\062\102\064\106\065\070\066\063" +
    "\067\115\070\100\071\062\072\114\073\110\074\077\075" +
    "\111\076\105\077\107\100\072\101\103\102\064\103\113" +
    "\104\104\105\076\106\075\107\112\110\067\111\061\112" +
    "\066\113\074\114\073\001\002\000\004\102\u011b\001\002" +
    "\000\012\051\175\116\017\117\024\120\010\001\002\000" +
    "\012\046\ufff5\061\203\062\204\065\205\001\002\000\004" +
    "\102\u011e\001\002\000\010\051\235\116\240\120\010\001" +
    "\002\000\004\046\ufff6\001\002\000\034\020\030\022\032" +
    "\034\042\040\050\051\047\055\026\057\016\066\020\115" +
    "\033\116\017\117\024\120\010\121\034\001\002\000\006" +
    "\026\u013f\051\373\001\002\000\004\026\u013b\001\002\000" +
    "\004\023\u013a\001\002\000\034\020\030\022\032\034\042" +
    "\040\050\051\047\055\026\057\016\066\020\115\033\116" +
    "\017\117\024\120\010\121\034\001\002\000\020\020\u0124" +
    "\021\uff9a\023\uff9a\024\u0120\037\u0128\051\056\120\010\001" +
    "\002\000\020\020\uff99\021\uff99\023\uff99\024\uff99\037\uff99" +
    "\051\uff99\120\uff99\001\002\000\020\020\uff97\021\uff97\023" +
    "\uff97\024\uff97\037\uff97\051\uff97\120\uff97\001\002\000\036" +
    "\020\030\022\032\034\042\040\050\046\u0129\051\047\055" +
    "\026\057\016\066\020\115\033\116\017\117\024\120\010" +
    "\121\034\001\002\000\020\020\uff8e\021\uff8e\023\uff8e\024" +
    "\uff8e\037\uff8e\051\uff8e\120\uff8e\001\002\000\076\035\116" +
    "\046\u012b\060\065\061\101\062\102\064\106\065\070\066" +
    "\063\067\115\070\100\071\062\072\114\073\110\074\077" +
    "\075\111\076\105\077\107\100\072\101\103\102\064\103" +
    "\113\104\104\105\076\106\075\107\112\110\067\111\061" +
    "\112\066\113\074\114\073\001\002\000\020\020\uff8f\021" +
    "\uff8f\023\uff8f\024\uff8f\037\uff8f\051\uff8f\120\uff8f\001\002" +
    "\000\020\020\uff98\021\uff98\023\uff98\024\uff98\037\uff98\051" +
    "\uff98\120\uff98\001\002\000\076\035\116\036\u012e\060\065" +
    "\061\101\062\102\064\106\065\070\066\063\067\115\070" +
    "\100\071\062\072\114\073\110\074\077\075\111\076\105" +
    "\077\107\100\072\101\103\102\064\103\113\104\104\105" +
    "\076\106\075\107\112\110\067\111\061\112\066\113\074" +
    "\114\073\001\002\000\014\020\u0124\024\u0120\037\u0128\051" +
    "\056\120\010\001\002\000\006\021\u0130\023\u0132\001\002" +
    "\000\014\020\u0134\024\u0120\037\u0128\051\056\120\010\001" +
    "\002\000\020\020\uff96\021\uff96\023\uff96\024\uff96\037\uff96" +
    "\051\uff96\120\uff96\001\002\000\020\020\uff93\021\uff93\023" +
    "\uff93\024\uff93\037\uff93\051\uff93\120\uff93\001\002\000\004" +
    "\023\u0139\001\002\000\034\020\030\022\032\034\042\040" +
    "\050\051\047\055\026\057\016\066\020\115\033\116\017" +
    "\117\024\120\010\121\034\001\002\000\076\035\116\036" +
    "\u0136\060\065\061\101\062\102\064\106\065\070\066\063" +
    "\067\115\070\100\071\062\072\114\073\110\074\077\075" +
    "\111\076\105\077\107\100\072\101\103\102\064\103\113" +
    "\104\104\105\076\106\075\107\112\110\067\111\061\112" +
    "\066\113\074\114\073\001\002\000\014\020\u0124\024\u0120" +
    "\037\u0128\051\056\120\010\001\002\000\006\021\u0130\023" +
    "\u0132\001\002\000\020\020\uff95\021\uff95\023\uff95\024\uff95" +
    "\037\uff95\051\uff95\120\uff95\001\002\000\020\020\uff94\021" +
    "\uff94\023\uff94\024\uff94\037\uff94\051\uff94\120\uff94\001\002" +
    "\000\120\021\uffa9\023\uffa9\025\uffa9\033\uffa9\035\uffa9\036" +
    "\uffa9\046\uffa9\050\uffa9\052\uffa9\056\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070" +
    "\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9" +
    "\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9\104\uffa9\105" +
    "\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\112\uffa9\113\uffa9" +
    "\114\uffa9\001\002\000\034\020\030\022\032\034\042\040" +
    "\050\051\047\055\026\057\016\066\020\115\033\116\017" +
    "\117\024\120\010\121\034\001\002\000\076\035\116\046" +
    "\u013d\060\065\061\101\062\102\064\106\065\070\066\063" +
    "\067\115\070\100\071\062\072\114\073\110\074\077\075" +
    "\111\076\105\077\107\100\072\101\103\102\064\103\113" +
    "\104\104\105\076\106\075\107\112\110\067\111\061\112" +
    "\066\113\074\114\073\001\002\000\020\020\uff91\021\uff91" +
    "\023\uff91\024\uff91\037\uff91\051\uff91\120\uff91\001\002\000" +
    "\004\046\u0142\001\002\000\034\020\030\022\032\034\042" +
    "\040\050\051\047\055\026\057\016\066\020\115\033\116" +
    "\017\117\024\120\010\121\034\001\002\000\076\035\116" +
    "\046\u0141\060\065\061\101\062\102\064\106\065\070\066" +
    "\063\067\115\070\100\071\062\072\114\073\110\074\077" +
    "\075\111\076\105\077\107\100\072\101\103\102\064\103" +
    "\113\104\104\105\076\106\075\107\112\110\067\111\061" +
    "\112\066\113\074\114\073\001\002\000\020\020\uff92\021" +
    "\uff92\023\uff92\024\uff92\037\uff92\051\uff92\120\uff92\001\002" +
    "\000\020\020\uff90\021\uff90\023\uff90\024\uff90\037\uff90\051" +
    "\uff90\120\uff90\001\002\000\076\025\u0144\035\116\060\065" +
    "\061\101\062\102\064\106\065\070\066\063\067\115\070" +
    "\100\071\062\072\114\073\110\074\077\075\111\076\105" +
    "\077\107\100\072\101\103\102\064\103\113\104\104\105" +
    "\076\106\075\107\112\110\067\111\061\112\066\113\074" +
    "\114\073\001\002\000\014\020\u0124\024\u0120\037\u0128\051" +
    "\056\120\010\001\002\000\004\023\u0146\001\002\000\020" +
    "\020\uff8d\021\uff8d\023\uff8d\024\uff8d\037\uff8d\051\uff8d\120" +
    "\uff8d\001\002\000\004\047\u0148\001\002\000\010\051\235" +
    "\116\240\120\010\001\002\000\004\046\ufff0\001\002\000" +
    "\076\035\116\036\u014b\060\065\061\101\062\102\064\106" +
    "\065\070\066\063\067\115\070\100\071\062\072\114\073" +
    "\110\074\077\075\111\076\105\077\107\100\072\101\103" +
    "\102\064\103\113\104\104\105\076\106\075\107\112\110" +
    "\067\111\061\112\066\113\074\114\073\001\002\000\034" +
    "\020\030\022\032\034\042\040\050\051\047\055\026\057" +
    "\016\066\020\115\033\116\017\117\024\120\010\121\034" +
    "\001\002\000\076\021\u014d\035\116\060\065\061\101\062" +
    "\102\064\106\065\070\066\063\067\115\070\100\071\062" +
    "\072\114\073\110\074\077\075\111\076\105\077\107\100" +
    "\072\101\103\102\064\103\113\104\104\105\076\106\075" +
    "\107\112\110\067\111\061\112\066\113\074\114\073\001" +
    "\002\000\034\020\u0150\022\032\034\042\040\050\051\047" +
    "\055\026\057\016\066\020\115\033\116\017\117\024\120" +
    "\010\121\034\001\002\000\120\021\uffad\023\uffad\025\uffad" +
    "\033\uffad\035\uffad\036\uffad\046\uffad\050\uffad\052\uffad\056" +
    "\uffad\057\uffad\060\uffad\061\uffad\062\uffad\064\uffad\065\uffad" +
    "\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074" +
    "\uffad\075\uffad\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad" +
    "\103\uffad\104\uffad\105\uffad\106\uffad\107\uffad\110\uffad\111" +
    "\uffad\112\uffad\113\uffad\114\uffad\001\002\000\076\023\u0155" +
    "\035\116\060\065\061\101\062\102\064\106\065\070\066" +
    "\063\067\115\070\100\071\062\072\114\073\110\074\077" +
    "\075\111\076\105\077\107\100\072\101\103\102\064\103" +
    "\113\104\104\105\076\106\075\107\112\110\067\111\061" +
    "\112\066\113\074\114\073\001\002\000\034\020\030\022" +
    "\032\034\042\040\050\051\047\055\026\057\016\066\020" +
    "\115\033\116\017\117\024\120\010\121\034\001\002\000" +
    "\076\035\116\036\u0152\060\065\061\101\062\102\064\106" +
    "\065\070\066\063\067\115\070\100\071\062\072\114\073" +
    "\110\074\077\075\111\076\105\077\107\100\072\101\103" +
    "\102\064\103\113\104\104\105\076\106\075\107\112\110" +
    "\067\111\061\112\066\113\074\114\073\001\002\000\034" +
    "\020\030\022\032\034\042\040\050\051\047\055\026\057" +
    "\016\066\020\115\033\116\017\117\024\120\010\121\034" +
    "\001\002\000\076\021\u014d\035\116\060\065\061\101\062" +
    "\102\064\106\065\070\066\063\067\115\070\100\071\062" +
    "\072\114\073\110\074\077\075\111\076\105\077\107\100" +
    "\072\101\103\102\064\103\113\104\104\105\076\106\075" +
    "\107\112\110\067\111\061\112\066\113\074\114\073\001" +
    "\002\000\120\021\uffa3\023\uffad\025\uffa3\033\uffa3\035\uffad" +
    "\036\uffa3\046\uffa3\050\uffa3\052\uffa3\056\uffa3\057\uffa3\060" +
    "\uffad\061\uffad\062\uffad\064\uffad\065\uffad\066\uffad\067\uffad" +
    "\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076" +
    "\uffad\077\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad" +
    "\105\uffad\106\uffad\107\uffad\110\uffad\111\uffad\112\uffad\113" +
    "\uffad\114\uffad\001\002\000\120\021\uffa2\023\uffa2\025\uffa2" +
    "\033\uffa2\035\uffa2\036\uffa2\046\uffa2\050\uffa2\052\uffa2\056" +
    "\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074" +
    "\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2" +
    "\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\111" +
    "\uffa2\112\uffa2\113\uffa2\114\uffa2\001\002\000\006\046\ufff8" +
    "\102\u0157\001\002\000\004\053\u0158\001\002\000\006\120" +
    "\010\121\053\001\002\000\006\050\331\054\u015a\001\002" +
    "\000\004\046\ufff7\001\002\000\120\021\uff8c\023\uff8c\025" +
    "\uff8c\033\uff8c\035\uff8c\036\uff8c\046\uff8c\050\uff8c\052\uff8c" +
    "\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\064\uff8c\065" +
    "\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c" +
    "\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\101\uff8c\102" +
    "\uff8c\103\uff8c\104\uff8c\105\uff8c\106\uff8c\107\uff8c\110\uff8c" +
    "\111\uff8c\112\uff8c\113\uff8c\114\uff8c\001\002\000\102\035" +
    "\116\050\uffd3\056\uffd3\057\u015f\060\065\061\101\062\102" +
    "\064\106\065\070\066\063\067\115\070\100\071\062\072" +
    "\114\073\110\074\077\075\111\076\105\077\107\100\072" +
    "\101\103\102\064\103\113\104\104\105\076\106\075\107" +
    "\112\110\067\111\061\112\066\113\074\114\073\001\002" +
    "\000\006\050\u0117\056\u015e\001\002\000\120\021\uff8b\023" +
    "\uff8b\025\uff8b\033\uff8b\035\uff8b\036\uff8b\046\uff8b\050\uff8b" +
    "\052\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\064" +
    "\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b\072\uff8b" +
    "\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\100\uff8b\101" +
    "\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b\107\uff8b" +
    "\110\uff8b\111\uff8b\112\uff8b\113\uff8b\114\uff8b\001\002\000" +
    "\034\020\030\022\032\034\042\040\050\051\u0107\055\026" +
    "\057\016\066\020\115\033\116\017\117\024\120\010\121" +
    "\034\001\002\000\006\050\u010a\056\u0161\001\002\000\120" +
    "\021\uff8a\023\uff8a\025\uff8a\033\uff8a\035\uff8a\036\uff8a\046" +
    "\uff8a\050\uff8a\052\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a" +
    "\062\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071" +
    "\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a" +
    "\100\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106" +
    "\uff8a\107\uff8a\110\uff8a\111\uff8a\112\uff8a\113\uff8a\114\uff8a" +
    "\001\002\000\056\002\ufffd\006\ufffd\007\ufffd\010\ufffd\011" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd\022\ufffd" +
    "\034\ufffd\040\ufffd\051\ufffd\055\ufffd\057\ufffd\066\ufffd\115" +
    "\ufffd\116\ufffd\117\ufffd\120\ufffd\121\ufffd\001\002\000\006" +
    "\051\056\102\u0164\001\002\000\034\020\030\022\032\034" +
    "\042\040\050\051\047\055\026\057\016\066\020\115\033" +
    "\116\017\117\024\120\010\121\034\001\002\000\004\102" +
    "\u0166\001\002\000\034\020\030\022\032\034\042\040\050" +
    "\051\047\055\026\057\016\066\020\115\033\116\017\117" +
    "\024\120\010\121\034\001\002\000\076\035\116\046\ufffa" +
    "\060\065\061\101\062\102\064\106\065\070\066\063\067" +
    "\115\070\100\071\062\072\114\073\110\074\077\075\111" +
    "\076\105\077\107\100\072\101\103\102\064\103\113\104" +
    "\104\105\076\106\075\107\112\110\067\111\061\112\066" +
    "\113\074\114\073\001\002\000\076\035\116\046\ufffb\060" +
    "\065\061\101\062\102\064\106\065\070\066\063\067\115" +
    "\070\100\071\062\072\114\073\110\074\077\075\111\076" +
    "\105\077\107\100\072\101\103\102\064\103\113\104\104" +
    "\105\076\106\075\107\112\110\067\111\061\112\066\113" +
    "\074\114\073\001\002\000\120\021\uffce\023\uffce\025\uffce" +
    "\033\uffce\035\116\036\uffce\046\uffce\050\uffce\052\uffce\056" +
    "\uffce\057\uffce\060\uffce\061\101\062\102\064\106\065\070" +
    "\066\uffce\067\115\070\100\071\062\072\114\073\110\074" +
    "\077\075\111\076\105\077\107\100\072\101\103\102\uffce" +
    "\103\uffce\104\uffce\105\uffce\106\uffce\107\uffce\110\uffce\111" +
    "\uffce\112\uffce\113\uffce\114\uffce\001\002\000\004\057\u016b" +
    "\001\002\000\120\021\uffaa\023\uffaa\025\uffaa\033\uffaa\035" +
    "\uffaa\036\uffaa\046\uffaa\050\uffaa\052\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\064\uffaa\065\uffaa\066\uffaa\067" +
    "\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa" +
    "\076\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa\104" +
    "\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa" +
    "\113\uffaa\114\uffaa\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016a\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\004\005\005\001\001\000\022\006\022\007\020" +
    "\013\036\016\037\017\050\026\024\046\040\047\042\001" +
    "\001\000\006\016\011\031\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\014\001\001\000\002\001\001\000\010\016\252" +
    "\037\u0169\040\243\001\001\000\002\001\001\000\020\007" +
    "\u0168\013\036\016\037\017\050\026\024\046\040\047\042" +
    "\001\001\000\002\001\001\000\004\016\u0162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\007\u015b\013\036\014\u015c\016\037\017\050\026\024\046" +
    "\040\047\042\001\001\000\004\016\u0155\001\001\000\020" +
    "\007\u0149\013\036\016\037\017\050\026\024\046\040\047" +
    "\042\001\001\000\004\016\u0146\001\001\000\016\016\u0120" +
    "\022\u0121\055\u0124\056\u0122\057\u0125\061\u0126\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\016\231\036\236" +
    "\037\232\040\243\041\u011c\043\242\001\001\000\004\016" +
    "\u0119\001\001\000\002\001\001\000\004\015\371\001\001" +
    "\000\002\001\001\000\010\011\343\016\345\022\344\001" +
    "\001\000\002\001\001\000\004\016\315\001\001\000\004" +
    "\062\225\001\001\000\004\016\160\001\001\000\020\007" +
    "\156\013\036\016\037\017\050\026\024\046\040\047\042" +
    "\001\001\000\004\022\056\001\001\000\002\001\001\000" +
    "\006\016\054\017\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\152\020\150\001" +
    "\001\000\020\007\057\013\036\016\037\017\050\026\024" +
    "\046\040\047\042\001\001\000\002\001\001\000\020\007" +
    "\147\013\036\016\037\017\050\026\024\046\040\047\042" +
    "\001\001\000\020\007\146\013\036\016\037\017\050\026" +
    "\024\046\040\047\042\001\001\000\020\007\145\013\036" +
    "\016\037\017\050\026\024\046\040\047\042\001\001\000" +
    "\020\007\144\013\036\016\037\017\050\026\024\046\040" +
    "\047\042\001\001\000\020\007\143\013\036\016\037\017" +
    "\050\026\024\046\040\047\042\001\001\000\020\007\142" +
    "\013\036\016\037\017\050\026\024\046\040\047\042\001" +
    "\001\000\020\007\141\013\036\016\037\017\050\026\024" +
    "\046\040\047\042\001\001\000\020\007\140\013\036\016" +
    "\037\017\050\026\024\046\040\047\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\137\013\036\016" +
    "\037\017\050\026\024\046\040\047\042\001\001\000\020" +
    "\007\136\013\036\016\037\017\050\026\024\046\040\047" +
    "\042\001\001\000\020\007\135\013\036\016\037\017\050" +
    "\026\024\046\040\047\042\001\001\000\020\007\134\013" +
    "\036\016\037\017\050\026\024\046\040\047\042\001\001" +
    "\000\020\007\133\013\036\016\037\017\050\026\024\046" +
    "\040\047\042\001\001\000\020\007\132\013\036\016\037" +
    "\017\050\026\024\046\040\047\042\001\001\000\020\007" +
    "\131\013\036\016\037\017\050\026\024\046\040\047\042" +
    "\001\001\000\020\007\130\013\036\016\037\017\050\026" +
    "\024\046\040\047\042\001\001\000\002\001\001\000\020" +
    "\007\127\013\036\016\037\017\050\026\024\046\040\047" +
    "\042\001\001\000\020\007\126\013\036\016\037\017\050" +
    "\026\024\046\040\047\042\001\001\000\020\007\125\013" +
    "\036\016\037\017\050\026\024\046\040\047\042\001\001" +
    "\000\002\001\001\000\020\007\124\013\036\016\037\017" +
    "\050\026\024\046\040\047\042\001\001\000\020\007\123" +
    "\013\036\016\037\017\050\026\024\046\040\047\042\001" +
    "\001\000\020\007\122\013\036\016\037\017\050\026\024" +
    "\046\040\047\042\001\001\000\020\007\121\013\036\016" +
    "\037\017\050\026\024\046\040\047\042\001\001\000\020" +
    "\007\120\013\036\016\037\017\050\026\024\046\040\047" +
    "\042\001\001\000\020\007\117\013\036\016\037\017\050" +
    "\026\024\046\040\047\042\001\001\000\020\007\116\013" +
    "\036\016\037\017\050\026\024\046\040\047\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\163\001\001\000\002\001\001" +
    "\000\004\032\166\001\001\000\010\016\054\017\170\033" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\177\024\175\025" +
    "\176\026\173\001\001\000\002\001\001\000\010\016\177" +
    "\025\213\026\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\201\001\001\000\002" +
    "\001\001\000\012\016\177\024\212\025\176\026\173\001" +
    "\001\000\012\016\177\024\211\025\176\026\173\001\001" +
    "\000\004\030\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\054\017\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\177\024\221\025\176\026\173\001" +
    "\001\000\002\001\001\000\014\016\177\023\223\024\224" +
    "\025\176\026\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\152\020\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\231\036\236\037\232\040" +
    "\243\041\233\043\242\001\001\000\004\043\313\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\016\231\036" +
    "\305\037\232\040\243\042\304\043\242\001\001\000\006" +
    "\016\152\020\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\152\020\276\001\001\000\010\016\267" +
    "\044\265\045\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\252\040\262\001\001\000\006\016\252" +
    "\040\261\001\001\000\006\016\252\040\260\001\001\000" +
    "\004\030\257\001\001\000\006\016\252\040\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\256\001" +
    "\001\000\004\016\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\231\036\264\037\232" +
    "\040\243\043\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\271" +
    "\001\001\000\002\001\001\000\006\016\267\044\275\001" +
    "\001\000\016\016\231\036\236\037\232\040\243\041\274" +
    "\043\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\231\036\236\037\232\040\243" +
    "\041\300\043\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\231\036\236\037\232\040\243\041\303" +
    "\043\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\231\036\311" +
    "\037\232\040\243\043\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\231\036\314\037\232\040\243" +
    "\043\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\231\036\317\037\232\040\243" +
    "\043\242\001\001\000\002\001\001\000\004\035\322\001" +
    "\001\000\012\016\054\017\324\021\326\034\323\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\332\027\333" +
    "\001\001\000\006\016\054\017\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\335" +
    "\001\001\000\002\001\001\000\010\016\054\017\324\021" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\332\027\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\347\001\001\000\020" +
    "\007\360\013\036\016\037\017\050\026\024\046\040\047" +
    "\042\001\001\000\002\001\001\000\020\007\351\013\036" +
    "\016\037\017\050\026\024\046\040\047\042\001\001\000" +
    "\004\012\354\001\001\000\020\007\356\013\036\016\037" +
    "\017\050\026\024\046\040\047\042\001\001\000\010\011" +
    "\355\016\345\022\344\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\361\001\001\000\002\001\001\000\020\007\363\013\036" +
    "\016\037\017\050\026\024\046\040\047\042\001\001\000" +
    "\004\012\364\001\001\000\002\001\001\000\006\016\054" +
    "\017\366\001\001\000\002\001\001\000\006\016\054\017" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\007\u0113\013\036\014\u0114\016\037\017\050\026\024\046" +
    "\040\047\042\001\001\000\020\007\374\013\036\016\037" +
    "\017\050\026\024\046\040\047\042\001\001\000\002\001" +
    "\001\000\034\007\377\013\036\016\u0102\017\050\022\u0100" +
    "\026\024\046\040\047\042\050\u0103\051\u0104\052\376\053" +
    "\u0101\054\u0105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\371\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\007\156\013\036\016\u0107\017\050\020\150\026" +
    "\024\046\040\047\042\001\001\000\004\015\371\001\001" +
    "\000\002\001\001\000\032\007\377\013\036\016\u0102\017" +
    "\050\022\u0100\026\024\046\040\047\042\051\u010a\052\376" +
    "\053\u0101\054\u0105\001\001\000\002\001\001\000\020\007" +
    "\u010e\013\036\016\037\017\050\026\024\046\040\047\042" +
    "\001\001\000\020\007\u010d\013\036\016\037\017\050\026" +
    "\024\046\040\047\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\u0112\013\036\016\037\017\050\026" +
    "\024\046\040\047\042\001\001\000\020\007\u0111\013\036" +
    "\016\037\017\050\026\024\046\040\047\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\u0118\013\036\016" +
    "\037\017\050\026\024\046\040\047\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\177\024\u011b\025\176\026\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\231\036\u011e\037\232\040" +
    "\243\043\242\001\001\000\002\001\001\000\020\007\u0142" +
    "\013\036\016\037\017\050\026\024\046\040\047\042\001" +
    "\001\000\004\015\u013d\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\u012c\013\036\016\037\017\050\026" +
    "\024\046\040\047\042\001\001\000\012\016\u0120\022\u0121" +
    "\057\u012b\061\u0126\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\u0129\013\036\016\037\017\050\026\024" +
    "\046\040\047\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\016\u0120\022\u0121\055\u0124\056\u012e\057\u0125\061" +
    "\u0126\001\001\000\004\060\u0130\001\001\000\010\016\u0120" +
    "\022\u0121\061\u0132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\u0134\013\036\016\037" +
    "\017\050\026\024\046\040\047\042\001\001\000\002\001" +
    "\001\000\016\016\u0120\022\u0121\055\u0124\056\u0136\057\u0125" +
    "\061\u0126\001\001\000\004\060\u0137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\007\u013b" +
    "\013\036\016\037\017\050\026\024\046\040\047\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\007\u013f\013\036\016\037\017\050\026\024\046" +
    "\040\047\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\016\u0120\022" +
    "\u0121\055\u0124\056\u0144\057\u0125\061\u0126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\231\036\u0148\037\232\040\243\043\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\u014b\013\036\016" +
    "\037\017\050\026\024\046\040\047\042\001\001\000\004" +
    "\010\u014d\001\001\000\020\007\u014e\013\036\016\037\017" +
    "\050\026\024\046\040\047\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\u0150\013\036\016\037\017" +
    "\050\026\024\046\040\047\042\001\001\000\002\001\001" +
    "\000\020\007\u0152\013\036\016\037\017\050\026\024\046" +
    "\040\047\042\001\001\000\004\010\u0153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\054\017\324\021\u0158\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\007\377" +
    "\013\036\016\u0102\017\050\022\u0100\026\024\046\040\047" +
    "\042\050\u015f\051\u0104\052\376\053\u0101\054\u0105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u0164\001\001\000\020\007\u0167\013\036\016\037" +
    "\017\050\026\024\046\040\047\042\001\001\000\002\001" +
    "\001\000\020\007\u0166\013\036\016\037\017\050\026\024" +
    "\046\040\047\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* The file being parsed. Only needed for location info. */
    String file;                   

    /* Buffer to get syntax error ino from message and location info
       from CUP's syntax_error to CUP's report_fatal_error
       function. */
    String errorMessage;
    pacioli.Location errorLocation;

    /* Obsolete */
    String source;

   /* Public interface */
    public Parser(Lexer lex, ComplexSymbolFactory sf, String file, String source) {
        super(lex,sf);
        this.file = file;
        this.source = source;
    }

    public static ProgramNode parseFile(String file) throws Exception {
        BufferedReader reader = new BufferedReader(new FileReader(file));
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        Lexer lexer = new Lexer(reader, csf, file, null);
        Parser parser = new Parser(lexer, csf, file, null);
        return (ProgramNode) parser.parse().value;
    }

   /* CUP overrides to get error handling with location info */
    public void report_error(String message, Object info) {
    }

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        done_parsing();      
        throw new PacioliException(errorLocation, errorMessage);
    }

    public void syntax_error(Symbol cur_token) {
        assert(cur_token instanceof ComplexSymbol);
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();
        for (Integer expected : ids){
            list.add(symbl_name_from_id(expected));
        }
        ComplexSymbol token = (ComplexSymbol) cur_token;
        errorLocation = makeLoc(token.getLeft(), token.getRight());
        errorMessage = "Expected one of " + list;
    }

   /* Utility functions for the grammar rules */
    private pacioli.Location makeLoc(Location from, Location to) {
      return new pacioli.Location(file, source, from.getOffset(), to.getOffset());
    }

    private static List<String> idNames(List<IdentifierNode> ids) {
        List<String> names = new ArrayList<String>();
        for (IdentifierNode id: ids) {
            names.add(id.getName());
        }
        return names;
    }

    private ValueDefinition functionDefinition(pacioli.Location loc, IdentifierNode id, List<IdentifierNode> args, ExpressionNode body) {
        ExpressionNode function = new LambdaNode(freshUnderscores(idNames(args)), body, loc);
        return new ValueDefinition(loc, id, function);
    }

    private static List<String> freshUnderscores(List<String> names) {
          List<String> fresh = new ArrayList<String>();
          for (String name : names) {
              if (name.equals("_")) {
                  fresh.add(freshUnderscore());
              } else {
                  fresh.add(name);
              }
          }
          return fresh;
      }

    private static int counter = 0;

    private static String freshUnderscore() {
        return "_" + counter++;
    }

    private static ExpressionNode binop(String name, ExpressionNode left, ExpressionNode right) {
        pacioli.Location loc = left.getLocation().join(right.getLocation());
        List<ExpressionNode> args = new ArrayList<ExpressionNode>();
        args.add(left);
        args.add(right);
        return new ApplicationNode(new IdentifierNode(name, loc), args, loc);
    }

    private static ExpressionNode singleop(String name, ExpressionNode exp, pacioli.Location loc) {
        List<ExpressionNode> args = new ArrayList<ExpressionNode>();
        args.add(exp);
        return new ApplicationNode(new IdentifierNode(name, loc), args, loc);
    }

    private static TypeIdentifierNode typeIDHack(IdentifierNode id) {
        return new TypeIdentifierNode(id.getLocation(), id.getName());
    }

    private static class GeneratorClause {
        public final IdentifierNode id;
        public final ExpressionNode list;
        public GeneratorClause(IdentifierNode id, ExpressionNode list) {
            this.id = id;
            this.list = list;
        }
    }

    private static class TupleGeneratorClause {
        public final List<IdentifierNode> ids;
        public final ExpressionNode list;
        public TupleGeneratorClause(List<IdentifierNode> ids, ExpressionNode list) {
            this.ids = ids;
            this.list = list;
        }
    }

    private static class AssignmentClause {
        public final IdentifierNode id;
        public final ExpressionNode value;
        public AssignmentClause(IdentifierNode id, ExpressionNode value) {
            this.id = id;
            this.value = value;
        }
    }

    private static class TupleAssignmentClause {
        public final List<IdentifierNode> ids;
        public final ExpressionNode value;
        public TupleAssignmentClause(List<IdentifierNode> ids, ExpressionNode value) {
            this.ids = ids;
            this.value = value;
        }
    }

    private static ExpressionNode desugarComprehension(pacioli.Location loc, ExpressionNode e, List<Object> ps) throws PacioliException {

        String accuName = "accu";

        ExpressionNode addMut = new IdentifierNode("add_mut", loc);
        ExpressionNode accu = new IdentifierNode(accuName, loc);
        ExpressionNode body = new ApplicationNode(addMut, Arrays.asList(accu, e), loc);

        for (int i = ps.size() - 1; 0 <= i; i--) {
            Object part = ps.get(i);
            if (part instanceof GeneratorClause) {
                GeneratorClause clause = (GeneratorClause) part;
                body = new ApplicationNode(
                                new IdentifierNode("loop_list", loc),
                                Arrays.asList((ExpressionNode) new IdentifierNode(accuName, loc),
                                              new LambdaNode(freshUnderscores(Arrays.asList(accuName, clause.id.getName())), body, loc), clause.list),
                                loc);
            } else if (part instanceof TupleGeneratorClause) {
                TupleGeneratorClause clause = (TupleGeneratorClause) part;

                List<String> args = new ArrayList<String>();
                for (IdentifierNode var : clause.ids) {
                    args.add(var.getName());
                }

                ExpressionNode apply = new IdentifierNode("apply", loc);
                ExpressionNode restLambda = new LambdaNode(freshUnderscores(args), body, loc);
                ExpressionNode tup = new IdentifierNode("tup", loc);
                ExpressionNode loopList = new IdentifierNode("loop_list", loc);
                ExpressionNode accuId = new IdentifierNode(accuName, loc);
                ExpressionNode restApp = new ApplicationNode(apply, Arrays.asList(restLambda, tup), loc);
                ExpressionNode restAppLambda = new LambdaNode(Arrays.asList(accuName, "tup"), restApp, loc);

                body = new ApplicationNode(loopList, Arrays.asList(accuId, restAppLambda, clause.list), loc);
            } else if (part instanceof AssignmentClause) {
                AssignmentClause clause = (AssignmentClause) part;

                body = new ApplicationNode(new LambdaNode(freshUnderscores(Arrays.asList(clause.id.getName())), body, loc), Arrays.asList(clause.value), loc);
            } else if (part instanceof ExpressionNode) {
                ExpressionNode clause = (ExpressionNode) part;
                body = new BranchNode(clause, body, new IdentifierNode(accuName, loc), loc);
            } else {
                throw new PacioliException(loc, "Unexpected clause %s", part);
            }
        }

        ExpressionNode lambda = new LambdaNode(Arrays .asList(accuName), body, loc);
        ExpressionNode emptyListId = new IdentifierNode("empty_list", loc);
        ExpressionNode emptyList = new ApplicationNode(emptyListId, new ArrayList<ExpressionNode>(), loc);

        return new ApplicationNode(lambda, Arrays.asList(emptyList), loc);
    }

    private static ExpressionNode desugarFoldComprehension(pacioli.Location loc, IdentifierNode op, ExpressionNode e, List<Object> ps) throws PacioliException {
        ExpressionNode body = desugarComprehension(loc, e, ps);
        if (op.getName().equals("sum")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_sum", loc), Arrays.asList(body), loc);
        } else if (op.getName().equals("count")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_size", loc), Arrays.asList(body), loc);
        } else if (op.getName().equals("all")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_all", loc), Arrays.asList(body), loc);
        } else if (op.getName().equals("some")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_some", loc), Arrays.asList(body), loc);
        } else if (op.getName().equals("gcd")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_gcd", loc), Arrays.asList(body), loc);
        } else {
            throw new PacioliException(op.getLocation(), "Comprehension operator '%s' unknown", op.getName());
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= includes commands 
            {
              ProgramNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IdentifierNode> i = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Definition> c = (List<Definition>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ProgramNode(new pacioli.Location(file, source, 0, 0), i, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // includes ::= includes INCLUDE path SEMICOLON 
            {
              List<IdentifierNode> RESULT =null;
		Location isxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location isxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> is = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IdentifierNode> p = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 is.add(new IdentifierNode(Utils.intercalateText("/", p), makeLoc(pxleft, pxright))); 
                                                       RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // includes ::= 
            {
              List<IdentifierNode> RESULT =null;
		 RESULT = new LinkedList<IdentifierNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // commands ::= commands command SEMICOLON 
            {
              List<Definition> RESULT =null;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Definition> cs = (List<Definition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Definition c = (Definition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 cs.add(c); RESULT = cs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commands",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // commands ::= 
            {
              List<Definition> RESULT =null;
		 RESULT = new LinkedList<Definition>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commands",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // command ::= DEFINE id EQL expr 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValueDefinition(makeLoc(dxleft, exright), id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command ::= DEFINE id idlist EQL expr 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = functionDefinition(makeLoc(dxleft, exright), id, ids, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command ::= DECLARE quali ids DBLCLN schema 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultiDeclaration(makeLoc(dxleft, sxright), ids, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // command ::= DEFINDEX id 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> names = new ArrayList<String>();
                                                       RESULT = new IndexSetDefinition(makeLoc(dxleft, idxright), id, names); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // command ::= DEFINDEX id EQL LBRC names RBRC 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IndexSetDefinition(makeLoc(dxleft, pxright), id, idNames(ids)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // command ::= DEFTYPE schema EQL type 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeDefinition(makeLoc(dxleft, txright), s.context, s.type, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // command ::= DEFALIAS id EQL unit 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AliasDefinition(makeLoc(dxleft, uxright), id, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // command ::= DEFUNIT id EXCL id EQL unitvec 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<UnitDecl> ps = (List<UnitDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 /* Todo: remove hashmap and use pair list directly in UnitVectorDefinition */
                                                       java.util.Map<String, UnitNode> unitVector = new HashMap<String, UnitNode>();
                                                       for (UnitDecl pair: ps) {
                                                           unitVector.put(pair.key.name, pair.value);
                                                       }
                                                       RESULT = new UnitVectorDefinition(makeLoc(dxleft, psxright), typeIDHack(id), typeIDHack(n), ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // command ::= DEFUNIT id STRING 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitDefinition(makeLoc(dxleft, sxright), id, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // command ::= DEFUNIT id STRING EQL dimnum 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode def = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitDefinition(makeLoc(dxleft, defxright), id, s, def); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // command ::= DEFMATRIX id DBLCLN type EQL matrix 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode s = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ValueDecl> m = (List<ValueDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 /* Change MatrixLiteralNode to accept a ValueDecl list */
                                                       //List<Pair<List<String>, String>> stringPairs = new ArrayList<Pair<List<String>, String>>();
                                                       //for (ValueDecl decl: m) {
                                                         //  stringPairs.add(new Pair<List<String>, String>(idNames(decl.key), decl.value));
                                                       //}
                                                       ExpressionNode body = new MatrixLiteralNode(makeLoc(mxleft, mxright), s, m);
                                                       //ExpressionNode body = new MatrixLiteralNode(makeLoc(mxleft, mxright), s, stringPairs);
                                                       RESULT = new ValueDefinition(makeLoc(dxleft, mxright), id, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // command ::= DEFCONV id DBLCLN type 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(dxleft, txright);
                                                       ExpressionNode conv = new ConversionNode(loc, t);
                                                       RESULT = new ValueDefinition(loc, id, conv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // command ::= expr 
            {
              Definition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Toplevel(e.getLocation(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // quali ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("quali",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // quali ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("quali",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // path ::= id 
            {
              List<IdentifierNode> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<IdentifierNode>(Arrays.asList(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // path ::= path DIV id 
            {
              List<IdentifierNode> RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> p = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode i = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 p.add(i); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // matrix ::= LBRC RBRC 
            {
              List<ValueDecl> RESULT =null;
		 RESULT = new LinkedList<ValueDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // matrix ::= LBRC matrix_parts RBRC 
            {
              List<ValueDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ValueDecl> ps = (List<ValueDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // matrix_parts ::= names TO number 
            {
              List<ValueDecl> RESULT =null;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ns = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ValueDecl>(Arrays.asList(new ValueDecl(ns, n))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_parts",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // matrix_parts ::= matrix_parts COMMA names TO number 
            {
              List<ValueDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<ValueDecl> ps = (List<ValueDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ns = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(new ValueDecl(ns, n)); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_parts",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // unitvec ::= LBRC RBRC 
            {
              List<UnitDecl> RESULT =null;
		 RESULT = new LinkedList<UnitDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // unitvec ::= LBRC unitvec_parts RBRC 
            {
              List<UnitDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<UnitDecl> ps = (List<UnitDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // unitvec_parts ::= name COLON unit 
            {
              List<UnitDecl> RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<UnitDecl>(Arrays.asList(new UnitDecl(n, u))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec_parts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unitvec_parts ::= unitvec_parts COMMA name COLON unit 
            {
              List<UnitDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<UnitDecl> ps = (List<UnitDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(new UnitDecl(n, u)); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec_parts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // number ::= unsigned 
            {
              String RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // number ::= NEG unsigned 
            {
              String RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "-" + u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // integer ::= NATURAL 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // integer ::= NEG NATURAL 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "-" + n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unsigned ::= DECIMAL 
            {
              String RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unsigned ::= NATURAL 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // id ::= IDENTIFIER 
            {
              IdentifierNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierNode(id, makeLoc(idxleft, idxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ids ::= id 
            {
              List<IdentifierNode> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<IdentifierNode>(Arrays.asList(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ids ::= ids COMMA id 
            {
              List<IdentifierNode> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ids.add(id); RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // idlist ::= LPAR RPAR 
            {
              List<IdentifierNode> RESULT =null;
		 RESULT = new LinkedList<IdentifierNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // idlist ::= LPAR ids RPAR 
            {
              List<IdentifierNode> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // name ::= id 
            {
              IdentifierNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // name ::= STRING 
            {
              IdentifierNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierNode(s, makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // names ::= name 
            {
              List<IdentifierNode> RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<IdentifierNode>(Arrays.asList(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("names",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // names ::= names COMMA name 
            {
              List<IdentifierNode> RESULT =null;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ns = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ns.add(n); RESULT = ns; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("names",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprs ::= expr 
            {
              List<ExpressionNode> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ExpressionNode>(Arrays.asList(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprs ::= exprs COMMA expr 
            {
              List<ExpressionNode> RESULT =null;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ExpressionNode> es = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 es.add(e); RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exprlist ::= LPAR RPAR 
            {
              List<ExpressionNode> RESULT =null;
		 RESULT = new LinkedList<ExpressionNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exprlist ::= LPAR exprs RPAR 
            {
              List<ExpressionNode> RESULT =null;
		Location exprsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exprsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> exprs = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exprs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= LPAR expr RPAR 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= NEG expr 
            {
              ExpressionNode RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("negative", e, makeLoc(nxleft, exright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr NEG expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("minus", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr HAT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("expt", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr PER expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("dim_div", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr EQL expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("equal", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr TRANS 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("transpose", e, makeLoc(exleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr RECI 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("reciprocal", e, makeLoc(exleft, rxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr DIMINV 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("dim_inv", e, makeLoc(exleft, dxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr MULT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("multiply", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr PLUS expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("sum", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr DOT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("dot", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr DOTHAT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("power", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= expr DIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("divide", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr DOTDIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("right_division", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr LDIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("left_divide", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr DOTLDIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("left_division", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr LSCALE expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("scale", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr RSCALE expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("rscale", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr LSCALEDOWN expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("lscale_down", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr RSCALEDOWN expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("scale_down", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr LEQ expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("less_eq", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr GTQ expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("greater_eq", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr NEQ expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("not_equal", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr LE expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("less", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr GT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("greater", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= expr FOLLOWSFROM expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e2, e1, new ConstNode("true", loc), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr IMPLIES expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e1, e2, new ConstNode("true", loc), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr EQUIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("equiv", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr AND expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e1, e2, new ConstNode("false", loc), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr OR expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e1, new ConstNode("true", loc), e2, loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= id exprlist 
            {
              ExpressionNode RESULT =null;
		Location funxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location funxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IdentifierNode fun = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ExpressionNode> args = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ApplicationNode(fun, args, makeLoc(funxleft, argsxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= LAMBDA idlist expr END 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode b = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LambdaNode(freshUnderscores(idNames(ids)), b, makeLoc(lxleft, exright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= LET lettail 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= IF expr THEN expr if_tail 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode b = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BranchNode(c, b, t, makeLoc(ixleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= listlit 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= comprehension 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= PIPE matrix_type PIPE 
            {
              ExpressionNode RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeNode m = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MatrixTypeNode(makeLoc(mxleft, mxright), m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= BEGIN sequence END 
            {
              ExpressionNode RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StatementNode(makeLoc(bxleft, exright), s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= id 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= indexkey 
            {
              ExpressionNode RESULT =null;
		Location kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		KeyNode k = (KeyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = k; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= unsigned 
            {
              ExpressionNode RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstNode(u, makeLoc(uxleft, uxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= BOOLEAN 
            {
              ExpressionNode RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstNode(b, makeLoc(bxleft, bxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= STRING 
            {
              ExpressionNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(s, makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // if_tail ::= ELSE IF expr THEN expr if_tail 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode b = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BranchNode(c, b, t, makeLoc(ixleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_tail",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // if_tail ::= ELSE expr END 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_tail",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // indexkey ::= name AT name 
            {
              KeyNode RESULT =null;
		Location idxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode idx = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new KeyNode(idx.getName(), id.getName(), makeLoc(idxxleft, idxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexkey",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // indexkey ::= indexkey MOD name AT name 
            {
              KeyNode RESULT =null;
		Location kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		KeyNode k = (KeyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode idx = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 KeyNode node = new KeyNode(idx.getName(), id.getName(), makeLoc(idxxleft, idxright));
                                                       RESULT = k.merge(node); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexkey",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // lettail ::= id EQL expr letrest 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> args = freshUnderscores(Arrays.asList(id.getName()));
                                                       ExpressionNode fun = new LambdaNode(args, r, makeLoc(idxleft, exright));
                                                       RESULT = new ApplicationNode(fun, Arrays.asList(e), makeLoc(idxleft, rxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lettail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lettail ::= idlist EQL expr letrest 
            {
              ExpressionNode RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> args = freshUnderscores(idNames(ids));
                                                       pacioli.Location loc = makeLoc(idsxleft, rxright);
                                                       ExpressionNode fun = new LambdaNode(args, r, makeLoc(idsxleft, exright));
                                                       RESULT = new ApplicationNode(new IdentifierNode("apply", loc), Arrays.asList(fun, e), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lettail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lettail ::= id idlist EQL expr letrest 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> rArgs = freshUnderscores(Arrays.asList(id.getName()));
                                                       List<String> eArgs = freshUnderscores(idNames(ids));
                                                       pacioli.Location loc = makeLoc(idxleft, rxright);
                                                       ExpressionNode rFun = new LambdaNode(rArgs, r, loc);
                                                       ExpressionNode eFun = new LambdaNode(eArgs, e, loc);
                                                       RESULT = new ApplicationNode(rFun, Arrays.asList(eFun), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lettail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // letrest ::= IN expr END 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("letrest",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // letrest ::= COMMA lettail 
            {
              ExpressionNode RESULT =null;
		Location ltxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ltxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode lt = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("letrest",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sequence ::= statements 
            {
              SequenceNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ExpressionNode> s = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SequenceNode(makeLoc(sxleft, sxright), s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // statements ::= statement 
            {
              List<ExpressionNode> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode s = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ExpressionNode>(Arrays.asList(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // statements ::= statements statement 
            {
              List<ExpressionNode> RESULT =null;
		Location ssxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ssxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> ss = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode s = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // statement ::= no_if_stm 
            {
              ExpressionNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode s = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // statement ::= IF expr THEN sequence stm_if_tail 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(ixleft, txright);
                                                       RESULT = new IfStatementNode(loc, e, s, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // stm_if_tail ::= ELSE IF expr THEN sequence stm_if_tail 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, txright);
                                                       RESULT = new IfStatementNode(loc, e, s, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stm_if_tail",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // stm_if_tail ::= ELSE no_if_stm END 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode s = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stm_if_tail",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // stm_if_tail ::= END 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(exleft, exright);
                                                       RESULT = new ApplicationNode(new IdentifierNode("skip", loc), new ArrayList<ExpressionNode>(), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stm_if_tail",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // no_if_stm ::= id ASSIGN expr SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentNode(makeLoc(idxleft, sxright), id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("no_if_stm",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // no_if_stm ::= idlist ASSIGN expr SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TupleAssignmentNode(makeLoc(idsxleft, sxright), ids, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("no_if_stm",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // no_if_stm ::= id exprlist SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> es = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ApplicationNode(id, es, makeLoc(idxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("no_if_stm",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // no_if_stm ::= RETURN expr SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(rxleft, sxright);
                                                       RESULT = new ReturnNode(loc, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("no_if_stm",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // no_if_stm ::= RETURN SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(rxleft, sxright);
                                                       RESULT = new ReturnNode(loc, new IdentifierNode("nothing", loc)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("no_if_stm",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // no_if_stm ::= WHILE expr DO sequence END 
            {
              ExpressionNode RESULT =null;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileNode(makeLoc(wxleft, nxright), e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("no_if_stm",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // listlit ::= LBRACK RBRACK 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, rxright);
                                                       RESULT = new ApplicationNode(new IdentifierNode("empty_list", loc), new ArrayList<ExpressionNode>(), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listlit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // listlit ::= LBRACK exprs RBRACK 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> es = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, rxright);
                                                       ExpressionNode list = new ApplicationNode(new IdentifierNode("empty_list", loc), new ArrayList<ExpressionNode>(), loc);
                                                       for (ExpressionNode item : es) {
                                                           List<ExpressionNode> tup = new ArrayList<ExpressionNode>();
                                                           tup.add(list);
                                                           tup.add(item);
                                                           list = new ApplicationNode(new IdentifierNode("add_mut", loc), tup, loc);
                                                       }
                                                       RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listlit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // comprehension ::= LBRACK expr PIPE parts RBRACK 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Object> ps = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, rxright);
                                                       RESULT = desugarComprehension(loc, e, ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comprehension",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // comprehension ::= id LBRACK expr PIPE parts RBRACK 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Object> ps = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(idxleft, rxright);
                                                       RESULT = desugarFoldComprehension(loc, id, e, ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comprehension",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parts ::= part 
            {
              List<Object> RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Object>(Arrays.asList(p)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parts",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parts ::= parts COMMA part 
            {
              List<Object> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Object> ps = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(p); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parts",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // part ::= generator 
            {
              Object RESULT =null;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = g; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // part ::= filter 
            {
              Object RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // part ::= assignment 
            {
              Object RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // generator ::= id FROM expr 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GeneratorClause(id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("generator",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // generator ::= idlist FROM expr 
            {
              Object RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TupleGeneratorClause(ids, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("generator",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // filter ::= expr 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("filter",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // assignment ::= id ASSIGN expr 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentClause(id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // assignment ::= idlist ASSIGN expr 
            {
              Object RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TupleAssignmentClause(ids, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // schema ::= FORTYPE ids COLON schema 
            {
              SchemaNode RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TypeContext context = s.context;
                                                       for (IdentifierNode id: ids) {
              		                                   context.addTypeVar(id.getName());
                                                       }
                                                       RESULT = new SchemaNode(makeLoc(fxleft, sxright), context , s.type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("schema",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // schema ::= FORINDEX ids COLON schema 
            {
              SchemaNode RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TypeContext context = s.context;
                                                       for (IdentifierNode id: ids) {
              		                                   context.addIndexVar(id.getName());
                                                       }
                                                       RESULT = new SchemaNode(makeLoc(fxleft, sxright), context , s.type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("schema",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // schema ::= FORUNIT vars COLON schema 
            {
              SchemaNode RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location vsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location vsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> vs = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TypeContext context = s.context;
                                                       for (String v: vs) {
              		                                   context.addUnitVar(v);
                                                       }
                                                       RESULT = new SchemaNode(makeLoc(fxleft, sxright), context , s.type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("schema",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // schema ::= type 
            {
              SchemaNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SchemaNode(makeLoc(txleft, txright), new TypeContext(), t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("schema",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // vars ::= var 
            {
              List<String> RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<String>(Arrays.asList(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // vars ::= vars COMMA var 
            {
              List<String> RESULT =null;
		Location vsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location vsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> vs = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 vs.add(v); RESULT = vs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // var ::= id 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id.getName(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // var ::= id EXCL id 
            {
              String RESULT =null;
		Location idxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode idx = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = idx.getName() + "!" + id.getName(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // types ::= type 
            {
              List<TypeNode> RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<TypeNode>(Arrays.asList(t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // types ::= types COMMA type 
            {
              List<TypeNode> RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<TypeNode> ts = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ts.add(t); RESULT = ts; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // typelist ::= LPAR RPAR 
            {
              List<TypeNode> RESULT =null;
		 RESULT = new LinkedList<TypeNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typelist",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // typelist ::= LPAR types RPAR 
            {
              List<TypeNode> RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<TypeNode> ts = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ts; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typelist",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // type ::= typelist TO type 
            {
              TypeNode RESULT =null;
		Location asxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location asxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<TypeNode> as = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode b = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TypeNode domain = new TypeApplicationNode(makeLoc(asxleft, bxright), 
                                                                            new TypeIdentifierNode(makeLoc(asxleft, asxright), "Tuple"), as);
                                                       RESULT = new FunctionTypeNode(makeLoc(asxleft, bxright), domain, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // type ::= id TO type 
            {
              TypeNode RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode a = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode b = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionTypeNode(makeLoc(axleft, bxright), typeIDHack(a), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // type ::= id typelist 
            {
              TypeNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<TypeNode> ts = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeApplicationNode(makeLoc(idxleft, tsxright), typeIDHack(id), ts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // type ::= matrix_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // matrix_type ::= dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_type",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // matrix_type ::= dim_type PER dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypePerNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_type",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // dim_type ::= dim_type MULT dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeMultiplyNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // dim_type ::= dim_type DIV dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeDivideNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // dim_type ::= dim_type HAT integer 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypePowerNode(makeLoc(xxleft, nxright), x, new NumberTypeNode(makeLoc(nxleft, nxright), n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // dim_type ::= dim_type MOD dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeKroneckerNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // dim_type ::= id 
            {
              TypeNode RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode u = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = typeIDHack(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // dim_type ::= id COLON id 
            {
              TypeNode RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode p = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode u = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrefixUnitTypeNode(makeLoc(pxleft, uxright), typeIDHack(p), typeIDHack(u)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // dim_type ::= id EXCL 
            {
              TypeNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IdentifierNode i = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BangTypeNode(makeLoc(ixleft, exright), typeIDHack(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // dim_type ::= id EXCL id 
            {
              TypeNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode i = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode u = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BangTypeNode(makeLoc(ixleft, uxright), typeIDHack(i), typeIDHack(u)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // dim_type ::= NATURAL 
            {
              TypeNode RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (n.equals("1")) {
                                                           RESULT = new NumberTypeNode(makeLoc(nxleft, nxright), n);
                                                       } else {
                                                           report_fatal_error("Number unexpected. Only number 1 allowed.", n);
                                                       } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // unit ::= unit_term 
            {
              UnitNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode t = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // unit ::= unit MULT unit 
            {
              UnitNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		UnitNode x = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode y = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitOperationNode(makeLoc(xxleft, yxright), "*", x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // unit ::= unit DIV unit 
            {
              UnitNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		UnitNode x = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode y = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitOperationNode(makeLoc(xxleft, yxright), "/", x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // unit ::= unit HAT integer 
            {
              UnitNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		UnitNode x = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitPowerNode(makeLoc(xxleft, nxright), x, new NumberUnitNode(n, makeLoc(nxleft, nxright))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // unit_term ::= LPAR unit_term RPAR 
            {
              UnitNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		UnitNode t = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // unit_term ::= id 
            {
              UnitNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitIdentifierNode(id.getLocation(), id.getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // unit_term ::= id COLON id 
            {
              UnitNode RESULT =null;
		Location prexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location prexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode pre = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitIdentifierNode(pre.getLocation().join(id.getLocation()), pre.getName(), id.getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // unit_term ::= unsigned 
            {
              UnitNode RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NumberUnitNode(n, makeLoc(nxleft, nxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // dimnum ::= unit 
            {
              UnitNode RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimnum",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
