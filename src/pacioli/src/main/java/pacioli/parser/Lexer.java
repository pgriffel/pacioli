// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package pacioli.parser;

// java -jar jflex-full-1.8.2.jar lexer.flex

import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java.io.File;
import java.io.IOException;
import pacioli.PacioliException;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRINGSEQ = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\12\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\0\1\31\3\10"+
    "\1\32\15\10\1\33\1\10\1\34\6\10\1\35\1\36"+
    "\1\37\1\40\1\41\1\0\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\2\10\1\53\1\54"+
    "\1\55\1\56\1\57\1\10\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\10\1\70\1\71\1\72"+
    "\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\14\5\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\0\1\37\1\2\5\0\1\40\2\0"+
    "\1\41\1\42\1\43\1\44\1\0\1\45\1\46\1\47"+
    "\1\50\3\5\1\51\3\5\1\52\1\5\1\53\1\5"+
    "\1\54\1\5\1\55\6\5\1\56\1\57\1\60\1\61"+
    "\1\62\3\0\1\63\1\0\1\64\1\65\2\0\1\66"+
    "\1\67\1\70\1\71\1\72\4\5\1\73\4\5\1\74"+
    "\1\75\5\5\1\76\1\77\1\100\1\101\1\0\10\5"+
    "\1\102\5\5\1\103\1\104\1\5\1\105\7\5\1\0"+
    "\7\5\1\106\4\5\1\107\3\5\1\0\3\5\1\110"+
    "\1\5\1\111\1\112\1\113\1\5\1\114\2\5\1\115"+
    "\1\116\1\117\3\5\1\120\1\121\1\122\2\5\1\123"+
    "\1\124\1\125\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\166\0\261\0\354\0\166\0\u0127"+
    "\0\u0162\0\166\0\u019d\0\166\0\166\0\166\0\166\0\166"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\166\0\u02c4\0\u02ff\0\u033a"+
    "\0\166\0\166\0\166\0\166\0\u0375\0\u03b0\0\u03eb\0\u0426"+
    "\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe"+
    "\0\u0639\0\166\0\166\0\166\0\u0674\0\166\0\u06af\0\u06ea"+
    "\0\166\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\166"+
    "\0\u0887\0\u08c2\0\166\0\166\0\166\0\u08fd\0\u0938\0\166"+
    "\0\166\0\166\0\166\0\u0973\0\u09ae\0\u09e9\0\u0162\0\u0a24"+
    "\0\u0a5f\0\u0a9a\0\u0162\0\u0ad5\0\u0162\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\u0162\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\166"+
    "\0\166\0\166\0\166\0\166\0\u0d23\0\u0d5e\0\u0d99\0\166"+
    "\0\u0dd4\0\166\0\166\0\u0e0f\0\u0e4a\0\u08c2\0\166\0\166"+
    "\0\166\0\u0162\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0162\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\u1022\0\u0162\0\u0162\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\166\0\166\0\166\0\166\0\u1184\0\u11bf"+
    "\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397"+
    "\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u0162\0\u0162\0\u14f9"+
    "\0\u0162\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696"+
    "\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e"+
    "\0\u0162\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u0162\0\u1995\0\u19d0"+
    "\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u0162\0\u1b32\0\u0162"+
    "\0\u0162\0\u0162\0\u1b6d\0\u0162\0\u1ba8\0\u1be3\0\u0162\0\u0162"+
    "\0\166\0\u1c1e\0\u1c59\0\u1c94\0\u0162\0\u0162\0\u0162\0\u1ccf"+
    "\0\u1d0a\0\u0162\0\u0162\0\u0162\0\u0162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\4\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\3\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\3\11\1\32\1\33\1\34\1\35\1\11\1\36"+
    "\1\37\1\11\1\40\1\41\1\42\2\11\1\43\1\44"+
    "\2\11\1\45\1\46\1\47\1\11\1\50\2\11\1\51"+
    "\2\11\1\52\1\53\1\54\6\55\1\56\27\55\1\57"+
    "\34\55\75\0\1\60\117\0\1\61\43\0\2\10\1\4"+
    "\1\62\67\10\10\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\27\11\20\0\1\63\3\0\1\64\1\65\13\0"+
    "\1\66\1\0\1\67\62\0\1\70\57\0\1\71\76\0"+
    "\1\72\1\0\1\23\73\0\1\73\2\0\1\74\63\0"+
    "\1\75\6\0\1\76\72\0\1\77\72\0\1\100\75\0"+
    "\1\101\1\102\1\103\46\0\1\11\12\0\1\11\6\0"+
    "\3\11\4\0\14\11\1\104\12\11\13\0\1\11\12\0"+
    "\1\11\6\0\3\11\4\0\5\11\1\105\21\11\13\0"+
    "\1\11\12\0\1\11\6\0\3\11\4\0\5\11\1\106"+
    "\7\11\1\107\11\11\13\0\1\11\12\0\1\11\6\0"+
    "\3\11\4\0\12\11\1\110\1\11\1\111\12\11\13\0"+
    "\1\11\12\0\1\11\6\0\3\11\4\0\1\11\1\112"+
    "\12\11\1\113\1\114\11\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\6\11\1\115\4\11\1\116\1\117"+
    "\12\11\13\0\1\11\12\0\1\11\6\0\3\11\4\0"+
    "\5\11\1\120\21\11\13\0\1\11\12\0\1\11\6\0"+
    "\3\11\4\0\17\11\1\121\7\11\13\0\1\11\12\0"+
    "\1\11\6\0\3\11\4\0\5\11\1\122\14\11\1\123"+
    "\4\11\13\0\1\11\12\0\1\11\6\0\3\11\4\0"+
    "\5\11\1\124\21\11\13\0\1\11\12\0\1\11\6\0"+
    "\3\11\4\0\10\11\1\125\6\11\1\126\7\11\13\0"+
    "\1\11\12\0\1\11\6\0\3\11\4\0\10\11\1\127"+
    "\16\11\3\0\6\55\1\0\27\55\1\0\34\55\6\0"+
    "\1\130\46\0\1\131\2\0\1\132\1\0\1\133\35\0"+
    "\1\4\47\0\1\4\102\0\1\134\6\0\1\135\66\0"+
    "\1\136\4\0\1\137\62\0\1\140\6\0\1\141\63\0"+
    "\1\142\72\0\1\143\60\0\15\144\1\145\55\144\23\0"+
    "\1\146\76\0\1\147\1\150\72\0\1\151\52\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\4\11\1\152\22\11"+
    "\13\0\1\11\12\0\1\11\6\0\3\11\4\0\7\11"+
    "\1\153\17\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\3\11\1\154\2\11\1\155\20\11\13\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\20\11\1\156\6\11"+
    "\13\0\1\11\12\0\1\11\6\0\3\11\4\0\4\11"+
    "\1\157\22\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\12\11\1\160\14\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\17\11\1\161\7\11\13\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\16\11\1\162\10\11"+
    "\13\0\1\11\12\0\1\11\6\0\3\11\4\0\3\11"+
    "\1\163\23\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\21\11\1\164\5\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\17\11\1\165\7\11\13\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\2\11\1\166\24\11"+
    "\13\0\1\11\12\0\1\11\6\0\3\11\4\0\21\11"+
    "\1\167\5\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\5\11\1\170\21\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\22\11\1\171\4\11\13\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\11\11\1\172\15\11"+
    "\15\0\1\173\72\0\1\174\72\0\1\175\72\0\1\176"+
    "\60\0\15\144\1\177\55\144\15\0\1\145\4\0\1\4"+
    "\60\0\1\11\12\0\1\11\6\0\3\11\4\0\11\11"+
    "\1\200\15\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\12\11\1\201\14\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\1\11\1\202\1\11\1\203\5\11"+
    "\1\204\1\11\1\205\5\11\1\206\1\207\4\11\13\0"+
    "\1\11\12\0\1\11\6\0\3\11\4\0\5\11\1\210"+
    "\21\11\13\0\1\11\12\0\1\11\6\0\3\11\4\0"+
    "\20\11\1\171\6\11\13\0\1\11\12\0\1\11\6\0"+
    "\3\11\4\0\1\211\26\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\15\11\1\212\11\11\13\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\12\11\1\213\14\11"+
    "\13\0\1\11\12\0\1\11\6\0\3\11\4\0\12\11"+
    "\1\214\14\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\22\11\1\215\4\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\14\11\1\216\12\11\13\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\5\11\1\217\21\11"+
    "\13\0\1\11\12\0\1\11\6\0\3\11\4\0\12\11"+
    "\1\220\14\11\3\0\15\144\1\177\4\144\1\4\50\144"+
    "\10\0\1\11\12\0\1\11\6\0\3\11\4\0\14\11"+
    "\1\221\12\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\1\11\1\222\25\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\12\11\1\223\14\11\13\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\15\11\1\224\11\11"+
    "\13\0\1\11\12\0\1\11\6\0\3\11\4\0\14\11"+
    "\1\225\12\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\1\11\1\226\25\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\26\11\1\227\13\0\1\11\12\0"+
    "\1\11\6\0\3\11\4\0\14\11\1\230\12\11\7\0"+
    "\1\231\3\0\1\11\12\0\1\11\6\0\3\11\4\0"+
    "\27\11\13\0\1\11\12\0\1\11\6\0\3\11\4\0"+
    "\11\11\1\232\7\11\1\233\1\234\4\11\13\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\17\11\1\235\7\11"+
    "\13\0\1\11\12\0\1\11\6\0\3\11\4\0\22\11"+
    "\1\236\4\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\11\11\1\237\15\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\17\11\1\240\7\11\13\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\5\11\1\241\21\11"+
    "\13\0\1\11\12\0\1\11\6\0\3\11\4\0\17\11"+
    "\1\242\7\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\11\11\1\243\15\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\14\11\1\244\12\11\13\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\4\11\1\245\1\246"+
    "\21\11\13\0\1\11\12\0\1\11\6\0\3\11\4\0"+
    "\21\11\1\247\5\11\13\0\1\11\12\0\1\11\6\0"+
    "\3\11\4\0\16\11\1\250\10\11\13\0\1\11\12\0"+
    "\1\11\6\0\3\11\4\0\11\11\1\251\15\11\55\0"+
    "\1\252\30\0\1\11\12\0\1\11\6\0\3\11\4\0"+
    "\14\11\1\253\12\11\13\0\1\11\12\0\1\11\6\0"+
    "\3\11\4\0\26\11\1\254\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\14\11\1\255\12\11\13\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\21\11\1\256\5\11"+
    "\13\0\1\11\12\0\1\11\6\0\3\11\4\0\4\11"+
    "\1\257\22\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\3\11\1\260\23\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\14\11\1\261\12\11\13\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\5\11\1\262\21\11"+
    "\13\0\1\11\12\0\1\11\6\0\3\11\4\0\1\11"+
    "\1\263\25\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\23\11\1\264\3\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\5\11\1\265\21\11\13\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\17\11\1\266\7\11"+
    "\13\0\1\11\12\0\1\11\6\0\3\11\4\0\5\11"+
    "\1\267\21\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\21\11\1\270\5\11\52\0\1\271\33\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\4\11\1\272\22\11"+
    "\13\0\1\11\12\0\1\11\6\0\3\11\4\0\16\11"+
    "\1\273\10\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\11\11\1\274\15\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\5\11\1\275\21\11\13\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\20\11\1\276\6\11"+
    "\13\0\1\11\12\0\1\11\6\0\3\11\4\0\25\11"+
    "\1\277\1\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\11\11\1\300\15\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\5\11\1\301\21\11\13\0\1\11"+
    "\12\0\1\11\6\0\3\11\4\0\5\11\1\302\21\11"+
    "\13\0\1\11\12\0\1\11\6\0\3\11\4\0\21\11"+
    "\1\303\5\11\13\0\1\11\12\0\1\11\6\0\3\11"+
    "\4\0\25\11\1\304\1\11\13\0\1\11\12\0\1\11"+
    "\6\0\3\11\4\0\25\11\1\305\1\11\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7493];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\2\1\1\11\2\1\1\11\1\1\5\11"+
    "\4\1\1\11\3\1\4\11\15\1\3\11\1\1\1\11"+
    "\1\1\1\0\1\11\1\1\5\0\1\11\2\0\3\11"+
    "\1\1\1\0\4\11\24\1\5\11\3\0\1\11\1\0"+
    "\2\11\2\0\1\1\3\11\21\1\4\11\1\0\31\1"+
    "\1\0\20\1\1\0\16\1\1\11\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    public Lexer(java.io.Reader in, ComplexSymbolFactory sf, File file, String source){
	this(in);
	symbolFactory = sf;
        this.file = file;
        this.source = source;
    }
    File file;
    String source;
    ComplexSymbolFactory symbolFactory;

  private Symbol symbol(String name, int sym) {
      //return symbolFactory.newSymbol(name, sym, new Location(yyline+1,yycolumn+1,(int)(long)(int)(long)yychar), new Location(yyline+1,yycolumn+yylength(),(int)(long)(int)(long)yychar+yylength()));
      return symbolFactory.newSymbol(name, sym, new Location(yyline, yycolumn, (int)(long)yychar), new Location(yyline, yycolumn+yylength(), (int)(long)yychar+yylength()));
  }

  private Symbol symbol(String name, int sym, Object val) {
      Location left = new Location(yyline, yycolumn, (int)(long)yychar);
      Location right= new Location(yyline, yycolumn+yylength(), (int)(long)yychar+yylength());
      return symbolFactory.newSymbol(name, sym, left, right,val);
  }
  
  // Seems wrong. The right line can be on a lower line in a string!
  private Symbol symbol(String name, int sym, Object val,int buflength) {
      Location left = new Location(yyline, yycolumn+yylength()-buflength, (int)(long)yychar+yylength()-buflength);
      Location right= new Location(yyline, yycolumn+yylength(), (int)(long)yychar+yylength());
      return symbolFactory.newSymbol(name, sym, left, right,val);
  }
  private void error(String message) {
    //pacioli.Location errorLocation = new pacioli.Location(file, source, (int)(long)(int)(long)yychar, (int)(long)(int)(long)yychar+yylength());
    pacioli.Location from = new pacioli.Location(file, yyline, yycolumn, (int)(long)(int)(long)yychar);
    pacioli.Location to = new pacioli.Location(file, yyline, yycolumn+yylength(), (int)(long)(int)(long)yychar+yylength());
    pacioli.Location errorLocation = from.join(to);
    throw new RuntimeException("Parse error", new PacioliException(errorLocation, message));
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {      return symbolFactory.newSymbol("EOF", EOF, new Location(yyline, yycolumn, (int)(long)(int)(long)yychar), new Location(yyline, yycolumn, (int)(long)(int)(long)yychar));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* throw new Error("Illegal character <"+ yytext()+">");*/
		    error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 87: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 88: break;
          case 3:
            { return symbol("excl", EXCL);
            }
            // fall through
          case 89: break;
          case 4:
            { string.setLength(0); yybegin(STRINGSEQ);
            }
            // fall through
          case 90: break;
          case 5:
            { return symbol("Identifier",IDENTIFIER, yytext());
            }
            // fall through
          case 91: break;
          case 6:
            { return symbol("mod", MOD);
            }
            // fall through
          case 92: break;
          case 7:
            { return symbol("(",LPAR);
            }
            // fall through
          case 93: break;
          case 8:
            { return symbol(")",RPAR);
            }
            // fall through
          case 94: break;
          case 9:
            { return symbol("mult", MULT);
            }
            // fall through
          case 95: break;
          case 10:
            { return symbol("plus", PLUS);
            }
            // fall through
          case 96: break;
          case 11:
            { return symbol("comma",COMMA);
            }
            // fall through
          case 97: break;
          case 12:
            { return symbol("neg", NEG, NEG);
            }
            // fall through
          case 98: break;
          case 13:
            { return symbol("div", DIV);
            }
            // fall through
          case 99: break;
          case 14:
            { return symbol("Natural", NATURAL, yytext());
            }
            // fall through
          case 100: break;
          case 15:
            { return symbol("colon",COLON);
            }
            // fall through
          case 101: break;
          case 16:
            { return symbol("semicolon",SEMICOLON);
            }
            // fall through
          case 102: break;
          case 17:
            { return symbol("le", LE);
            }
            // fall through
          case 103: break;
          case 18:
            { return symbol("eql", EQL, EQL);
            }
            // fall through
          case 104: break;
          case 19:
            { return symbol("gt", GT);
            }
            // fall through
          case 105: break;
          case 20:
            { return symbol("@", AT);
            }
            // fall through
          case 106: break;
          case 21:
            { return symbol("{",LBRACK);
            }
            // fall through
          case 107: break;
          case 22:
            { return symbol("leftdiv", LEFTDIV);
            }
            // fall through
          case 108: break;
          case 23:
            { return symbol("}",RBRACK);
            }
            // fall through
          case 109: break;
          case 24:
            { return symbol("hat", HAT, HAT);
            }
            // fall through
          case 110: break;
          case 25:
            { return symbol("{",LBRC);
            }
            // fall through
          case 111: break;
          case 26:
            { return symbol("|",PIPE);
            }
            // fall through
          case 112: break;
          case 27:
            { return symbol("}",RBRC);
            }
            // fall through
          case 113: break;
          case 28:
            { string.append(yytext());
            }
            // fall through
          case 114: break;
          case 29:
            { yybegin(YYINITIAL); 
                    return symbol("String", STRING, string.toString(), string.length());
            }
            // fall through
          case 115: break;
          case 30:
            { string.append('\\');
            }
            // fall through
          case 116: break;
          case 31:
            { return symbol("neq", NEQ);
            }
            // fall through
          case 117: break;
          case 32:
            { return symbol("to", TO, TO);
            }
            // fall through
          case 118: break;
          case 33:
            { return symbol("dblcln",DBLCLN);
            }
            // fall through
          case 119: break;
          case 34:
            { return symbol(":=",ASSIGN);
            }
            // fall through
          case 120: break;
          case 35:
            { return symbol("<-",FROM);
            }
            // fall through
          case 121: break;
          case 36:
            { return symbol("leq", LEQ);
            }
            // fall through
          case 122: break;
          case 37:
            { return symbol("gtq", GTQ);
            }
            // fall through
          case 123: break;
          case 38:
            { return symbol("diminv", DIMINV);
            }
            // fall through
          case 124: break;
          case 39:
            { return symbol("reci", RECI);
            }
            // fall through
          case 125: break;
          case 40:
            { return symbol("trans", TRANS);
            }
            // fall through
          case 126: break;
          case 41:
            { return symbol("do",DO);
            }
            // fall through
          case 127: break;
          case 42:
            { return symbol("fn",FN);
            }
            // fall through
          case 128: break;
          case 43:
            { return symbol("if",IF);
            }
            // fall through
          case 129: break;
          case 44:
            { return symbol("in",IN);
            }
            // fall through
          case 130: break;
          case 45:
            { return symbol("or", OR);
            }
            // fall through
          case 131: break;
          case 46:
            { string.append('\"');
            }
            // fall through
          case 132: break;
          case 47:
            { string.append('\n');
            }
            // fall through
          case 133: break;
          case 48:
            { string.append('\r');
            }
            // fall through
          case 134: break;
          case 49:
            { string.append('\t');
            }
            // fall through
          case 135: break;
          case 50:
            { return symbol("mmult", MMULT);
            }
            // fall through
          case 136: break;
          case 51:
            { return symbol("mdiv", MDIV);
            }
            // fall through
          case 137: break;
          case 52:
            { return symbol("mleftdiv", MLEFTDIV);
            }
            // fall through
          case 138: break;
          case 53:
            { return symbol("mexpt", MEXPT);
            }
            // fall through
          case 139: break;
          case 54:
            { return symbol("Decimal", DECIMAL, yytext());
            }
            // fall through
          case 140: break;
          case 55:
            { return symbol("followsfrom", FOLLOWSFROM);
            }
            // fall through
          case 141: break;
          case 56:
            { return symbol("equiv", EQUIV);
            }
            // fall through
          case 142: break;
          case 57:
            { return symbol("implies", IMPLIES);
            }
            // fall through
          case 143: break;
          case 58:
            { return symbol("and", AND);
            }
            // fall through
          case 144: break;
          case 59:
            { return symbol("end",END);
            }
            // fall through
          case 145: break;
          case 60:
            { return symbol("let",LET);
            }
            // fall through
          case 146: break;
          case 61:
            { return symbol("per",PER);
            }
            // fall through
          case 147: break;
          case 62:
            { return symbol("rscale", RSCALE);
            }
            // fall through
          case 148: break;
          case 63:
            { return symbol("lscale", LSCALE);
            }
            // fall through
          case 149: break;
          case 64:
            { return symbol("lscaledown", LSCALEDOWN);
            }
            // fall through
          case 150: break;
          case 65:
            { return symbol("rscaledown",RSCALEDOWN);
            }
            // fall through
          case 151: break;
          case 66:
            { return symbol("else",ELSE);
            }
            // fall through
          case 152: break;
          case 67:
            { return symbol("then",THEN);
            }
            // fall through
          case 153: break;
          case 68:
            { return symbol("Boolean", BOOLEAN, yytext());
            }
            // fall through
          case 154: break;
          case 69:
            { return symbol("begin",BEGIN);
            }
            // fall through
          case 155: break;
          case 70:
            { return symbol("while",WHILE);
            }
            // fall through
          case 156: break;
          case 71:
            { return symbol("define",DEFINE);
            }
            // fall through
          case 157: break;
          case 72:
            { return symbol("import",IMPORT);
            }
            // fall through
          case 158: break;
          case 73:
            { return symbol("public", PUBLIC);
            }
            // fall through
          case 159: break;
          case 74:
            { return symbol("return",RETURN);
            }
            // fall through
          case 160: break;
          case 75:
            { return symbol("declare",DECLARE);
            }
            // fall through
          case 161: break;
          case 76:
            { return symbol("defconv",DEFCONV);
            }
            // fall through
          case 162: break;
          case 77:
            { return symbol("deftype",DEFTYPE);
            }
            // fall through
          case 163: break;
          case 78:
            { return symbol("defunit",DEFUNIT);
            }
            // fall through
          case 164: break;
          case 79:
            { return symbol("else if",ELSEIF);
            }
            // fall through
          case 165: break;
          case 80:
            { return symbol("include",INCLUDE);
            }
            // fall through
          case 166: break;
          case 81:
            { return symbol("defalias",DEFALIAS);
            }
            // fall through
          case 167: break;
          case 82:
            { return symbol("defindex",DEFINDEX);
            }
            // fall through
          case 168: break;
          case 83:
            { return symbol("for_type",FORTYPE);
            }
            // fall through
          case 169: break;
          case 84:
            { return symbol("for_unit",FORUNIT);
            }
            // fall through
          case 170: break;
          case 85:
            { return symbol("defmatrix",DEFMATRIX);
            }
            // fall through
          case 171: break;
          case 86:
            { return symbol("for_index",FORINDEX);
            }
            // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
