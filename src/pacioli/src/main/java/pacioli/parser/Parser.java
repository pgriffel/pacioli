
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pacioli.parser;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.List;
import java.util.HashMap;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.LinkedList;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import pacioli.PacioliException;
import pacioli.ast.*;
import pacioli.ast.definition.*;
import pacioli.ast.definition.UnitVectorDefinition.UnitDecl;
import pacioli.ast.expression.MatrixLiteralNode.ValueDecl;
import pacioli.ast.expression.*;
import pacioli.ast.expression.LetNode.BindingNode;
import pacioli.ast.unit.*;
import pacioli.types.ast.*;
import pacioli.TypeContext;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\006\000\002\003\002\000\002\004\005" +
    "\000\002\004\002\000\002\005\006\000\002\005\007\000" +
    "\002\005\007\000\002\005\004\000\002\005\010\000\002" +
    "\005\006\000\002\005\006\000\002\005\010\000\002\005" +
    "\005\000\002\005\007\000\002\005\010\000\002\005\006" +
    "\000\002\005\003\000\002\060\003\000\002\060\002\000" +
    "\002\033\003\000\002\033\003\000\002\033\005\000\002" +
    "\033\005\000\002\037\004\000\002\037\005\000\002\036" +
    "\005\000\002\036\007\000\002\034\004\000\002\034\005" +
    "\000\002\035\005\000\002\035\007\000\002\031\003\000" +
    "\002\031\004\000\002\032\003\000\002\032\004\000\002" +
    "\030\003\000\002\030\003\000\002\016\003\000\002\021" +
    "\003\000\002\021\005\000\002\023\004\000\002\023\004" +
    "\000\002\024\004\000\002\024\005\000\002\020\003\000" +
    "\002\017\003\000\002\017\003\000\002\022\003\000\002" +
    "\022\005\000\002\014\003\000\002\014\005\000\002\015" +
    "\004\000\002\015\005\000\002\006\003\000\002\006\003" +
    "\000\002\007\004\000\002\007\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\004\000\002\007\006\000\002\007\007\000\002\007" +
    "\004\000\002\007\003\000\002\007\003\000\002\007\005" +
    "\000\002\007\005\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\007\000\002" +
    "\010\005\000\002\050\005\000\002\050\007\000\002\011" +
    "\006\000\002\011\006\000\002\011\007\000\002\012\005" +
    "\000\002\012\004\000\002\055\003\000\002\054\003\000" +
    "\002\054\004\000\002\056\006\000\002\056\006\000\002" +
    "\056\005\000\002\056\005\000\002\056\004\000\002\056" +
    "\007\000\002\056\007\000\002\057\007\000\002\057\005" +
    "\000\002\057\003\000\002\013\004\000\002\013\005\000" +
    "\002\051\007\000\002\051\010\000\002\052\003\000\002" +
    "\052\005\000\002\053\002\000\002\053\003\000\002\053" +
    "\005\000\002\053\005\000\002\043\006\000\002\043\006" +
    "\000\002\043\006\000\002\043\003\000\002\047\003\000" +
    "\002\047\005\000\002\046\003\000\002\046\005\000\002" +
    "\044\003\000\002\044\005\000\002\045\004\000\002\045" +
    "\005\000\002\040\005\000\002\040\005\000\002\040\004" +
    "\000\002\040\003\000\002\041\003\000\002\041\005\000" +
    "\002\042\005\000\002\042\005\000\002\042\005\000\002" +
    "\042\005\000\002\042\003\000\002\042\005\000\002\042" +
    "\004\000\002\042\005\000\002\042\003\000\002\026\003" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\027\005\000\002\027\003\000\002\027\005\000\002" +
    "\027\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016d\000\062\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\017\ufffd\022\ufffd\033\ufffd\037\ufffd\050\ufffd\054\ufffd\056" +
    "\ufffd\065\ufffd\114\ufffd\115\ufffd\116\ufffd\117\ufffd\120\ufffd" +
    "\001\002\000\004\002\u016f\001\002\000\062\002\ufffb\004" +
    "\010\005\007\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\017\ufffb\022\ufffb\033\ufffb\037" +
    "\ufffb\050\ufffb\054\ufffb\056\ufffb\065\ufffb\114\ufffb\115\ufffb" +
    "\116\ufffb\117\ufffb\120\ufffb\001\002\000\056\002\001\006" +
    "\026\007\056\010\035\011\044\012\055\013\054\014\045" +
    "\015\041\017\036\022\040\033\051\037\027\050\057\054" +
    "\033\056\022\065\024\114\042\115\023\116\031\117\034" +
    "\120\043\001\002\000\006\117\012\120\011\001\002\000" +
    "\006\117\012\120\011\001\002\000\006\045\uffeb\061\uffeb" +
    "\001\002\000\006\045\uffea\061\uffea\001\002\000\006\045" +
    "\014\061\015\001\002\000\062\002\uffff\004\uffff\005\uffff" +
    "\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014" +
    "\uffff\015\uffff\017\uffff\022\uffff\033\uffff\037\uffff\050\uffff" +
    "\054\uffff\056\uffff\065\uffff\114\uffff\115\uffff\116\uffff\117" +
    "\uffff\120\uffff\001\002\000\006\117\017\120\016\001\002" +
    "\000\006\045\uffe9\061\uffe9\001\002\000\006\045\uffe8\061" +
    "\uffe8\001\002\000\006\045\021\061\015\001\002\000\062" +
    "\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\017\ufffe\022\ufffe" +
    "\033\ufffe\037\ufffe\050\ufffe\054\ufffe\056\ufffe\065\ufffe\114" +
    "\ufffe\115\ufffe\116\ufffe\117\ufffe\120\ufffe\001\002\000\006" +
    "\115\226\117\227\001\002\000\132\020\uffda\021\uffda\023" +
    "\uffda\025\uffda\026\uffda\031\uffda\032\uffda\034\uffda\035\uffda" +
    "\045\uffda\047\uffda\050\uffda\051\uffda\053\uffda\055\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\063\uffda\064\uffda\065\uffda" +
    "\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda\074" +
    "\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda\102\uffda" +
    "\103\uffda\104\uffda\105\uffda\106\uffda\107\uffda\110\uffda\111" +
    "\uffda\112\uffda\113\uffda\001\002\000\034\017\036\022\040" +
    "\033\051\037\027\050\057\054\033\056\022\065\024\114" +
    "\042\115\023\116\031\117\034\120\043\001\002\000\100" +
    "\034\136\045\uffee\050\135\057\104\060\122\061\124\063" +
    "\101\064\111\065\106\066\113\067\102\070\133\071\112" +
    "\072\127\073\121\074\131\075\126\076\130\077\114\100" +
    "\123\101\105\102\134\103\125\104\120\105\117\106\132" +
    "\107\110\110\077\111\107\112\115\113\116\001\002\000" +
    "\004\117\034\001\002\000\004\050\u0105\001\002\000\004" +
    "\045\u0162\001\002\000\132\020\uffdb\021\uffdb\023\uffdb\025" +
    "\uffdb\026\uffdb\031\uffdb\032\uffdb\034\uffdb\035\uffdb\045\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\053\uffdb\055\uffdb\056\uffdb\057" +
    "\uffdb\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb" +
    "\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075" +
    "\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103\uffdb" +
    "\104\uffdb\105\uffdb\106\uffdb\107\uffdb\110\uffdb\111\uffdb\112" +
    "\uffdb\113\uffdb\001\002\000\130\020\uff9e\021\uff9e\023\uff9e" +
    "\025\uff9e\026\uff9e\031\uff9e\032\uff9e\034\uff9e\035\uff9e\045" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\055\uff9e\056\uff9e\057\uff9e" +
    "\060\uff9e\061\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067" +
    "\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e" +
    "\076\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e\104" +
    "\uff9e\105\uff9e\106\uff9e\107\uff9e\110\uff9e\111\uff9e\112\uff9e" +
    "\113\uff9e\001\002\000\036\017\036\022\040\033\051\037" +
    "\027\050\057\054\033\055\u015b\056\022\065\024\114\042" +
    "\115\023\116\031\117\034\120\043\001\002\000\150\020" +
    "\uffd9\021\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\034\uffd9\035\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9" +
    "\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100" +
    "\uffd9\101\uffd9\102\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9" +
    "\107\uffd9\110\uffd9\111\uffd9\112\uffd9\113\uffd9\001\002\000" +
    "\004\117\034\001\002\000\034\017\036\022\040\033\051" +
    "\037\027\050\057\054\033\056\022\065\024\114\042\115" +
    "\023\116\031\117\034\120\043\001\002\000\130\020\uffc6" +
    "\021\uffc6\023\uffc6\025\uffc6\026\uffc6\031\uffc6\032\uffc6\034" +
    "\uffc6\035\uffc6\045\uffc6\047\uffc6\050\uffc6\051\uffc6\055\uffc6" +
    "\056\uffc6\057\uffc6\060\uffc6\061\uffc6\063\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6" +
    "\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102" +
    "\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6" +
    "\111\uffc6\112\uffc6\113\uffc6\001\002\000\014\017\u0128\024" +
    "\u0124\036\u012b\050\u0105\117\034\001\002\000\004\117\034" +
    "\001\002\000\130\020\uff9d\021\uff9d\023\uff9d\025\uff9d\026" +
    "\uff9d\031\uff9d\032\uff9d\034\uff9d\035\uff9d\045\uff9d\047\uff9d" +
    "\050\uff9d\051\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077" +
    "\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d" +
    "\106\uff9d\107\uff9d\110\uff9d\111\uff9d\112\uff9d\113\uff9d\001" +
    "\002\000\132\020\uff9c\021\uff9c\023\uff9c\025\uff9c\026\uff9c" +
    "\031\uff9c\032\uff9c\034\uff9c\035\uff9c\043\uffd0\045\uff9c\047" +
    "\uff9c\050\uff9c\051\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c" +
    "\061\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070" +
    "\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c" +
    "\077\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c\105" +
    "\uff9c\106\uff9c\107\uff9c\110\uff9c\111\uff9c\112\uff9c\113\uff9c" +
    "\001\002\000\016\040\230\041\231\042\224\050\223\115" +
    "\226\117\227\001\002\000\004\117\034\001\002\000\130" +
    "\020\uffa3\021\uffa3\023\uffa3\025\uffa3\026\uffa3\031\uffa3\032" +
    "\uffa3\034\uffa3\035\uffa3\045\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\063\uffa3\064" +
    "\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3" +
    "\073\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\100\uffa3\101" +
    "\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3" +
    "\110\uffa3\111\uffa3\112\uffa3\113\uffa3\001\002\000\134\020" +
    "\uffc8\021\uffc8\023\uffc8\025\uffc8\026\uffc8\031\uffc8\032\uffc8" +
    "\034\uffc8\035\uffc8\043\uffd1\045\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\054\074\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8" +
    "\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071" +
    "\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8" +
    "\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106" +
    "\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8\113\uffc8\001\002" +
    "\000\132\020\uff9f\021\uff9f\023\uff9f\025\uff9f\026\uff9f\031" +
    "\uff9f\032\uff9f\034\uff9f\035\uff9f\045\uff9f\047\uff9f\050\uff9f" +
    "\051\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062" +
    "\u0117\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f" +
    "\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077" +
    "\uff9f\100\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f" +
    "\106\uff9f\107\uff9f\110\uff9f\111\uff9f\112\uff9f\113\uff9f\001" +
    "\002\000\006\050\u0105\117\034\001\002\000\130\020\uffc9" +
    "\021\uffc9\023\uffc9\025\uffc9\026\uffc9\031\uffc9\032\uffc9\034" +
    "\uffc9\035\uffc9\045\uffc9\047\uffc9\050\uffc9\051\uffc9\055\uffc9" +
    "\056\uffc9\057\uffc9\060\uffc9\061\uffc9\063\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9" +
    "\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102" +
    "\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9\110\uffc9" +
    "\111\uffc9\112\uffc9\113\uffc9\001\002\000\130\020\uffa2\021" +
    "\uffa2\023\uffa2\025\uffa2\026\uffa2\031\uffa2\032\uffa2\034\uffa2" +
    "\035\uffa2\045\uffa2\047\uffa2\050\uffa2\051\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\060\uffa2\061\uffa2\063\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074" +
    "\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2" +
    "\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\111" +
    "\uffa2\112\uffa2\113\uffa2\001\002\000\004\117\034\001\002" +
    "\000\004\117\313\001\002\000\006\016\214\117\uffec\001" +
    "\002\000\036\017\036\022\040\033\051\037\027\050\057" +
    "\051\071\054\033\056\022\065\024\114\042\115\023\116" +
    "\031\117\034\120\043\001\002\000\004\043\061\001\002" +
    "\000\006\117\034\120\062\001\002\000\142\020\uffd0\021" +
    "\uffd0\023\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\034\uffd0\035\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\053\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067" +
    "\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0" +
    "\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104" +
    "\uffd0\105\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0\112\uffd0" +
    "\113\uffd0\001\002\000\132\020\uff99\021\uff99\023\uff99\025" +
    "\uff99\026\uff99\031\uff99\032\uff99\034\uff99\035\uff99\045\uff99" +
    "\047\uff99\050\uff99\051\uff99\055\uff99\056\uff99\057\uff99\060" +
    "\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99" +
    "\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075" +
    "\uff99\076\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103\uff99" +
    "\104\uff99\105\uff99\106\uff99\107\uff99\110\uff99\111\uff99\112" +
    "\uff99\113\uff99\001\002\000\142\020\uffd1\021\uffd1\023\uffd1" +
    "\025\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1\034\uffd1\035" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\053\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1" +
    "\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077" +
    "\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1" +
    "\106\uffd1\107\uffd1\110\uffd1\111\uffd1\112\uffd1\113\uffd1\001" +
    "\002\000\076\034\136\050\135\057\104\060\122\061\124" +
    "\063\101\064\111\065\106\066\113\067\102\070\133\071" +
    "\112\072\127\073\121\074\131\075\126\076\130\077\114" +
    "\100\123\101\105\102\134\103\125\104\120\105\117\106" +
    "\132\107\110\110\077\111\107\112\115\113\116\001\002" +
    "\000\106\034\uffc8\043\uffd1\047\073\050\uffc8\051\075\054" +
    "\074\057\uffc8\060\uffc8\061\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074" +
    "\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8" +
    "\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8\111" +
    "\uffc8\112\uffc8\113\uffc8\001\002\000\100\034\uffc9\050\uffc9" +
    "\051\072\057\uffc9\060\uffc9\061\uffc9\063\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9" +
    "\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102" +
    "\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9\110\uffc9" +
    "\111\uffc9\112\uffc9\113\uffc9\001\002\000\154\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\025\uffd5\026\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5\045\uffd5\047" +
    "\uffd5\050\uffd5\051\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5" +
    "\060\uffd5\061\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5" +
    "\076\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104" +
    "\uffd5\105\uffd5\106\uffd5\107\uffd5\110\uffd5\111\uffd5\112\uffd5" +
    "\113\uffd5\114\uffd5\115\uffd5\116\uffd5\117\uffd5\120\uffd5\001" +
    "\002\000\154\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\025\uffd6\026\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\037\uffd6\045\uffd6\047\uffd6\050\uffd6\051\uffd6\054\uffd6" +
    "\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\063\uffd6\064" +
    "\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6" +
    "\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101" +
    "\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6" +
    "\110\uffd6\111\uffd6\112\uffd6\113\uffd6\114\uffd6\115\uffd6\116" +
    "\uffd6\117\uffd6\120\uffd6\001\002\000\130\020\uffc5\021\uffc5" +
    "\023\uffc5\025\uffc5\026\uffc5\031\uffc5\032\uffc5\034\uffc5\035" +
    "\uffc5\045\uffc5\047\uffc5\050\uffc5\051\uffc5\055\uffc5\056\uffc5" +
    "\057\uffc5\060\uffc5\061\uffc5\063\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5" +
    "\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103" +
    "\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5" +
    "\112\uffc5\113\uffc5\001\002\000\004\117\034\001\002\000" +
    "\034\017\036\022\040\033\051\037\027\050\057\054\033" +
    "\056\022\065\024\114\042\115\023\116\031\117\034\120" +
    "\043\001\002\000\154\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\025\uffd4\026\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\037\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\063" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4" +
    "\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100" +
    "\uffd4\101\uffd4\102\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4" +
    "\107\uffd4\110\uffd4\111\uffd4\112\uffd4\113\uffd4\114\uffd4\115" +
    "\uffd4\116\uffd4\117\uffd4\120\uffd4\001\002\000\100\034\136" +
    "\050\135\056\100\057\104\060\122\061\124\063\101\064" +
    "\111\065\106\066\113\067\102\070\133\071\112\072\127" +
    "\073\121\074\131\075\126\076\130\077\114\100\123\101" +
    "\105\102\134\103\125\104\120\105\117\106\132\107\110" +
    "\110\077\111\107\112\115\113\116\001\002\000\034\017" +
    "\036\022\040\033\051\037\027\050\057\054\033\056\022" +
    "\065\024\114\042\115\023\116\031\117\034\120\043\001" +
    "\002\000\040\017\036\022\040\033\051\037\027\047\uff7f" +
    "\050\057\054\033\055\uff7f\056\022\065\024\114\042\115" +
    "\023\116\031\117\034\120\043\001\002\000\034\017\036" +
    "\022\040\033\051\037\027\050\057\054\033\056\022\065" +
    "\024\114\042\115\023\116\031\117\034\120\043\001\002" +
    "\000\034\017\036\022\040\033\051\037\027\050\057\054" +
    "\033\056\022\065\024\114\042\115\023\116\031\117\034" +
    "\120\043\001\002\000\130\020\uffa7\021\uffa7\023\uffa7\025" +
    "\uffa7\026\uffa7\031\uffa7\032\uffa7\034\uffa7\035\uffa7\045\uffa7" +
    "\047\uffa7\050\uffa7\051\uffa7\055\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7" +
    "\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076" +
    "\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7" +
    "\105\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\112\uffa7\113" +
    "\uffa7\001\002\000\034\017\036\022\040\033\051\037\027" +
    "\050\057\054\033\056\022\065\024\114\042\115\023\116" +
    "\031\117\034\120\043\001\002\000\034\017\036\022\040" +
    "\033\051\037\027\050\057\054\033\056\022\065\024\114" +
    "\042\115\023\116\031\117\034\120\043\001\002\000\034" +
    "\017\036\022\040\033\051\037\027\050\057\054\033\056" +
    "\022\065\024\114\042\115\023\116\031\117\034\120\043" +
    "\001\002\000\034\017\036\022\040\033\051\037\027\050" +
    "\057\054\033\056\022\065\024\114\042\115\023\116\031" +
    "\117\034\120\043\001\002\000\034\017\036\022\040\033" +
    "\051\037\027\050\057\054\033\056\022\065\024\114\042" +
    "\115\023\116\031\117\034\120\043\001\002\000\034\017" +
    "\036\022\040\033\051\037\027\050\057\054\033\056\022" +
    "\065\024\114\042\115\023\116\031\117\034\120\043\001" +
    "\002\000\034\017\036\022\040\033\051\037\027\050\057" +
    "\054\033\056\022\065\024\114\042\115\023\116\031\117" +
    "\034\120\043\001\002\000\034\017\036\022\040\033\051" +
    "\037\027\050\057\054\033\056\022\065\024\114\042\115" +
    "\023\116\031\117\034\120\043\001\002\000\130\020\uffbe" +
    "\021\uffbe\023\uffbe\025\uffbe\026\uffbe\031\uffbe\032\uffbe\034" +
    "\uffbe\035\uffbe\045\uffbe\047\uffbe\050\uffbe\051\uffbe\055\uffbe" +
    "\056\uffbe\057\uffbe\060\uffbe\061\uffbe\063\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe" +
    "\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102" +
    "\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe" +
    "\111\uffbe\112\uffbe\113\uffbe\001\002\000\034\017\036\022" +
    "\040\033\051\037\027\050\057\054\033\056\022\065\024" +
    "\114\042\115\023\116\031\117\034\120\043\001\002\000" +
    "\034\017\036\022\040\033\051\037\027\050\057\054\033" +
    "\056\022\065\024\114\042\115\023\116\031\117\034\120" +
    "\043\001\002\000\034\017\036\022\040\033\051\037\027" +
    "\050\057\054\033\056\022\065\024\114\042\115\023\116" +
    "\031\117\034\120\043\001\002\000\034\017\036\022\040" +
    "\033\051\037\027\050\057\054\033\056\022\065\024\114" +
    "\042\115\023\116\031\117\034\120\043\001\002\000\034" +
    "\017\036\022\040\033\051\037\027\050\057\054\033\056" +
    "\022\065\024\114\042\115\023\116\031\117\034\120\043" +
    "\001\002\000\034\017\036\022\040\033\051\037\027\050" +
    "\057\054\033\056\022\065\024\114\042\115\023\116\031" +
    "\117\034\120\043\001\002\000\130\020\uffbf\021\uffbf\023" +
    "\uffbf\025\uffbf\026\uffbf\031\uffbf\032\uffbf\034\uffbf\035\uffbf" +
    "\045\uffbf\047\uffbf\050\uffbf\051\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf" +
    "\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075" +
    "\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf" +
    "\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111\uffbf\112" +
    "\uffbf\113\uffbf\001\002\000\034\017\036\022\040\033\051" +
    "\037\027\050\057\054\033\056\022\065\024\114\042\115" +
    "\023\116\031\117\034\120\043\001\002\000\034\017\036" +
    "\022\040\033\051\037\027\050\057\054\033\056\022\065" +
    "\024\114\042\115\023\116\031\117\034\120\043\001\002" +
    "\000\034\017\036\022\040\033\051\037\027\050\057\054" +
    "\033\056\022\065\024\114\042\115\023\116\031\117\034" +
    "\120\043\001\002\000\034\017\036\022\040\033\051\037" +
    "\027\050\057\054\033\056\022\065\024\114\042\115\023" +
    "\116\031\117\034\120\043\001\002\000\130\020\uffc0\021" +
    "\uffc0\023\uffc0\025\uffc0\026\uffc0\031\uffc0\032\uffc0\034\uffc0" +
    "\035\uffc0\045\uffc0\047\uffc0\050\uffc0\051\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\061\uffc0\063\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074" +
    "\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0" +
    "\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0\111" +
    "\uffc0\112\uffc0\113\uffc0\001\002\000\034\017\036\022\040" +
    "\033\051\037\027\050\057\054\033\056\022\065\024\114" +
    "\042\115\023\116\031\117\034\120\043\001\002\000\034" +
    "\017\036\022\040\033\051\037\027\050\057\054\033\056" +
    "\022\065\024\114\042\115\023\116\031\117\034\120\043" +
    "\001\002\000\034\017\036\022\040\033\051\037\027\050" +
    "\057\054\033\056\022\065\024\114\042\115\023\116\031" +
    "\117\034\120\043\001\002\000\034\017\036\022\040\033" +
    "\051\037\027\050\057\054\033\056\022\065\024\114\042" +
    "\115\023\116\031\117\034\120\043\001\002\000\036\017" +
    "\036\022\040\033\051\037\027\050\057\051\142\054\033" +
    "\056\022\065\024\114\042\115\023\116\031\117\034\120" +
    "\043\001\002\000\034\017\036\022\040\033\051\037\027" +
    "\050\057\054\033\056\022\065\024\114\042\115\023\116" +
    "\031\117\034\120\043\001\002\000\130\020\uffc2\021\uffc2" +
    "\023\uffc2\025\uffc2\026\uffc2\031\uffc2\032\uffc2\034\uffc2\035" +
    "\uffc2\045\uffc2\047\uffc2\050\135\051\uffc2\055\uffc2\056\uffc2" +
    "\057\uffc2\060\uffc2\061\uffc2\063\uffc2\064\111\065\uffc2\066" +
    "\uffc2\067\uffc2\070\133\071\uffc2\072\uffc2\073\uffc2\074\uffc2" +
    "\075\uffc2\076\130\077\114\100\123\101\uffc2\102\uffc2\103" +
    "\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2\111\uffc2" +
    "\112\uffc2\113\uffc2\001\002\000\102\034\136\047\uffcd\050" +
    "\135\051\uffcd\057\104\060\122\061\124\063\101\064\111" +
    "\065\106\066\113\067\102\070\133\071\112\072\127\073" +
    "\121\074\131\075\126\076\130\077\114\100\123\101\105" +
    "\102\134\103\125\104\120\105\117\106\132\107\110\110" +
    "\077\111\107\112\115\113\116\001\002\000\006\047\143" +
    "\051\144\001\002\000\130\020\uffcb\021\uffcb\023\uffcb\025" +
    "\uffcb\026\uffcb\031\uffcb\032\uffcb\034\uffcb\035\uffcb\045\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\055\uffcb\056\uffcb\057\uffcb\060" +
    "\uffcb\061\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb" +
    "\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076" +
    "\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb" +
    "\105\uffcb\106\uffcb\107\uffcb\110\uffcb\111\uffcb\112\uffcb\113" +
    "\uffcb\001\002\000\034\017\036\022\040\033\051\037\027" +
    "\050\057\054\033\056\022\065\024\114\042\115\023\116" +
    "\031\117\034\120\043\001\002\000\130\020\uffca\021\uffca" +
    "\023\uffca\025\uffca\026\uffca\031\uffca\032\uffca\034\uffca\035" +
    "\uffca\045\uffca\047\uffca\050\uffca\051\uffca\055\uffca\056\uffca" +
    "\057\uffca\060\uffca\061\uffca\063\uffca\064\uffca\065\uffca\066" +
    "\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca" +
    "\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca\102\uffca\103" +
    "\uffca\104\uffca\105\uffca\106\uffca\107\uffca\110\uffca\111\uffca" +
    "\112\uffca\113\uffca\001\002\000\104\034\136\047\uffcc\050" +
    "\135\051\uffcc\055\uffcc\057\104\060\122\061\124\063\101" +
    "\064\111\065\106\066\113\067\102\070\133\071\112\072" +
    "\127\073\121\074\131\075\126\076\130\077\114\100\123" +
    "\101\105\102\134\103\125\104\120\105\117\106\132\107" +
    "\110\110\077\111\107\112\115\113\116\001\002\000\114" +
    "\020\uffaf\021\uffaf\023\uffaf\025\uffaf\026\uffaf\031\uffaf\032" +
    "\uffaf\034\136\035\uffaf\045\uffaf\047\uffaf\050\135\051\uffaf" +
    "\055\uffaf\056\uffaf\057\104\060\122\061\124\063\101\064" +
    "\111\065\106\066\113\067\102\070\133\071\112\072\127" +
    "\073\121\074\131\075\126\076\130\077\114\100\123\103" +
    "\uffaf\110\uffaf\111\uffaf\112\uffaf\113\uffaf\001\002\000\130" +
    "\020\uffba\021\uffba\023\uffba\025\uffba\026\uffba\031\uffba\032" +
    "\uffba\034\uffba\035\uffba\045\uffba\047\uffba\050\135\051\uffba" +
    "\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\063\uffba\064" +
    "\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba" +
    "\073\uffba\074\uffba\075\uffba\076\130\077\114\100\123\101" +
    "\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\107\uffba" +
    "\110\uffba\111\uffba\112\uffba\113\uffba\001\002\000\114\020" +
    "\uffb1\021\uffb1\023\uffb1\025\uffb1\026\uffb1\031\uffb1\032\uffb1" +
    "\034\136\035\uffb1\045\uffb1\047\uffb1\050\135\051\uffb1\055" +
    "\uffb1\056\uffb1\057\104\060\122\061\124\063\101\064\111" +
    "\065\106\066\113\067\102\070\133\071\112\072\127\073" +
    "\121\074\131\075\126\076\130\077\114\100\123\103\uffb1" +
    "\110\uffb1\111\uffb1\112\uffb1\113\uffb1\001\002\000\130\020" +
    "\uffb3\021\uffb3\023\uffb3\025\uffb3\026\uffb3\031\uffb3\032\uffb3" +
    "\034\136\035\uffb3\045\uffb3\047\uffb3\050\135\051\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\063\uffb3\064\111" +
    "\065\uffb3\066\uffb3\067\uffb3\070\133\071\uffb3\072\uffb3\073" +
    "\uffb3\074\uffb3\075\uffb3\076\130\077\114\100\123\101\uffb3" +
    "\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110" +
    "\uffb3\111\uffb3\112\uffb3\113\uffb3\001\002\000\130\020\uffb2" +
    "\021\uffb2\023\uffb2\025\uffb2\026\uffb2\031\uffb2\032\uffb2\034" +
    "\136\035\uffb2\045\uffb2\047\uffb2\050\135\051\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\063\uffb2\064\111\065" +
    "\uffb2\066\uffb2\067\uffb2\070\133\071\uffb2\072\uffb2\073\uffb2" +
    "\074\uffb2\075\uffb2\076\130\077\114\100\123\101\uffb2\102" +
    "\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2" +
    "\111\uffb2\112\uffb2\113\uffb2\001\002\000\130\020\uffb5\021" +
    "\uffb5\023\uffb5\025\uffb5\026\uffb5\031\uffb5\032\uffb5\034\136" +
    "\035\uffb5\045\uffb5\047\uffb5\050\135\051\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\063\uffb5\064\111\065\uffb5" +
    "\066\uffb5\067\uffb5\070\133\071\uffb5\072\uffb5\073\uffb5\074" +
    "\uffb5\075\uffb5\076\130\077\114\100\123\101\uffb5\102\uffb5" +
    "\103\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111" +
    "\uffb5\112\uffb5\113\uffb5\001\002\000\122\020\uffaa\021\uffaa" +
    "\023\uffaa\025\uffaa\026\uffaa\031\uffaa\032\uffaa\034\136\035" +
    "\uffaa\045\uffaa\047\uffaa\050\135\051\uffaa\055\uffaa\056\uffaa" +
    "\057\104\060\122\061\124\063\101\064\111\065\106\066" +
    "\113\067\102\070\133\071\112\072\127\073\121\074\131" +
    "\075\126\076\130\077\114\100\123\101\105\102\134\104" +
    "\120\105\117\106\132\107\110\110\077\111\107\001\002" +
    "\000\130\020\uffb9\021\uffb9\023\uffb9\025\uffb9\026\uffb9\031" +
    "\uffb9\032\uffb9\034\136\035\uffb9\045\uffb9\047\uffb9\050\135" +
    "\051\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\063" +
    "\uffb9\064\111\065\uffb9\066\uffb9\067\uffb9\070\133\071\uffb9" +
    "\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\130\077\114\100" +
    "\123\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9" +
    "\107\uffb9\110\uffb9\111\uffb9\112\uffb9\113\uffb9\001\002\000" +
    "\130\020\uffbd\021\uffbd\023\uffbd\025\uffbd\026\uffbd\031\uffbd" +
    "\032\uffbd\034\136\035\uffbd\045\uffbd\047\uffbd\050\135\051" +
    "\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\063\uffbd" +
    "\064\111\065\uffbd\066\uffbd\067\uffbd\070\133\071\uffbd\072" +
    "\uffbd\073\uffbd\074\uffbd\075\uffbd\076\130\077\114\100\123" +
    "\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd\107" +
    "\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd\001\002\000\130" +
    "\020\uffb4\021\uffb4\023\uffb4\025\uffb4\026\uffb4\031\uffb4\032" +
    "\uffb4\034\136\035\uffb4\045\uffb4\047\uffb4\050\135\051\uffb4" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\063\uffb4\064" +
    "\111\065\uffb4\066\uffb4\067\uffb4\070\133\071\uffb4\072\uffb4" +
    "\073\uffb4\074\uffb4\075\uffb4\076\130\077\114\100\123\101" +
    "\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4\106\uffb4\107\uffb4" +
    "\110\uffb4\111\uffb4\112\uffb4\113\uffb4\001\002\000\114\020" +
    "\uffae\021\uffae\023\uffae\025\uffae\026\uffae\031\uffae\032\uffae" +
    "\034\136\035\uffae\045\uffae\047\uffae\050\135\051\uffae\055" +
    "\uffae\056\uffae\057\104\060\122\061\124\063\101\064\111" +
    "\065\106\066\113\067\102\070\133\071\112\072\127\073" +
    "\121\074\131\075\126\076\130\077\114\100\123\103\uffae" +
    "\110\uffae\111\uffae\112\uffae\113\uffae\001\002\000\114\020" +
    "\uffad\021\uffad\023\uffad\025\uffad\026\uffad\031\uffad\032\uffad" +
    "\034\136\035\uffad\045\uffad\047\uffad\050\135\051\uffad\055" +
    "\uffad\056\uffad\057\104\060\122\061\124\063\101\064\111" +
    "\065\106\066\113\067\102\070\133\071\112\072\127\073" +
    "\121\074\131\075\126\076\130\077\114\100\123\103\uffad" +
    "\110\uffad\111\uffad\112\uffad\113\uffad\001\002\000\122\020" +
    "\uffac\021\uffac\023\uffac\025\uffac\026\uffac\031\uffac\032\uffac" +
    "\034\136\035\uffac\045\uffac\047\uffac\050\135\051\uffac\055" +
    "\uffac\056\uffac\057\104\060\122\061\124\063\101\064\111" +
    "\065\106\066\113\067\102\070\133\071\112\072\127\073" +
    "\121\074\131\075\126\076\130\077\114\100\123\101\105" +
    "\102\134\104\120\105\117\106\132\107\110\110\077\111" +
    "\107\001\002\000\122\020\uffab\021\uffab\023\uffab\025\uffab" +
    "\026\uffab\031\uffab\032\uffab\034\136\035\uffab\045\uffab\047" +
    "\uffab\050\135\051\uffab\055\uffab\056\uffab\057\104\060\122" +
    "\061\124\063\101\064\111\065\106\066\113\067\102\070" +
    "\133\071\112\072\127\073\121\074\131\075\126\076\130" +
    "\077\114\100\123\101\105\102\134\104\120\105\117\106" +
    "\132\107\110\110\077\111\107\001\002\000\130\020\uffb7" +
    "\021\uffb7\023\uffb7\025\uffb7\026\uffb7\031\uffb7\032\uffb7\034" +
    "\136\035\uffb7\045\uffb7\047\uffb7\050\135\051\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\060\uffb7\061\uffb7\063\uffb7\064\111\065" +
    "\uffb7\066\uffb7\067\uffb7\070\133\071\uffb7\072\uffb7\073\uffb7" +
    "\074\uffb7\075\uffb7\076\130\077\114\100\123\101\uffb7\102" +
    "\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7" +
    "\111\uffb7\112\uffb7\113\uffb7\001\002\000\130\020\uffb6\021" +
    "\uffb6\023\uffb6\025\uffb6\026\uffb6\031\uffb6\032\uffb6\034\136" +
    "\035\uffb6\045\uffb6\047\uffb6\050\135\051\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\063\uffb6\064\111\065\uffb6" +
    "\066\uffb6\067\uffb6\070\133\071\uffb6\072\uffb6\073\uffb6\074" +
    "\uffb6\075\uffb6\076\130\077\114\100\123\101\uffb6\102\uffb6" +
    "\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6\111" +
    "\uffb6\112\uffb6\113\uffb6\001\002\000\130\020\uffc3\021\uffc3" +
    "\023\uffc3\025\uffc3\026\uffc3\031\uffc3\032\uffc3\034\uffc3\035" +
    "\uffc3\045\uffc3\047\uffc3\050\135\051\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\063\uffc3\064\uffc3\065\uffc3\066" +
    "\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3" +
    "\075\uffc3\076\130\077\114\100\123\101\uffc3\102\uffc3\103" +
    "\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3" +
    "\112\uffc3\113\uffc3\001\002\000\114\020\uffb0\021\uffb0\023" +
    "\uffb0\025\uffb0\026\uffb0\031\uffb0\032\uffb0\034\136\035\uffb0" +
    "\045\uffb0\047\uffb0\050\135\051\uffb0\055\uffb0\056\uffb0\057" +
    "\104\060\122\061\124\063\101\064\111\065\106\066\113" +
    "\067\102\070\133\071\112\072\127\073\121\074\131\075" +
    "\126\076\130\077\114\100\123\103\uffb0\110\uffb0\111\uffb0" +
    "\112\uffb0\113\uffb0\001\002\000\130\020\uffa8\021\uffa8\023" +
    "\uffa8\025\uffa8\026\uffa8\031\uffa8\032\uffa8\034\136\035\uffa8" +
    "\045\uffa8\047\uffa8\050\135\051\uffa8\055\uffa8\056\uffa8\057" +
    "\104\060\122\061\124\063\101\064\111\065\106\066\113" +
    "\067\102\070\133\071\112\072\127\073\121\074\131\075" +
    "\126\076\130\077\114\100\123\101\105\102\134\103\uffa8" +
    "\104\120\105\117\106\132\107\110\110\uffa8\111\uffa8\112" +
    "\uffa8\113\uffa8\001\002\000\130\020\uffc4\021\uffc4\023\uffc4" +
    "\025\uffc4\026\uffc4\031\uffc4\032\uffc4\034\136\035\uffc4\045" +
    "\uffc4\047\uffc4\050\135\051\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\060\122\061\124\063\101\064\111\065\uffc4\066\113\067" +
    "\102\070\133\071\112\072\127\073\121\074\131\075\126" +
    "\076\130\077\114\100\123\101\uffc4\102\uffc4\103\uffc4\104" +
    "\uffc4\105\uffc4\106\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4" +
    "\113\uffc4\001\002\000\114\020\uffc1\021\uffc1\023\uffc1\025" +
    "\uffc1\026\uffc1\031\uffc1\032\uffc1\034\136\035\uffc1\045\uffc1" +
    "\047\uffc1\050\135\051\uffc1\055\uffc1\056\uffc1\057\104\060" +
    "\122\061\124\063\101\064\111\065\106\066\113\067\102" +
    "\070\133\071\112\072\127\073\121\074\131\075\126\076" +
    "\130\077\114\100\123\103\uffc1\110\uffc1\111\uffc1\112\uffc1" +
    "\113\uffc1\001\002\000\130\020\uffbc\021\uffbc\023\uffbc\025" +
    "\uffbc\026\uffbc\031\uffbc\032\uffbc\034\136\035\uffbc\045\uffbc" +
    "\047\uffbc\050\135\051\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\122\061\124\063\101\064\111\065\uffbc\066\113\067\102" +
    "\070\133\071\112\072\127\073\121\074\131\075\126\076" +
    "\130\077\114\100\123\101\uffbc\102\uffbc\103\uffbc\104\uffbc" +
    "\105\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112\uffbc\113" +
    "\uffbc\001\002\000\130\020\uffb8\021\uffb8\023\uffb8\025\uffb8" +
    "\026\uffb8\031\uffb8\032\uffb8\034\136\035\uffb8\045\uffb8\047" +
    "\uffb8\050\135\051\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8" +
    "\061\uffb8\063\uffb8\064\111\065\uffb8\066\uffb8\067\uffb8\070" +
    "\133\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\130" +
    "\077\114\100\123\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105" +
    "\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8" +
    "\001\002\000\130\020\uffbb\021\uffbb\023\uffbb\025\uffbb\026" +
    "\uffbb\031\uffbb\032\uffbb\034\136\035\uffbb\045\uffbb\047\uffbb" +
    "\050\135\051\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061" +
    "\uffbb\063\uffbb\064\111\065\uffbb\066\uffbb\067\uffbb\070\133" +
    "\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\130\077" +
    "\114\100\123\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb" +
    "\106\uffbb\107\uffbb\110\uffbb\111\uffbb\112\uffbb\113\uffbb\001" +
    "\002\000\106\026\205\031\204\034\136\047\uff7e\050\135" +
    "\055\uff7e\057\104\060\122\061\124\063\101\064\111\065" +
    "\106\066\113\067\102\070\133\071\112\072\127\073\121" +
    "\074\131\075\126\076\130\077\114\100\123\101\105\102" +
    "\134\103\125\104\120\105\117\106\132\107\110\110\077" +
    "\111\107\112\115\113\116\001\002\000\006\047\201\055" +
    "\202\001\002\000\006\047\uff81\055\uff81\001\002\000\040" +
    "\017\036\022\040\033\051\037\027\047\uff7f\050\057\054" +
    "\033\055\uff7f\056\022\065\024\114\042\115\023\116\031" +
    "\117\034\120\043\001\002\000\130\020\uff82\021\uff82\023" +
    "\uff82\025\uff82\026\uff82\031\uff82\032\uff82\034\uff82\035\uff82" +
    "\045\uff82\047\uff82\050\uff82\051\uff82\055\uff82\056\uff82\057" +
    "\uff82\060\uff82\061\uff82\063\uff82\064\uff82\065\uff82\066\uff82" +
    "\067\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075" +
    "\uff82\076\uff82\077\uff82\100\uff82\101\uff82\102\uff82\103\uff82" +
    "\104\uff82\105\uff82\106\uff82\107\uff82\110\uff82\111\uff82\112" +
    "\uff82\113\uff82\001\002\000\006\047\uff80\055\uff80\001\002" +
    "\000\034\017\036\022\040\033\051\037\027\050\057\054" +
    "\033\056\022\065\024\114\042\115\023\116\031\117\034" +
    "\120\043\001\002\000\034\017\036\022\040\033\051\037" +
    "\027\050\057\054\033\056\022\065\024\114\042\115\023" +
    "\116\031\117\034\120\043\001\002\000\102\034\136\047" +
    "\uff7c\050\135\055\uff7c\057\104\060\122\061\124\063\101" +
    "\064\111\065\106\066\113\067\102\070\133\071\112\072" +
    "\127\073\121\074\131\075\126\076\130\077\114\100\123" +
    "\101\105\102\134\103\125\104\120\105\117\106\132\107" +
    "\110\110\077\111\107\112\115\113\116\001\002\000\102" +
    "\034\136\047\uff7d\050\135\055\uff7d\057\104\060\122\061" +
    "\124\063\101\064\111\065\106\066\113\067\102\070\133" +
    "\071\112\072\127\073\121\074\131\075\126\076\130\077" +
    "\114\100\123\101\105\102\134\103\125\104\120\105\117" +
    "\106\132\107\110\110\077\111\107\112\115\113\116\001" +
    "\002\000\130\020\uffa9\021\uffa9\023\uffa9\025\uffa9\026\uffa9" +
    "\031\uffa9\032\uffa9\034\136\035\uffa9\045\uffa9\047\uffa9\050" +
    "\135\051\uffa9\055\uffa9\056\uffa9\057\104\060\122\061\124" +
    "\063\101\064\111\065\106\066\113\067\102\070\133\071" +
    "\112\072\127\073\121\074\131\075\126\076\130\077\114" +
    "\100\123\101\105\102\134\103\uffa9\104\120\105\117\106" +
    "\132\107\110\110\uffa9\111\uffa9\112\uffa9\113\uffa9\001\002" +
    "\000\154\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\025" +
    "\uffd3\026\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\037\uffd3\045\uffd3\047\uffd3\050\uffd3\051\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073" +
    "\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3" +
    "\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3\110" +
    "\uffd3\111\uffd3\112\uffd3\113\uffd3\114\uffd3\115\uffd3\116\uffd3" +
    "\117\uffd3\120\uffd3\001\002\000\006\047\073\051\075\001" +
    "\002\000\004\117\034\001\002\000\004\117\uffed\001\002" +
    "\000\006\046\220\047\217\001\002\000\010\044\uffd8\046" +
    "\uffd8\047\uffd8\001\002\000\004\117\034\001\002\000\016" +
    "\040\230\041\231\042\224\050\223\115\226\117\227\001" +
    "\002\000\012\045\uff6c\047\uff6c\051\uff6c\101\uff6c\001\002" +
    "\000\004\045\ufff8\001\002\000\012\050\223\051\305\115" +
    "\226\117\227\001\002\000\004\117\034\001\002\000\006" +
    "\045\uff78\101\uff78\001\002\000\026\034\uff61\045\uff61\047" +
    "\uff61\051\uff61\056\uff61\060\uff61\061\uff61\062\uff61\064\uff61" +
    "\101\uff61\001\002\000\036\027\uffd2\030\uffd2\034\uffd2\044" +
    "\uffd2\045\uffd2\047\uffd2\050\uffd2\051\uffd2\056\uffd2\060\uffd2" +
    "\061\uffd2\062\uffd2\064\uffd2\101\uffd2\001\002\000\004\117" +
    "\034\001\002\000\004\117\034\001\002\000\034\027\250" +
    "\030\261\034\uff65\044\251\045\uff65\047\uff65\050\223\051" +
    "\uff65\060\uff65\061\uff65\062\uff65\064\uff65\101\uff65\001\002" +
    "\000\004\030\257\001\002\000\026\034\240\045\uff6b\047" +
    "\uff6b\051\uff6b\056\uff6b\060\236\061\237\062\235\064\241" +
    "\101\uff6b\001\002\000\006\115\226\117\227\001\002\000" +
    "\006\115\226\117\227\001\002\000\006\115\226\117\227" +
    "\001\002\000\006\115\226\117\227\001\002\000\006\065" +
    "\243\115\244\001\002\000\026\034\uff67\045\uff67\047\uff67" +
    "\051\uff67\056\uff67\060\uff67\061\uff67\062\uff67\064\uff67\101" +
    "\uff67\001\002\000\004\115\245\001\002\000\030\034\uffdd" +
    "\045\uffdd\047\uffdd\051\uffdd\053\uffdd\056\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\064\uffdd\101\uffdd\001\002\000\030\034\uffdc" +
    "\045\uffdc\047\uffdc\051\uffdc\053\uffdc\056\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\064\uffdc\101\uffdc\001\002\000\024\045\uff6a" +
    "\047\uff6a\051\uff6a\056\uff6a\060\236\061\237\062\235\064" +
    "\241\101\uff6a\001\002\000\032\027\250\034\uff65\044\251" +
    "\045\uff65\047\uff65\051\uff65\056\uff65\060\uff65\061\uff65\062" +
    "\uff65\064\uff65\101\uff65\001\002\000\030\034\uff63\045\uff63" +
    "\047\uff63\051\uff63\056\uff63\060\uff63\061\uff63\062\uff63\064" +
    "\uff63\101\uff63\117\227\001\002\000\004\117\227\001\002" +
    "\000\026\034\uff64\045\uff64\047\uff64\051\uff64\056\uff64\060" +
    "\uff64\061\uff64\062\uff64\064\uff64\101\uff64\001\002\000\026" +
    "\034\uff62\045\uff62\047\uff62\051\uff62\056\uff62\060\uff62\061" +
    "\uff62\062\uff62\064\uff62\101\uff62\001\002\000\026\034\uff68" +
    "\045\uff68\047\uff68\051\uff68\056\uff68\060\uff68\061\uff68\062" +
    "\uff68\064\241\101\uff68\001\002\000\026\034\uff69\045\uff69" +
    "\047\uff69\051\uff69\056\uff69\060\uff69\061\uff69\062\uff69\064" +
    "\241\101\uff69\001\002\000\026\034\uff66\045\uff66\047\uff66" +
    "\051\uff66\056\uff66\060\236\061\237\062\uff66\064\241\101" +
    "\uff66\001\002\000\010\050\223\115\226\117\227\001\002" +
    "\000\012\045\uff6f\047\uff6f\051\uff6f\101\uff6f\001\002\000" +
    "\010\050\223\115\226\117\227\001\002\000\012\045\uff6d" +
    "\047\uff6d\051\uff6d\101\uff6d\001\002\000\012\045\uff6e\047" +
    "\uff6e\051\uff6e\101\uff6e\001\002\000\006\044\uff77\047\uff77" +
    "\001\002\000\006\044\272\047\271\001\002\000\010\027" +
    "\267\044\uff75\047\uff75\001\002\000\004\117\034\001\002" +
    "\000\006\044\uff74\047\uff74\001\002\000\004\117\034\001" +
    "\002\000\016\040\230\041\231\042\224\050\223\115\226" +
    "\117\227\001\002\000\006\045\uff79\101\uff79\001\002\000" +
    "\006\044\uff76\047\uff76\001\002\000\006\044\276\047\217" +
    "\001\002\000\016\040\230\041\231\042\224\050\223\115" +
    "\226\117\227\001\002\000\006\045\uff7b\101\uff7b\001\002" +
    "\000\006\044\301\047\217\001\002\000\016\040\230\041" +
    "\231\042\224\050\223\115\226\117\227\001\002\000\006" +
    "\045\uff7a\101\uff7a\001\002\000\006\047\306\051\307\001" +
    "\002\000\006\047\uff73\051\uff73\001\002\000\014\030\uff71" +
    "\045\uff71\047\uff71\051\uff71\101\uff71\001\002\000\010\050" +
    "\223\115\226\117\227\001\002\000\014\030\uff70\045\uff70" +
    "\047\uff70\051\uff70\101\uff70\001\002\000\006\047\uff72\051" +
    "\uff72\001\002\000\010\044\uffd7\046\uffd7\047\uffd7\001\002" +
    "\000\004\027\337\001\002\000\006\027\uffd2\120\uffd9\001" +
    "\002\000\004\120\315\001\002\000\006\045\ufff2\101\316" +
    "\001\002\000\012\050\322\115\023\116\031\117\034\001" +
    "\002\000\022\044\335\045\uff5b\047\uff5b\051\uff5b\053\uff5b" +
    "\060\uff5b\061\uff5b\064\uff5b\001\002\000\020\045\uff59\047" +
    "\uff59\051\uff59\053\uff59\060\uff59\061\uff59\064\uff59\001\002" +
    "\000\016\045\uff60\047\uff60\053\uff60\060\uff60\061\uff60\064" +
    "\uff60\001\002\000\012\050\322\115\023\116\031\117\034" +
    "\001\002\000\004\045\ufff1\001\002\000\012\045\uff58\060" +
    "\325\061\326\064\327\001\002\000\012\050\322\115\023" +
    "\116\031\117\034\001\002\000\012\050\322\115\023\116" +
    "\031\117\034\001\002\000\006\065\243\115\244\001\002" +
    "\000\016\045\uff5d\047\uff5d\053\uff5d\060\uff5d\061\uff5d\064" +
    "\uff5d\001\002\000\016\045\uff5e\047\uff5e\053\uff5e\060\uff5e" +
    "\061\uff5e\064\327\001\002\000\016\045\uff5f\047\uff5f\053" +
    "\uff5f\060\uff5f\061\uff5f\064\327\001\002\000\004\051\334" +
    "\001\002\000\020\045\uff5c\047\uff5c\051\uff5c\053\uff5c\060" +
    "\uff5c\061\uff5c\064\uff5c\001\002\000\004\117\034\001\002" +
    "\000\020\045\uff5a\047\uff5a\051\uff5a\053\uff5a\060\uff5a\061" +
    "\uff5a\064\uff5a\001\002\000\004\117\227\001\002\000\004" +
    "\101\341\001\002\000\004\052\342\001\002\000\010\053" +
    "\346\117\034\120\062\001\002\000\004\045\ufff3\001\002" +
    "\000\006\047\351\053\352\001\002\000\004\044\347\001" +
    "\002\000\004\045\uffe3\001\002\000\012\050\322\115\023" +
    "\116\031\117\034\001\002\000\014\047\uffe1\053\uffe1\060" +
    "\325\061\326\064\327\001\002\000\006\117\034\120\062" +
    "\001\002\000\004\045\uffe2\001\002\000\004\044\354\001" +
    "\002\000\012\050\322\115\023\116\031\117\034\001\002" +
    "\000\014\047\uffe0\053\uffe0\060\325\061\326\064\327\001" +
    "\002\000\004\046\357\001\002\000\010\050\223\115\226" +
    "\117\227\001\002\000\004\101\361\001\002\000\004\052" +
    "\362\001\002\000\010\053\366\117\034\120\062\001\002" +
    "\000\004\045\ufff0\001\002\000\006\047\377\053\u0100\001" +
    "\002\000\010\030\uffcf\047\uffcf\053\uffcf\001\002\000\004" +
    "\045\uffe7\001\002\000\006\030\370\047\371\001\002\000" +
    "\010\065\375\115\023\116\031\001\002\000\006\117\034" +
    "\120\062\001\002\000\010\030\uffce\047\uffce\053\uffce\001" +
    "\002\000\006\047\uffdf\053\uffdf\001\002\000\006\047\uffe5" +
    "\053\uffe5\001\002\000\006\115\023\116\031\001\002\000" +
    "\006\047\uffde\053\uffde\001\002\000\006\117\034\120\062" +
    "\001\002\000\004\045\uffe6\001\002\000\006\030\u0102\047" +
    "\371\001\002\000\010\065\375\115\023\116\031\001\002" +
    "\000\006\047\uffe4\053\uffe4\001\002\000\130\020\uffa4\021" +
    "\uffa4\023\uffa4\025\uffa4\026\uffa4\031\uffa4\032\uffa4\034\uffa4" +
    "\035\uffa4\045\uffa4\047\uffa4\050\uffa4\051\uffa4\055\uffa4\056" +
    "\uffa4\057\uffa4\060\uffa4\061\uffa4\063\uffa4\064\uffa4\065\uffa4" +
    "\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074" +
    "\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4" +
    "\103\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\110\uffa4\111" +
    "\uffa4\112\uffa4\113\uffa4\001\002\000\006\051\071\117\034" +
    "\001\002\000\004\101\u0114\001\002\000\006\050\u0105\101" +
    "\u0108\001\002\000\034\017\036\022\040\033\051\037\027" +
    "\050\057\054\033\056\022\065\024\114\042\115\023\116" +
    "\031\117\034\120\043\001\002\000\004\101\u010a\001\002" +
    "\000\034\017\036\022\040\033\051\037\027\050\057\054" +
    "\033\056\022\065\024\114\042\115\023\116\031\117\034" +
    "\120\043\001\002\000\102\032\u010c\034\136\047\u010d\050" +
    "\135\057\104\060\122\061\124\063\101\064\111\065\106" +
    "\066\113\067\102\070\133\071\112\072\127\073\121\074" +
    "\131\075\126\076\130\077\114\100\123\101\105\102\134" +
    "\103\125\104\120\105\117\106\132\107\110\110\077\111" +
    "\107\112\115\113\116\001\002\000\034\017\036\022\040" +
    "\033\051\037\027\050\057\054\033\056\022\065\024\114" +
    "\042\115\023\116\031\117\034\120\043\001\002\000\006" +
    "\050\u0105\117\034\001\002\000\130\020\uff95\021\uff95\023" +
    "\uff95\025\uff95\026\uff95\031\uff95\032\uff95\034\uff95\035\uff95" +
    "\045\uff95\047\uff95\050\uff95\051\uff95\055\uff95\056\uff95\057" +
    "\uff95\060\uff95\061\uff95\063\uff95\064\uff95\065\uff95\066\uff95" +
    "\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\074\uff95\075" +
    "\uff95\076\uff95\077\uff95\100\uff95\101\uff95\102\uff95\103\uff95" +
    "\104\uff95\105\uff95\106\uff95\107\uff95\110\uff95\111\uff95\112" +
    "\uff95\113\uff95\001\002\000\130\020\uff93\021\uff93\023\uff93" +
    "\025\uff93\026\uff93\031\uff93\032\uff93\034\uff93\035\uff93\045" +
    "\uff93\047\uff93\050\uff93\051\uff93\055\uff93\056\uff93\057\uff93" +
    "\060\uff93\061\uff93\063\uff93\064\uff93\065\uff93\066\uff93\067" +
    "\uff93\070\uff93\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93" +
    "\076\uff93\077\uff93\100\uff93\101\uff93\102\uff93\103\uff93\104" +
    "\uff93\105\uff93\106\uff93\107\uff93\110\uff93\111\uff93\112\uff93" +
    "\113\uff93\001\002\000\100\023\u0111\034\136\050\135\057" +
    "\104\060\122\061\124\063\101\064\111\065\106\066\113" +
    "\067\102\070\133\071\112\072\127\073\121\074\131\075" +
    "\126\076\130\077\114\100\123\101\105\102\134\103\125" +
    "\104\120\105\117\106\132\107\110\110\077\111\107\112" +
    "\115\113\116\001\002\000\130\020\uff94\021\uff94\023\uff94" +
    "\025\uff94\026\uff94\031\uff94\032\uff94\034\uff94\035\uff94\045" +
    "\uff94\047\uff94\050\uff94\051\uff94\055\uff94\056\uff94\057\uff94" +
    "\060\uff94\061\uff94\063\uff94\064\uff94\065\uff94\066\uff94\067" +
    "\uff94\070\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94" +
    "\076\uff94\077\uff94\100\uff94\101\uff94\102\uff94\103\uff94\104" +
    "\uff94\105\uff94\106\uff94\107\uff94\110\uff94\111\uff94\112\uff94" +
    "\113\uff94\001\002\000\102\032\u010c\034\136\047\u010d\050" +
    "\135\057\104\060\122\061\124\063\101\064\111\065\106" +
    "\066\113\067\102\070\133\071\112\072\127\073\121\074" +
    "\131\075\126\076\130\077\114\100\123\101\105\102\134" +
    "\103\125\104\120\105\117\106\132\107\110\110\077\111" +
    "\107\112\115\113\116\001\002\000\130\020\uff97\021\uff97" +
    "\023\uff97\025\uff97\026\uff97\031\uff97\032\uff97\034\uff97\035" +
    "\uff97\045\uff97\047\uff97\050\uff97\051\uff97\055\uff97\056\uff97" +
    "\057\uff97\060\uff97\061\uff97\063\uff97\064\uff97\065\uff97\066" +
    "\uff97\067\uff97\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97" +
    "\075\uff97\076\uff97\077\uff97\100\uff97\101\uff97\102\uff97\103" +
    "\uff97\104\uff97\105\uff97\106\uff97\107\uff97\110\uff97\111\uff97" +
    "\112\uff97\113\uff97\001\002\000\034\017\036\022\040\033" +
    "\051\037\027\050\057\054\033\056\022\065\024\114\042" +
    "\115\023\116\031\117\034\120\043\001\002\000\102\032" +
    "\u010c\034\136\047\u010d\050\135\057\104\060\122\061\124" +
    "\063\101\064\111\065\106\066\113\067\102\070\133\071" +
    "\112\072\127\073\121\074\131\075\126\076\130\077\114" +
    "\100\123\101\105\102\134\103\125\104\120\105\117\106" +
    "\132\107\110\110\077\111\107\112\115\113\116\001\002" +
    "\000\130\020\uff96\021\uff96\023\uff96\025\uff96\026\uff96\031" +
    "\uff96\032\uff96\034\uff96\035\uff96\045\uff96\047\uff96\050\uff96" +
    "\051\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\063" +
    "\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96" +
    "\072\uff96\073\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100" +
    "\uff96\101\uff96\102\uff96\103\uff96\104\uff96\105\uff96\106\uff96" +
    "\107\uff96\110\uff96\111\uff96\112\uff96\113\uff96\001\002\000" +
    "\006\117\034\120\062\001\002\000\004\043\u0119\001\002" +
    "\000\006\117\034\120\062\001\002\000\132\020\uff98\021" +
    "\uff98\023\uff98\025\uff98\026\uff98\031\uff98\032\uff98\034\uff98" +
    "\035\uff98\045\uff98\047\uff98\050\uff98\051\uff98\055\uff98\056" +
    "\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98\064\uff98" +
    "\065\uff98\066\uff98\067\uff98\070\uff98\071\uff98\072\uff98\073" +
    "\uff98\074\uff98\075\uff98\076\uff98\077\uff98\100\uff98\101\uff98" +
    "\102\uff98\103\uff98\104\uff98\105\uff98\106\uff98\107\uff98\110" +
    "\uff98\111\uff98\112\uff98\113\uff98\001\002\000\004\101\u011c" +
    "\001\002\000\012\050\322\115\023\116\031\117\034\001" +
    "\002\000\012\045\ufff4\060\325\061\326\064\327\001\002" +
    "\000\004\101\u011f\001\002\000\010\050\223\115\226\117" +
    "\227\001\002\000\004\045\ufff5\001\002\000\004\046\u0122" +
    "\001\002\000\010\050\223\115\226\117\227\001\002\000" +
    "\004\045\uffef\001\002\000\034\017\036\022\040\033\051" +
    "\037\027\050\057\054\033\056\022\065\024\114\042\115" +
    "\023\116\031\117\034\120\043\001\002\000\004\026\u0143" +
    "\001\002\000\006\026\u013f\050\135\001\002\000\004\023" +
    "\u013d\001\002\000\034\017\036\022\040\033\051\037\027" +
    "\050\057\054\033\056\022\065\024\114\042\115\023\116" +
    "\031\117\034\120\043\001\002\000\022\017\u0128\020\uff92" +
    "\021\uff92\023\uff92\024\u0124\036\u012b\050\u0105\117\034\001" +
    "\002\000\022\017\uff91\020\uff91\021\uff91\023\uff91\024\uff91" +
    "\036\uff91\050\uff91\117\uff91\001\002\000\036\017\036\022" +
    "\040\033\051\037\027\045\u012c\050\057\054\033\056\022" +
    "\065\024\114\042\115\023\116\031\117\034\120\043\001" +
    "\002\000\022\017\uff8b\020\uff8b\021\uff8b\023\uff8b\024\uff8b" +
    "\036\uff8b\050\uff8b\117\uff8b\001\002\000\100\034\136\045" +
    "\u012e\050\135\057\104\060\122\061\124\063\101\064\111" +
    "\065\106\066\113\067\102\070\133\071\112\072\127\073" +
    "\121\074\131\075\126\076\130\077\114\100\123\101\105" +
    "\102\134\103\125\104\120\105\117\106\132\107\110\110" +
    "\077\111\107\112\115\113\116\001\002\000\022\017\uff8c" +
    "\020\uff8c\021\uff8c\023\uff8c\024\uff8c\036\uff8c\050\uff8c\117" +
    "\uff8c\001\002\000\022\017\uff90\020\uff90\021\uff90\023\uff90" +
    "\024\uff90\036\uff90\050\uff90\117\uff90\001\002\000\100\034" +
    "\136\035\u0131\050\135\057\104\060\122\061\124\063\101" +
    "\064\111\065\106\066\113\067\102\070\133\071\112\072" +
    "\127\073\121\074\131\075\126\076\130\077\114\100\123" +
    "\101\105\102\134\103\125\104\120\105\117\106\132\107" +
    "\110\110\077\111\107\112\115\113\116\001\002\000\014" +
    "\017\u0128\024\u0124\036\u012b\050\u0105\117\034\001\002\000" +
    "\010\020\u0134\021\u0133\023\u0136\001\002\000\034\017\036" +
    "\022\040\033\051\037\027\050\057\054\033\056\022\065" +
    "\024\114\042\115\023\116\031\117\034\120\043\001\002" +
    "\000\014\017\u0128\024\u0124\036\u012b\050\u0105\117\034\001" +
    "\002\000\022\017\uff89\020\uff89\021\uff89\023\uff89\024\uff89" +
    "\036\uff89\050\uff89\117\uff89\001\002\000\022\017\uff86\020" +
    "\uff86\021\uff86\023\uff86\024\uff86\036\uff86\050\uff86\117\uff86" +
    "\001\002\000\004\023\u0138\001\002\000\022\017\uff87\020" +
    "\uff87\021\uff87\023\uff87\024\uff87\036\uff87\050\uff87\117\uff87" +
    "\001\002\000\100\034\136\035\u013a\050\135\057\104\060" +
    "\122\061\124\063\101\064\111\065\106\066\113\067\102" +
    "\070\133\071\112\072\127\073\121\074\131\075\126\076" +
    "\130\077\114\100\123\101\105\102\134\103\125\104\120" +
    "\105\117\106\132\107\110\110\077\111\107\112\115\113" +
    "\116\001\002\000\014\017\u0128\024\u0124\036\u012b\050\u0105" +
    "\117\034\001\002\000\010\020\u0134\021\u0133\023\u0136\001" +
    "\002\000\022\017\uff88\020\uff88\021\uff88\023\uff88\024\uff88" +
    "\036\uff88\050\uff88\117\uff88\001\002\000\130\020\uffa0\021" +
    "\uffa0\023\uffa0\025\uffa0\026\uffa0\031\uffa0\032\uffa0\034\uffa0" +
    "\035\uffa0\045\uffa0\047\uffa0\050\uffa0\051\uffa0\055\uffa0\056" +
    "\uffa0\057\uffa0\060\uffa0\061\uffa0\063\uffa0\064\uffa0\065\uffa0" +
    "\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\074" +
    "\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0" +
    "\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110\uffa0\111" +
    "\uffa0\112\uffa0\113\uffa0\001\002\000\004\045\u0142\001\002" +
    "\000\034\017\036\022\040\033\051\037\027\050\057\054" +
    "\033\056\022\065\024\114\042\115\023\116\031\117\034" +
    "\120\043\001\002\000\100\034\136\045\u0141\050\135\057" +
    "\104\060\122\061\124\063\101\064\111\065\106\066\113" +
    "\067\102\070\133\071\112\072\127\073\121\074\131\075" +
    "\126\076\130\077\114\100\123\101\105\102\134\103\125" +
    "\104\120\105\117\106\132\107\110\110\077\111\107\112" +
    "\115\113\116\001\002\000\022\017\uff8f\020\uff8f\021\uff8f" +
    "\023\uff8f\024\uff8f\036\uff8f\050\uff8f\117\uff8f\001\002\000" +
    "\022\017\uff8d\020\uff8d\021\uff8d\023\uff8d\024\uff8d\036\uff8d" +
    "\050\uff8d\117\uff8d\001\002\000\034\017\036\022\040\033" +
    "\051\037\027\050\057\054\033\056\022\065\024\114\042" +
    "\115\023\116\031\117\034\120\043\001\002\000\100\034" +
    "\136\045\u0145\050\135\057\104\060\122\061\124\063\101" +
    "\064\111\065\106\066\113\067\102\070\133\071\112\072" +
    "\127\073\121\074\131\075\126\076\130\077\114\100\123" +
    "\101\105\102\134\103\125\104\120\105\117\106\132\107" +
    "\110\110\077\111\107\112\115\113\116\001\002\000\022" +
    "\017\uff8e\020\uff8e\021\uff8e\023\uff8e\024\uff8e\036\uff8e\050" +
    "\uff8e\117\uff8e\001\002\000\100\025\u0147\034\136\050\135" +
    "\057\104\060\122\061\124\063\101\064\111\065\106\066" +
    "\113\067\102\070\133\071\112\072\127\073\121\074\131" +
    "\075\126\076\130\077\114\100\123\101\105\102\134\103" +
    "\125\104\120\105\117\106\132\107\110\110\077\111\107" +
    "\112\115\113\116\001\002\000\014\017\u0128\024\u0124\036" +
    "\u012b\050\u0105\117\034\001\002\000\004\023\u0149\001\002" +
    "\000\022\017\uff8a\020\uff8a\021\uff8a\023\uff8a\024\uff8a\036" +
    "\uff8a\050\uff8a\117\uff8a\001\002\000\100\034\136\035\u014b" +
    "\050\135\057\104\060\122\061\124\063\101\064\111\065" +
    "\106\066\113\067\102\070\133\071\112\072\127\073\121" +
    "\074\131\075\126\076\130\077\114\100\123\101\105\102" +
    "\134\103\125\104\120\105\117\106\132\107\110\110\077" +
    "\111\107\112\115\113\116\001\002\000\034\017\036\022" +
    "\040\033\051\037\027\050\057\054\033\056\022\065\024" +
    "\114\042\115\023\116\031\117\034\120\043\001\002\000" +
    "\102\020\u014d\021\u014f\034\136\050\135\057\104\060\122" +
    "\061\124\063\101\064\111\065\106\066\113\067\102\070" +
    "\133\071\112\072\127\073\121\074\131\075\126\076\130" +
    "\077\114\100\123\101\105\102\134\103\125\104\120\105" +
    "\117\106\132\107\110\110\077\111\107\112\115\113\116" +
    "\001\002\000\034\017\036\022\040\033\051\037\027\050" +
    "\057\054\033\056\022\065\024\114\042\115\023\116\031" +
    "\117\034\120\043\001\002\000\130\020\uffa5\021\uffa5\023" +
    "\uffa5\025\uffa5\026\uffa5\031\uffa5\032\uffa5\034\uffa5\035\uffa5" +
    "\045\uffa5\047\uffa5\050\uffa5\051\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\061\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5" +
    "\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075" +
    "\uffa5\076\uffa5\077\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5" +
    "\104\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5\111\uffa5\112" +
    "\uffa5\113\uffa5\001\002\000\034\017\036\022\040\033\051" +
    "\037\027\050\057\054\033\056\022\065\024\114\042\115" +
    "\023\116\031\117\034\120\043\001\002\000\100\034\136" +
    "\035\u0151\050\135\057\104\060\122\061\124\063\101\064" +
    "\111\065\106\066\113\067\102\070\133\071\112\072\127" +
    "\073\121\074\131\075\126\076\130\077\114\100\123\101" +
    "\105\102\134\103\125\104\120\105\117\106\132\107\110" +
    "\110\077\111\107\112\115\113\116\001\002\000\034\017" +
    "\036\022\040\033\051\037\027\050\057\054\033\056\022" +
    "\065\024\114\042\115\023\116\031\117\034\120\043\001" +
    "\002\000\102\020\u014d\021\u014f\034\136\050\135\057\104" +
    "\060\122\061\124\063\101\064\111\065\106\066\113\067" +
    "\102\070\133\071\112\072\127\073\121\074\131\075\126" +
    "\076\130\077\114\100\123\101\105\102\134\103\125\104" +
    "\120\105\117\106\132\107\110\110\077\111\107\112\115" +
    "\113\116\001\002\000\130\020\uff9b\021\uff9b\023\uff9b\025" +
    "\uff9b\026\uff9b\031\uff9b\032\uff9b\034\uff9b\035\uff9b\045\uff9b" +
    "\047\uff9b\050\uff9b\051\uff9b\055\uff9b\056\uff9b\057\uff9b\060" +
    "\uff9b\061\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b" +
    "\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076" +
    "\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b\104\uff9b" +
    "\105\uff9b\106\uff9b\107\uff9b\110\uff9b\111\uff9b\112\uff9b\113" +
    "\uff9b\001\002\000\100\023\u0155\034\136\050\135\057\104" +
    "\060\122\061\124\063\101\064\111\065\106\066\113\067" +
    "\102\070\133\071\112\072\127\073\121\074\131\075\126" +
    "\076\130\077\114\100\123\101\105\102\134\103\125\104" +
    "\120\105\117\106\132\107\110\110\077\111\107\112\115" +
    "\113\116\001\002\000\130\020\uff9a\021\uff9a\023\uff9a\025" +
    "\uff9a\026\uff9a\031\uff9a\032\uff9a\034\uff9a\035\uff9a\045\uff9a" +
    "\047\uff9a\050\uff9a\051\uff9a\055\uff9a\056\uff9a\057\uff9a\060" +
    "\uff9a\061\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a" +
    "\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\076" +
    "\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a" +
    "\105\uff9a\106\uff9a\107\uff9a\110\uff9a\111\uff9a\112\uff9a\113" +
    "\uff9a\001\002\000\006\045\ufff7\101\u0157\001\002\000\004" +
    "\052\u0158\001\002\000\006\117\034\120\062\001\002\000" +
    "\006\047\371\053\u015a\001\002\000\004\045\ufff6\001\002" +
    "\000\130\020\uff85\021\uff85\023\uff85\025\uff85\026\uff85\031" +
    "\uff85\032\uff85\034\uff85\035\uff85\045\uff85\047\uff85\050\uff85" +
    "\051\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061\uff85\063" +
    "\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071\uff85" +
    "\072\uff85\073\uff85\074\uff85\075\uff85\076\uff85\077\uff85\100" +
    "\uff85\101\uff85\102\uff85\103\uff85\104\uff85\105\uff85\106\uff85" +
    "\107\uff85\110\uff85\111\uff85\112\uff85\113\uff85\001\002\000" +
    "\104\034\136\047\uffcd\050\135\055\uffcd\056\u015f\057\104" +
    "\060\122\061\124\063\101\064\111\065\106\066\113\067" +
    "\102\070\133\071\112\072\127\073\121\074\131\075\126" +
    "\076\130\077\114\100\123\101\105\102\134\103\125\104" +
    "\120\105\117\106\132\107\110\110\077\111\107\112\115" +
    "\113\116\001\002\000\006\047\143\055\u015e\001\002\000" +
    "\130\020\uff84\021\uff84\023\uff84\025\uff84\026\uff84\031\uff84" +
    "\032\uff84\034\uff84\035\uff84\045\uff84\047\uff84\050\uff84\051" +
    "\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\063\uff84" +
    "\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072" +
    "\uff84\073\uff84\074\uff84\075\uff84\076\uff84\077\uff84\100\uff84" +
    "\101\uff84\102\uff84\103\uff84\104\uff84\105\uff84\106\uff84\107" +
    "\uff84\110\uff84\111\uff84\112\uff84\113\uff84\001\002\000\040" +
    "\017\036\022\040\033\051\037\027\047\uff7f\050\057\054" +
    "\033\055\uff7f\056\022\065\024\114\042\115\023\116\031" +
    "\117\034\120\043\001\002\000\006\047\201\055\u0161\001" +
    "\002\000\130\020\uff83\021\uff83\023\uff83\025\uff83\026\uff83" +
    "\031\uff83\032\uff83\034\uff83\035\uff83\045\uff83\047\uff83\050" +
    "\uff83\051\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83" +
    "\063\uff83\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071" +
    "\uff83\072\uff83\073\uff83\074\uff83\075\uff83\076\uff83\077\uff83" +
    "\100\uff83\101\uff83\102\uff83\103\uff83\104\uff83\105\uff83\106" +
    "\uff83\107\uff83\110\uff83\111\uff83\112\uff83\113\uff83\001\002" +
    "\000\056\002\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\017\ufffc\022\ufffc\033\ufffc" +
    "\037\ufffc\050\ufffc\054\ufffc\056\ufffc\065\ufffc\114\ufffc\115" +
    "\ufffc\116\ufffc\117\ufffc\120\ufffc\001\002\000\034\017\036" +
    "\022\040\033\051\037\027\050\057\054\033\056\022\065" +
    "\024\114\042\115\023\116\031\117\034\120\043\001\002" +
    "\000\100\023\u0165\034\136\050\135\057\104\060\122\061" +
    "\124\063\101\064\111\065\106\066\113\067\102\070\133" +
    "\071\112\072\127\073\121\074\131\075\126\076\130\077" +
    "\114\100\123\101\105\102\134\103\125\104\120\105\117" +
    "\106\132\107\110\110\077\111\107\112\115\113\116\001" +
    "\002\000\130\020\uffa6\021\uffa6\023\uffa6\025\uffa6\026\uffa6" +
    "\031\uffa6\032\uffa6\034\uffa6\035\uffa6\045\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6" +
    "\100\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\106" +
    "\uffa6\107\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6\001\002" +
    "\000\006\050\u0105\101\u0167\001\002\000\034\017\036\022" +
    "\040\033\051\037\027\050\057\054\033\056\022\065\024" +
    "\114\042\115\023\116\031\117\034\120\043\001\002\000" +
    "\004\101\u0169\001\002\000\034\017\036\022\040\033\051" +
    "\037\027\050\057\054\033\056\022\065\024\114\042\115" +
    "\023\116\031\117\034\120\043\001\002\000\100\034\136" +
    "\045\ufff9\050\135\057\104\060\122\061\124\063\101\064" +
    "\111\065\106\066\113\067\102\070\133\071\112\072\127" +
    "\073\121\074\131\075\126\076\130\077\114\100\123\101" +
    "\105\102\134\103\125\104\120\105\117\106\132\107\110" +
    "\110\077\111\107\112\115\113\116\001\002\000\100\034" +
    "\136\045\ufffa\050\135\057\104\060\122\061\124\063\101" +
    "\064\111\065\106\066\113\067\102\070\133\071\112\072" +
    "\127\073\121\074\131\075\126\076\130\077\114\100\123" +
    "\101\105\102\134\103\125\104\120\105\117\106\132\107" +
    "\110\110\077\111\107\112\115\113\116\001\002\000\130" +
    "\020\uffc7\021\uffc7\023\uffc7\025\uffc7\026\uffc7\031\uffc7\032" +
    "\uffc7\034\136\035\uffc7\045\uffc7\047\uffc7\050\135\051\uffc7" +
    "\055\uffc7\056\uffc7\057\uffc7\060\122\061\124\063\101\064" +
    "\111\065\uffc7\066\113\067\102\070\133\071\112\072\127" +
    "\073\121\074\131\075\126\076\130\077\114\100\123\101" +
    "\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7" +
    "\110\uffc7\111\uffc7\112\uffc7\113\uffc7\001\002\000\004\056" +
    "\u016e\001\002\000\130\020\uffa1\021\uffa1\023\uffa1\025\uffa1" +
    "\026\uffa1\031\uffa1\032\uffa1\034\uffa1\035\uffa1\045\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1" +
    "\061\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070" +
    "\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1" +
    "\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1\105" +
    "\uffa1\106\uffa1\107\uffa1\110\uffa1\111\uffa1\112\uffa1\113\uffa1" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016d\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\005\001\001\000\026\005\027\006\024" +
    "\007\051\013\045\016\046\017\057\023\036\030\031\050" +
    "\047\051\052\001\001\000\004\033\017\001\001\000\004" +
    "\033\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\246\041\u016c\042\233\001\001\000\002" +
    "\001\001\000\024\006\u016b\007\051\013\045\016\046\017" +
    "\057\023\036\030\031\050\047\051\052\001\001\000\004" +
    "\015\102\001\001\000\004\016\u0165\001\001\000\004\023" +
    "\u0162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\006\u015b\007\051\013\045\014\u015c\016" +
    "\046\017\057\023\036\030\031\050\047\051\052\001\001" +
    "\000\002\001\001\000\004\016\u0155\001\001\000\024\006" +
    "\u0149\007\051\013\045\016\046\017\057\023\036\030\031" +
    "\050\047\051\052\001\001\000\002\001\001\000\014\016" +
    "\u0125\023\u0124\054\u0128\055\u0126\056\u0129\001\001\000\004" +
    "\016\u0120\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\020\231\040\224\041\220\042\233\043\u011d\045\232" +
    "\001\001\000\004\016\u011a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\u0103\016\u0106" +
    "\023\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\355\001\001\000\006\016\313\020\311\001\001" +
    "\000\004\060\212\001\001\000\026\006\064\007\066\013" +
    "\045\016\065\017\057\023\036\024\067\030\031\050\047" +
    "\051\052\001\001\000\002\001\001\000\006\016\063\017" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\211\024\210\001\001\000\024\006" +
    "\075\007\051\013\045\016\046\017\057\023\036\030\031" +
    "\050\047\051\052\001\001\000\002\001\001\000\004\015" +
    "\102\001\001\000\024\006\207\007\051\013\045\016\046" +
    "\017\057\023\036\030\031\050\047\051\052\001\001\000" +
    "\030\006\175\007\051\013\045\016\046\017\057\023\036" +
    "\030\031\050\047\051\052\052\176\053\177\001\001\000" +
    "\024\006\174\007\051\013\045\016\046\017\057\023\036" +
    "\030\031\050\047\051\052\001\001\000\024\006\173\007" +
    "\051\013\045\016\046\017\057\023\036\030\031\050\047" +
    "\051\052\001\001\000\002\001\001\000\024\006\172\007" +
    "\051\013\045\016\046\017\057\023\036\030\031\050\047" +
    "\051\052\001\001\000\024\006\171\007\051\013\045\016" +
    "\046\017\057\023\036\030\031\050\047\051\052\001\001" +
    "\000\024\006\170\007\051\013\045\016\046\017\057\023" +
    "\036\030\031\050\047\051\052\001\001\000\024\006\167" +
    "\007\051\013\045\016\046\017\057\023\036\030\031\050" +
    "\047\051\052\001\001\000\024\006\166\007\051\013\045" +
    "\016\046\017\057\023\036\030\031\050\047\051\052\001" +
    "\001\000\024\006\165\007\051\013\045\016\046\017\057" +
    "\023\036\030\031\050\047\051\052\001\001\000\024\006" +
    "\164\007\051\013\045\016\046\017\057\023\036\030\031" +
    "\050\047\051\052\001\001\000\024\006\163\007\051\013" +
    "\045\016\046\017\057\023\036\030\031\050\047\051\052" +
    "\001\001\000\002\001\001\000\024\006\162\007\051\013" +
    "\045\016\046\017\057\023\036\030\031\050\047\051\052" +
    "\001\001\000\024\006\161\007\051\013\045\016\046\017" +
    "\057\023\036\030\031\050\047\051\052\001\001\000\024" +
    "\006\160\007\051\013\045\016\046\017\057\023\036\030" +
    "\031\050\047\051\052\001\001\000\024\006\157\007\051" +
    "\013\045\016\046\017\057\023\036\030\031\050\047\051" +
    "\052\001\001\000\024\006\156\007\051\013\045\016\046" +
    "\017\057\023\036\030\031\050\047\051\052\001\001\000" +
    "\024\006\155\007\051\013\045\016\046\017\057\023\036" +
    "\030\031\050\047\051\052\001\001\000\002\001\001\000" +
    "\024\006\154\007\051\013\045\016\046\017\057\023\036" +
    "\030\031\050\047\051\052\001\001\000\024\006\153\007" +
    "\051\013\045\016\046\017\057\023\036\030\031\050\047" +
    "\051\052\001\001\000\024\006\152\007\051\013\045\016" +
    "\046\017\057\023\036\030\031\050\047\051\052\001\001" +
    "\000\024\006\151\007\051\013\045\016\046\017\057\023" +
    "\036\030\031\050\047\051\052\001\001\000\002\001\001" +
    "\000\024\006\150\007\051\013\045\016\046\017\057\023" +
    "\036\030\031\050\047\051\052\001\001\000\024\006\147" +
    "\007\051\013\045\016\046\017\057\023\036\030\031\050" +
    "\047\051\052\001\001\000\024\006\146\007\051\013\045" +
    "\016\046\017\057\023\036\030\031\050\047\051\052\001" +
    "\001\000\024\006\145\007\051\013\045\016\046\017\057" +
    "\023\036\030\031\050\047\051\052\001\001\000\026\006" +
    "\137\007\051\013\045\014\140\016\046\017\057\023\036" +
    "\030\031\050\047\051\052\001\001\000\024\006\136\007" +
    "\051\013\045\016\046\017\057\023\036\030\031\050\047" +
    "\051\052\001\001\000\004\015\102\001\001\000\004\015" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\006\144\007\051\013\045\016\046\017\057\023\036\030" +
    "\031\050\047\051\052\001\001\000\002\001\001\000\004" +
    "\015\102\001\001\000\004\015\102\001\001\000\004\015" +
    "\102\001\001\000\004\015\102\001\001\000\004\015\102" +
    "\001\001\000\004\015\102\001\001\000\004\015\102\001" +
    "\001\000\004\015\102\001\001\000\004\015\102\001\001" +
    "\000\004\015\102\001\001\000\004\015\102\001\001\000" +
    "\004\015\102\001\001\000\004\015\102\001\001\000\004" +
    "\015\102\001\001\000\004\015\102\001\001\000\004\015" +
    "\102\001\001\000\004\015\102\001\001\000\004\015\102" +
    "\001\001\000\004\015\102\001\001\000\004\015\102\001" +
    "\001\000\004\015\102\001\001\000\004\015\102\001\001" +
    "\000\004\015\102\001\001\000\004\015\102\001\001\000" +
    "\004\015\102\001\001\000\004\015\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\175\007\051\013" +
    "\045\016\046\017\057\023\036\030\031\050\047\051\052" +
    "\053\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\206\007\051\013\045\016\046\017\057\023\036" +
    "\030\031\050\047\051\052\001\001\000\024\006\205\007" +
    "\051\013\045\016\046\017\057\023\036\030\031\050\047" +
    "\051\052\001\001\000\004\015\102\001\001\000\004\015" +
    "\102\001\001\000\004\015\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\215\021\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\310\001\001\000\016\020\231\040\224\041\220\042" +
    "\233\043\221\045\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\020\231\040\303\041\220\042\233\044" +
    "\302\045\232\001\001\000\006\016\215\021\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\215\021\274\001\001\000\010\016\265\046\263" +
    "\047\264\001\001\000\004\045\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\246\042\255\001\001" +
    "\000\006\020\246\042\254\001\001\000\006\020\246\042" +
    "\253\001\001\000\006\020\246\042\245\001\001\000\004" +
    "\032\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\252\001\001\000\004\020\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\231\040" +
    "\257\041\220\042\233\045\232\001\001\000\002\001\001" +
    "\000\014\020\231\040\262\041\220\042\233\045\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\267\001" +
    "\001\000\002\001\001\000\006\016\265\046\273\001\001" +
    "\000\016\020\231\040\224\041\220\042\233\043\272\045" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\020\231\040\224\041\220\042\233\043" +
    "\276\045\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\020\231\040\224\041\220\042\233\043\301\045" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\231\040\307\041" +
    "\220\042\233\045\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\316" +
    "\025\322\026\323\027\320\030\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\316" +
    "\027\332\030\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\316\026\331\027\320\030\317\001\001" +
    "\000\012\016\316\026\330\027\320\030\317\001\001\000" +
    "\004\032\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\335\001\001\000\002\001\001\000\004\020\337" +
    "\001\001\000\002\001\001\000\004\034\342\001\001\000" +
    "\010\016\063\017\344\035\343\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\316\026\347\027\320\030\317\001\001\000\002" +
    "\001\001\000\006\016\063\017\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\316\026\354\027\320" +
    "\030\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\020\231\040\357\041\220\042\233\045\232\001\001" +
    "\000\002\001\001\000\004\037\362\001\001\000\012\016" +
    "\063\017\364\022\366\036\363\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\372\031\373\001\001\000\006" +
    "\016\063\017\371\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\375\001\001\000\002" +
    "\001\001\000\010\016\063\017\364\022\u0100\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\372\031\u0102" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\211\024\067\001\001\000\002\001\001\000\004\023\u0108" +
    "\001\001\000\024\006\u0111\007\051\013\045\016\046\017" +
    "\057\023\036\030\031\050\047\051\052\001\001\000\002" +
    "\001\001\000\024\006\u010a\007\051\013\045\016\046\017" +
    "\057\023\036\030\031\050\047\051\052\001\001\000\006" +
    "\012\u010d\015\102\001\001\000\024\006\u010f\007\051\013" +
    "\045\016\046\017\057\023\036\030\031\050\047\051\052" +
    "\001\001\000\010\011\u010e\016\u0106\023\u0105\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\102\001\001" +
    "\000\002\001\001\000\006\012\u0112\015\102\001\001\000" +
    "\002\001\001\000\024\006\u0114\007\051\013\045\016\046" +
    "\017\057\023\036\030\031\050\047\051\052\001\001\000" +
    "\006\012\u0115\015\102\001\001\000\002\001\001\000\006" +
    "\016\063\017\u0117\001\001\000\002\001\001\000\006\016" +
    "\063\017\u0119\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\316\026\u011c\027\320\030\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\231\040\u011f" +
    "\041\220\042\233\045\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\231\040\u0122\041\220\042\233" +
    "\045\232\001\001\000\002\001\001\000\024\006\u0145\007" +
    "\051\013\045\016\046\017\057\023\036\030\031\050\047" +
    "\051\052\001\001\000\002\001\001\000\004\015\u013d\001" +
    "\001\000\002\001\001\000\024\006\u012f\007\051\013\045" +
    "\016\046\017\057\023\036\030\031\050\047\051\052\001" +
    "\001\000\010\016\u0125\023\u0124\056\u012e\001\001\000\002" +
    "\001\001\000\024\006\u012c\007\051\013\045\016\046\017" +
    "\057\023\036\030\031\050\047\051\052\001\001\000\002" +
    "\001\001\000\004\015\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\102\001\001\000\014\016\u0125" +
    "\023\u0124\054\u0128\055\u0131\056\u0129\001\001\000\004\057" +
    "\u0134\001\001\000\024\006\u0138\007\051\013\045\016\046" +
    "\017\057\023\036\030\031\050\047\051\052\001\001\000" +
    "\014\016\u0125\023\u0124\054\u0128\055\u0136\056\u0129\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\102\001\001\000\014\016\u0125" +
    "\023\u0124\054\u0128\055\u013a\056\u0129\001\001\000\004\057" +
    "\u013b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\u013f\007\051\013\045\016\046\017" +
    "\057\023\036\030\031\050\047\051\052\001\001\000\004" +
    "\015\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\u0143\007\051\013\045\016\046\017\057\023\036" +
    "\030\031\050\047\051\052\001\001\000\004\015\102\001" +
    "\001\000\002\001\001\000\004\015\102\001\001\000\014" +
    "\016\u0125\023\u0124\054\u0128\055\u0147\056\u0129\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\102\001\001" +
    "\000\024\006\u014b\007\051\013\045\016\046\017\057\023" +
    "\036\030\031\050\047\051\052\001\001\000\006\010\u014d" +
    "\015\102\001\001\000\024\006\u0153\007\051\013\045\016" +
    "\046\017\057\023\036\030\031\050\047\051\052\001\001" +
    "\000\002\001\001\000\024\006\u014f\007\051\013\045\016" +
    "\046\017\057\023\036\030\031\050\047\051\052\001\001" +
    "\000\004\015\102\001\001\000\024\006\u0151\007\051\013" +
    "\045\016\046\017\057\023\036\030\031\050\047\051\052" +
    "\001\001\000\006\010\u0152\015\102\001\001\000\002\001" +
    "\001\000\004\015\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\063\017\364\022" +
    "\u0158\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\006\175\007\051\013\045\016\046" +
    "\017\057\023\036\030\031\050\047\051\052\052\u015f\053" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\u0163\007\051\013\045\016\046\017" +
    "\057\023\036\030\031\050\047\051\052\001\001\000\004" +
    "\015\102\001\001\000\002\001\001\000\004\023\u0167\001" +
    "\001\000\024\006\u016a\007\051\013\045\016\046\017\057" +
    "\023\036\030\031\050\047\051\052\001\001\000\002\001" +
    "\001\000\024\006\u0169\007\051\013\045\016\046\017\057" +
    "\023\036\030\031\050\047\051\052\001\001\000\004\015" +
    "\102\001\001\000\004\015\102\001\001\000\004\015\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* The file being parsed. Only needed for location info. */
    File file;                   

    /* Buffer to get syntax error ino from message and location info
       from CUP's syntax_error to CUP's report_fatal_error
       function. */
    String errorMessage;
    pacioli.Location errorLocation;

   /* Public interface */
    public Parser(Lexer lex, ComplexSymbolFactory sf, File file) {
        super(lex,sf);
        this.file = file;
    }

    public static ProgramNode parseFile(File file) throws Exception {
        BufferedReader reader = new BufferedReader(new FileReader(file));
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        Lexer lexer = new Lexer(reader, csf, file, null);
        Parser parser = new Parser(lexer, csf, file);
        return (ProgramNode) parser.parse().value;
    }

   /* CUP overrides to get error handling with location info */
    public void report_error(String message, Object info) {
    }

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        done_parsing();      
        throw new PacioliException(errorLocation, errorMessage);
    }

    public void syntax_error(Symbol cur_token) {
        assert(cur_token instanceof ComplexSymbol);
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();
        for (Integer expected : ids){
            list.add(symbl_name_from_id(expected));
        }
        ComplexSymbol token = (ComplexSymbol) cur_token;
        errorLocation = makeLoc(token.getLeft(), token.getRight());
        errorMessage = "Expected one of " + list;
    }

   /* Utility functions for the grammar rules */
    private pacioli.Location makeLoc(Location from, Location to) {
        pacioli.Location pacioliFrom = new pacioli.Location(file, from.getLine(), from.getColumn(), from.getOffset());
        pacioli.Location pacioliTo = new pacioli.Location(file, to.getLine(), to.getColumn(), to.getOffset());
        return pacioliFrom.join(pacioliTo);
    }

    private static List<String> idNames(List<IdentifierNode> ids) {
        List<String> names = new ArrayList<String>();
        for (IdentifierNode id: ids) {
            names.add(id.getName());
        }
        return names;
    }

    private ValueDefinition functionDefinition(pacioli.Location loc, IdentifierNode id, List<IdentifierNode> args, ExpressionNode body) {
        ExpressionNode function = new LambdaNode(freshUnderscores(idNames(args)), body, loc);
        return new ValueDefinition(loc, id, function);
    }

    private static List<String> freshUnderscores(List<String> names) {
          List<String> fresh = new ArrayList<String>();
          for (String name : names) {
              if (name.equals("_")) {
                  fresh.add(freshUnderscore());
              } else {
                  fresh.add(name);
              }
          }
          return fresh;
      }

    private static int counter = 0;

    private static String freshUnderscore() {
        return "_" + counter++;
    }
    
    private static String freshName(String prefix) {
        return prefix + counter++;
    }

    private static ExpressionNode binop(String name, ExpressionNode left, ExpressionNode right) {
        pacioli.Location loc = left.getLocation().join(right.getLocation());
        List<ExpressionNode> args = new ArrayList<ExpressionNode>();
        args.add(left);
        args.add(right);
        return new ApplicationNode(new IdentifierNode(name, loc), args, loc);
    }

    private static ExpressionNode singleop(String name, ExpressionNode exp, pacioli.Location loc) {
        List<ExpressionNode> args = new ArrayList<ExpressionNode>();
        args.add(exp);
        return new ApplicationNode(new IdentifierNode(name, loc), args, loc);
    }

    private static class GeneratorClause {
        public final IdentifierNode id;
        public final ExpressionNode list;
        public GeneratorClause(IdentifierNode id, ExpressionNode list) {
            this.id = id;
            this.list = list;
        }
    }

    private static class TupleGeneratorClause {
        public final List<IdentifierNode> ids;
        public final ExpressionNode list;
        public TupleGeneratorClause(List<IdentifierNode> ids, ExpressionNode list) {
            this.ids = ids;
            this.list = list;
        }
    }

    private static class AssignmentClause {
        public final IdentifierNode id;
        public final ExpressionNode value;
        public AssignmentClause(IdentifierNode id, ExpressionNode value) {
            this.id = id;
            this.value = value;
        }
    }

    private static class TupleAssignmentClause {
        public final List<IdentifierNode> ids;
        public final ExpressionNode value;
        public TupleAssignmentClause(List<IdentifierNode> ids, ExpressionNode value) {
            this.ids = ids;
            this.value = value;
        }
    }

    private static ExpressionNode desugarComprehension(pacioli.Location loc, ExpressionNode e, List<Object> ps) throws PacioliException {

        String accuName = freshName("_c_accu");
        String tupName = freshName("_c_tup");

        ExpressionNode addMut = new IdentifierNode("add_mut", loc);
        ExpressionNode accu = new IdentifierNode(accuName, loc);
        ExpressionNode body = new ApplicationNode(addMut, Arrays.asList(accu, e), loc);

        for (int i = ps.size() - 1; 0 <= i; i--) {
            Object part = ps.get(i);
            if (part instanceof GeneratorClause) {
                GeneratorClause clause = (GeneratorClause) part;
                body = new ApplicationNode(
                                new IdentifierNode("loop_list", loc),
                                Arrays.asList((ExpressionNode) new IdentifierNode(accuName, loc),
                                              new LambdaNode(freshUnderscores(Arrays.asList(accuName, clause.id.getName())), body, loc), clause.list),
                                loc);
            } else if (part instanceof TupleGeneratorClause) {
                TupleGeneratorClause clause = (TupleGeneratorClause) part;

                List<String> args = new ArrayList<String>();
                for (IdentifierNode var : clause.ids) {
                    args.add(var.getName());
                }

                ExpressionNode apply = new IdentifierNode("apply", loc);
                ExpressionNode restLambda = new LambdaNode(freshUnderscores(args), body, loc);
                ExpressionNode tup = new IdentifierNode(tupName, loc);
                ExpressionNode loopList = new IdentifierNode("loop_list", loc);
                ExpressionNode accuId = new IdentifierNode(accuName, loc);
                ExpressionNode restApp = new ApplicationNode(apply, Arrays.asList(restLambda, tup), loc);
                ExpressionNode restAppLambda = new LambdaNode(Arrays.asList(accuName, tupName), restApp, loc);

                body = new ApplicationNode(loopList, Arrays.asList(accuId, restAppLambda, clause.list), loc);
            } else if (part instanceof AssignmentClause) {
                AssignmentClause clause = (AssignmentClause) part;

                body = new ApplicationNode(new LambdaNode(freshUnderscores(Arrays.asList(clause.id.getName())), body, loc), Arrays.asList(clause.value), loc);
            } else if (part instanceof TupleAssignmentClause) {

                TupleAssignmentClause clause = (TupleAssignmentClause) part;

                List<String> args = new ArrayList<String>();
                for (IdentifierNode var : clause.ids) {
                    args.add(var.getName());
                }

                ExpressionNode apply = new IdentifierNode("apply", loc);
                ExpressionNode restLambda = new LambdaNode(freshUnderscores(args), body, loc);

                body = new ApplicationNode(apply, Arrays.asList(restLambda, clause.value), loc);
            } else if (part instanceof ExpressionNode) {
                ExpressionNode clause = (ExpressionNode) part;
                body = new BranchNode(clause, body, new IdentifierNode(accuName, loc), loc);
            } else {
                throw new PacioliException(loc, "Unexpected clause %s", part);
            }
        }

        ExpressionNode lambda = new LambdaNode(Arrays .asList(accuName), body, loc);
        ExpressionNode emptyListId = new IdentifierNode("empty_list", loc);
        ExpressionNode emptyList = new ApplicationNode(emptyListId, new ArrayList<ExpressionNode>(), loc);

        return new ApplicationNode(lambda, Arrays.asList(emptyList), loc);
    }

    private static ExpressionNode desugarFoldComprehension(pacioli.Location loc, IdentifierNode op, ExpressionNode e, List<Object> ps) throws PacioliException {
        ExpressionNode body = desugarComprehension(loc, e, ps);
        if (op.getName().equals("sum")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_sum", loc), Arrays.asList(body), loc);
        } else if (op.getName().equals("count")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_count", loc), Arrays.asList(body), loc);
        } else if (op.getName().equals("all")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_all", loc), Arrays.asList(body), loc);
        } else if (op.getName().equals("some")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_some", loc), Arrays.asList(body), loc);
        } else if (op.getName().equals("gcd")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_gcd", loc), Arrays.asList(body), loc);
        } else if (op.getName().equals("concat")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_concat", loc), Arrays.asList(body), loc);
        } else {
            throw new PacioliException(op.getLocation(), "Comprehension operator '%s' unknown", op.getName());
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= includes commands 
            {
              ProgramNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Node> i = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Definition> c = (List<Definition>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<IncludeNode> includes = new ArrayList<IncludeNode>();
                                                       List<ImportNode> imports = new ArrayList<ImportNode>();
                                                       for (Node node : i) {
                                                           if (node instanceof IncludeNode) {
                                                               includes.add((IncludeNode) node);
                                                           } else {
                                                               imports.add((ImportNode) node);
                                                           }
                                                       }
                                                       RESULT = new ProgramNode(new pacioli.Location(file, 0, 0, 0), includes, imports, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // includes ::= includes INCLUDE path SEMICOLON 
            {
              List<Node> RESULT =null;
		Location isxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location isxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<Node> is = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		StringNode p = (StringNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 is.add(new IncludeNode(makeLoc(pxleft, pxright), p)); RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // includes ::= includes IMPORT path SEMICOLON 
            {
              List<Node> RESULT =null;
		Location isxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location isxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<Node> is = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		StringNode p = (StringNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 is.add(new ImportNode(makeLoc(pxleft, pxright), p)); RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // includes ::= 
            {
              List<Node> RESULT =null;
		 RESULT = new ArrayList<Node>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // commands ::= commands command SEMICOLON 
            {
              List<Definition> RESULT =null;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Definition> cs = (List<Definition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Definition c = (Definition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 cs.add(c); RESULT = cs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commands",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // commands ::= 
            {
              List<Definition> RESULT =null;
		 RESULT = new LinkedList<Definition>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commands",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command ::= DEFINE id EQL expr 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValueDefinition(makeLoc(dxleft, exright), id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command ::= DEFINE id idlist EQL expr 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = functionDefinition(makeLoc(dxleft, exright), id, ids, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // command ::= DECLARE quali ids DBLCLN schema 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultiDeclaration(makeLoc(dxleft, sxright), ids, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // command ::= DEFINDEX id 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> names = new ArrayList<String>();
                                                       RESULT = new IndexSetDefinition(makeLoc(dxleft, idxright), id, names); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // command ::= DEFINDEX id EQL LBRC names RBRC 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IndexSetDefinition(makeLoc(dxleft, pxright), id, idNames(ids)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // command ::= DEFTYPE schema EQL type 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeDefinition(makeLoc(dxleft, txright), s.context, s.type, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // command ::= DEFALIAS id EQL unit 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AliasDefinition(makeLoc(dxleft, uxright), id, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // command ::= DEFUNIT typeid EXCL typeid EQL unitvec 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TypeIdentifierNode id = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeIdentifierNode n = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<UnitDecl> ps = (List<UnitDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 /* Todo: remove hashmap and use pair list directly in UnitVectorDefinition */
                                                       java.util.Map<String, UnitNode> unitVector = new HashMap<String, UnitNode>();
                                                       for (UnitDecl pair: ps) {
                                                           unitVector.put(pair.key.getName(), pair.value);
                                                       }
                                                       RESULT = new UnitVectorDefinition(makeLoc(dxleft, psxright), id, n, ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // command ::= DEFUNIT id STRING 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitDefinition(makeLoc(dxleft, sxright), id, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // command ::= DEFUNIT id STRING EQL dimnum 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode def = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitDefinition(makeLoc(dxleft, defxright), id, s, def); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // command ::= DEFMATRIX id DBLCLN type EQL matrix 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode s = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ValueDecl> m = (List<ValueDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 /* Change MatrixLiteralNode to accept a ValueDecl list */
                                                       //List<Pair<List<String>, String>> stringPairs = new ArrayList<Pair<List<String>, String>>();
                                                       //for (ValueDecl decl: m) {
                                                         //  stringPairs.add(new Pair<List<String>, String>(idNames(decl.key), decl.value));
                                                       //}
                                                       ExpressionNode body = new MatrixLiteralNode(makeLoc(mxleft, mxright), s, m);
                                                       //ExpressionNode body = new MatrixLiteralNode(makeLoc(mxleft, mxright), s, stringPairs);
                                                       RESULT = new ValueDefinition(makeLoc(dxleft, mxright), id, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // command ::= DEFCONV id DBLCLN type 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(dxleft, txright);
                                                       ExpressionNode conv = new ConversionNode(loc, t);
                                                       RESULT = new ValueDefinition(loc, id, conv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // command ::= expr 
            {
              Definition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Toplevel(e.getLocation(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // quali ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("quali",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // quali ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("quali",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // path ::= STRING 
            {
              StringNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(s, makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // path ::= IDENTIFIER 
            {
              StringNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(s, makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // path ::= path DIV STRING 
            {
              StringNode RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		StringNode p = (StringNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(p.valueString() + "/" + s, makeLoc(pxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // path ::= path DIV IDENTIFIER 
            {
              StringNode RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		StringNode p = (StringNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(p.valueString() + "/" + s, makeLoc(pxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // matrix ::= LBRC RBRC 
            {
              List<ValueDecl> RESULT =null;
		 RESULT = new LinkedList<ValueDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // matrix ::= LBRC matrix_parts RBRC 
            {
              List<ValueDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ValueDecl> ps = (List<ValueDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // matrix_parts ::= names TO number 
            {
              List<ValueDecl> RESULT =null;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ns = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ValueDecl>(Arrays.asList(new ValueDecl(ns, n))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_parts",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // matrix_parts ::= matrix_parts COMMA names TO number 
            {
              List<ValueDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<ValueDecl> ps = (List<ValueDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ns = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(new ValueDecl(ns, n)); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_parts",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unitvec ::= LBRC RBRC 
            {
              List<UnitDecl> RESULT =null;
		 RESULT = new LinkedList<UnitDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unitvec ::= LBRC unitvec_parts RBRC 
            {
              List<UnitDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<UnitDecl> ps = (List<UnitDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unitvec_parts ::= name COLON unit 
            {
              List<UnitDecl> RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<UnitDecl>(Arrays.asList(new UnitDecl(n, u))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec_parts",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unitvec_parts ::= unitvec_parts COMMA name COLON unit 
            {
              List<UnitDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<UnitDecl> ps = (List<UnitDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(new UnitDecl(n, u)); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec_parts",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // number ::= unsigned 
            {
              String RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // number ::= NEG unsigned 
            {
              String RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "-" + u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // integer ::= NATURAL 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // integer ::= NEG NATURAL 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "-" + n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unsigned ::= DECIMAL 
            {
              String RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unsigned ::= NATURAL 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // id ::= IDENTIFIER 
            {
              IdentifierNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierNode(id, makeLoc(idxleft, idxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ids ::= id 
            {
              List<IdentifierNode> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<IdentifierNode>(Arrays.asList(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ids ::= ids COMMA id 
            {
              List<IdentifierNode> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ids.add(id); RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // idlist ::= LPAR RPAR 
            {
              List<IdentifierNode> RESULT =null;
		 RESULT = new LinkedList<IdentifierNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // idlist ::= LPAR idlist_tail 
            {
              List<IdentifierNode> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // idlist_tail ::= id RPAR 
            {
              List<IdentifierNode> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<IdentifierNode>(Arrays.asList(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist_tail",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // idlist_tail ::= id COMMA idlist_tail 
            {
              List<IdentifierNode> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ids.add(0, id); RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist_tail",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // typeid ::= IDENTIFIER 
            {
              TypeIdentifierNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeIdentifierNode(makeLoc(idxleft, idxright), id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeid",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // name ::= id 
            {
              IdentifierNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // name ::= STRING 
            {
              IdentifierNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierNode(s, makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // names ::= name 
            {
              List<IdentifierNode> RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<IdentifierNode>(Arrays.asList(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("names",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // names ::= names COMMA name 
            {
              List<IdentifierNode> RESULT =null;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ns = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ns.add(n); RESULT = ns; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("names",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exprs ::= expr 
            {
              List<ExpressionNode> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ExpressionNode>(Arrays.asList(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exprs ::= exprs COMMA expr 
            {
              List<ExpressionNode> RESULT =null;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ExpressionNode> es = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 es.add(e); RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exprlist ::= LPAR RPAR 
            {
              List<ExpressionNode> RESULT =null;
		 RESULT = new LinkedList<ExpressionNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exprlist ::= LPAR exprs RPAR 
            {
              List<ExpressionNode> RESULT =null;
		Location exprsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exprsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> exprs = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exprs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr_no_id 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= id 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_no_id ::= NEG expr 
            {
              ExpressionNode RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("negative", e, makeLoc(nxleft, exright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_no_id ::= idlist 
            {
              ExpressionNode RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdListNode(makeLoc(idsxleft, idsxright), ids); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_no_id ::= LPAR expr_no_id RPAR 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_no_id ::= expr NEG expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("minus", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_no_id ::= expr HAT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("expt", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_no_id ::= expr PER expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("dim_div", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_no_id ::= expr EQL expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("equal", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_no_id ::= expr TRANS 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("transpose", e, makeLoc(exleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_no_id ::= expr RECI 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("reciprocal", e, makeLoc(exleft, rxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_no_id ::= expr DIMINV 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("dim_inv", e, makeLoc(exleft, dxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_no_id ::= expr MULT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("multiply", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_no_id ::= expr PLUS expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("sum", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_no_id ::= expr MMULT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("mmult", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_no_id ::= expr MEXPT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("mexpt", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr_no_id ::= expr DIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("divide", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr_no_id ::= expr MDIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("right_division", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_no_id ::= expr LEFTDIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("left_divide", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_no_id ::= expr MLEFTDIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("left_division", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_no_id ::= expr LSCALE expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("scale", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_no_id ::= expr RSCALE expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("rscale", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr_no_id ::= expr LSCALEDOWN expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("lscale_down", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr_no_id ::= expr RSCALEDOWN expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("scale_down", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr_no_id ::= expr LEQ expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("less_eq", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr_no_id ::= expr GTQ expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("greater_eq", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr_no_id ::= expr NEQ expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("not_equal", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr_no_id ::= expr LE expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("less", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr_no_id ::= expr GT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("greater", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr_no_id ::= expr FOLLOWSFROM expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e2, e1, new ConstNode("true", loc), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr_no_id ::= expr IMPLIES expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e1, e2, new ConstNode("true", loc), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr_no_id ::= expr EQUIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("equiv", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr_no_id ::= expr AND expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e1, e2, new ConstNode("false", loc), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr_no_id ::= expr OR expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e1, new ConstNode("true", loc), e2, loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr_no_id ::= expr exprlist 
            {
              ExpressionNode RESULT =null;
		Location funxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location funxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode fun = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ExpressionNode> args = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ApplicationNode(fun, args, makeLoc(funxleft, argsxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr_no_id ::= FN idlist expr END 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode b = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LambdaNode(freshUnderscores(idNames(ids)), b, makeLoc(lxleft, exright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr_no_id ::= IF expr THEN expr if_tail 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode b = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BranchNode(c, b, t, makeLoc(ixleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr_no_id ::= LET lettail 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr_no_id ::= listlit 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr_no_id ::= comprehension 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr_no_id ::= PIPE matrix_type PIPE 
            {
              ExpressionNode RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeNode m = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MatrixTypeNode(makeLoc(mxleft, mxright), m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr_no_id ::= BEGIN sequence END 
            {
              ExpressionNode RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StatementNode(makeLoc(bxleft, exright), s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_no_id ::= indexkey 
            {
              ExpressionNode RESULT =null;
		Location kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		KeyNode k = (KeyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = k; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_no_id ::= unsigned 
            {
              ExpressionNode RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstNode(u, makeLoc(uxleft, uxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_no_id ::= BOOLEAN 
            {
              ExpressionNode RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstNode(b, makeLoc(bxleft, bxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_no_id ::= STRING 
            {
              ExpressionNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(s, makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // if_tail ::= ELSEIF expr THEN expr if_tail 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode b = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BranchNode(c, b, t, makeLoc(ixleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_tail",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // if_tail ::= ELSE expr END 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_tail",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // indexkey ::= name AT name 
            {
              KeyNode RESULT =null;
		Location idxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode idx = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new KeyNode(idx.getName(), id.getName(), makeLoc(idxxleft, idxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexkey",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // indexkey ::= indexkey MOD name AT name 
            {
              KeyNode RESULT =null;
		Location kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		KeyNode k = (KeyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode idx = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 KeyNode node = new KeyNode(idx.getName(), id.getName(), makeLoc(idxxleft, idxright));
                                                       RESULT = k.merge(node); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexkey",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lettail ::= id EQL expr letrest 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> args = freshUnderscores(Arrays.asList(id.getName()));  // remove fresh underscors
                                                       BindingNode binding = new LetBindingNode(makeLoc(idxleft, exright), args.get(0), e);
                                                       RESULT = new LetNode(Arrays.asList(binding), r, makeLoc(idxleft, rxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lettail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lettail ::= idlist EQL expr letrest 
            {
              ExpressionNode RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> args = freshUnderscores(idNames(ids));
                                                       pacioli.Location loc = makeLoc(idsxleft, rxright);
                                                       ExpressionNode fun = new LambdaNode(args, r, makeLoc(idsxleft, exright));
                                                       RESULT = new ApplicationNode(new IdentifierNode("apply", loc), Arrays.asList(fun, e), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lettail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lettail ::= id idlist EQL expr letrest 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //List<String> rArgs = freshUnderscores(Arrays.asList(id.getName()));
                                                       List<String> eArgs = freshUnderscores(idNames(ids)); // remove fresh underscors
                                                       pacioli.Location loc = makeLoc(idxleft, rxright);
                                                       ExpressionNode eFun = new LambdaNode(eArgs, e, loc);
                                                       BindingNode binding = new LetBindingNode(makeLoc(idsxleft, exright), id.getName(), eFun);
                                                       RESULT = new LetNode(Arrays.asList(binding), r, loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lettail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // letrest ::= IN expr END 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("letrest",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // letrest ::= COMMA lettail 
            {
              ExpressionNode RESULT =null;
		Location ltxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ltxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode lt = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("letrest",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sequence ::= statements 
            {
              SequenceNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ExpressionNode> s = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SequenceNode(makeLoc(sxleft, sxright), s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // statements ::= statement 
            {
              List<ExpressionNode> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode s = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ExpressionNode>(Arrays.asList(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // statements ::= statements statement 
            {
              List<ExpressionNode> RESULT =null;
		Location ssxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ssxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> ss = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode s = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // statement ::= id ASSIGN expr SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentNode(makeLoc(idxleft, sxright), id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // statement ::= idlist ASSIGN expr SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TupleAssignmentNode(makeLoc(idsxleft, sxright), ids, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // statement ::= id exprlist SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> es = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ApplicationNode(id, es, makeLoc(idxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // statement ::= RETURN expr SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(rxleft, sxright);
                                                       RESULT = new ReturnNode(loc, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // statement ::= RETURN SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(rxleft, sxright);
                                                       RESULT = new ReturnNode(loc, new IdentifierNode("nothing", loc)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // statement ::= WHILE expr DO sequence END 
            {
              ExpressionNode RESULT =null;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileNode(makeLoc(wxleft, nxright), e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // statement ::= IF expr THEN sequence stm_if_tail 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(ixleft, txright);
                                                       RESULT = new IfStatementNode(loc, e, s, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // stm_if_tail ::= ELSEIF expr THEN sequence stm_if_tail 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, txright);
                                                       RESULT = new IfStatementNode(loc, e, s, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stm_if_tail",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // stm_if_tail ::= ELSE sequence END 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stm_if_tail",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // stm_if_tail ::= END 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(exleft, exright);
                                                       RESULT = new ApplicationNode(new IdentifierNode("skip", loc), new ArrayList<ExpressionNode>(), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stm_if_tail",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // listlit ::= LBRACK RBRACK 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, rxright);
                                                       RESULT = new ApplicationNode(new IdentifierNode("empty_list", loc), new ArrayList<ExpressionNode>(), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listlit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // listlit ::= LBRACK exprs RBRACK 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> es = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, rxright);
                                                       ExpressionNode list = new ApplicationNode(new IdentifierNode("empty_list", loc), new ArrayList<ExpressionNode>(), loc);
                                                       for (ExpressionNode item : es) {
                                                           List<ExpressionNode> tup = new ArrayList<ExpressionNode>();
                                                           tup.add(list);
                                                           tup.add(item);
                                                           list = new ApplicationNode(new IdentifierNode("add_mut", loc), tup, loc);
                                                       }
                                                       RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listlit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // comprehension ::= LBRACK expr PIPE parts RBRACK 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Object> ps = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, rxright);
                                                       RESULT = desugarComprehension(loc, e, ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comprehension",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // comprehension ::= id LBRACK expr PIPE parts RBRACK 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Object> ps = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(idxleft, rxright);
                                                       RESULT = desugarFoldComprehension(loc, id, e, ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comprehension",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // parts ::= part 
            {
              List<Object> RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Object>(Arrays.asList(p)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parts",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parts ::= parts COMMA part 
            {
              List<Object> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Object> ps = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(p); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parts",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // part ::= expr 
            {
              Object RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // part ::= expr FROM expr 
            {
              Object RESULT =null;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode g = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if (g instanceof IdListNode) {
                                                           RESULT = new TupleGeneratorClause(((IdListNode)g).ids, e);
                                                        } else if (g instanceof IdentifierNode) {
                                                            RESULT = new GeneratorClause((IdentifierNode) g, e);
                                                        } else {
                                                            errorLocation = g.getLocation();
                                                            errorMessage = "Expected a variable or tuple";
                                                            report_fatal_error("Fixme: this string is not used? How to throw an error here?", g);
                                                        }
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // part ::= expr ASSIGN expr 
            {
              Object RESULT =null;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode g = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if (g instanceof IdListNode) {
                                                           RESULT = new TupleAssignmentClause(((IdListNode)g).ids, e);
                                                        } else if (g instanceof IdentifierNode) {
                                                            RESULT = new AssignmentClause((IdentifierNode) g, e);
                                                        } else {
                                                            errorLocation = g.getLocation();
                                                            errorMessage = "Expected a variable or tuple";
                                                            report_fatal_error("Fixme: this string is not used? How to throw an error here?", g);
                                                        } 
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // schema ::= FORTYPE ids COLON schema 
            {
              SchemaNode RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TypeContext context = s.context;
                                                       for (IdentifierNode id: ids) {
              		                                   context.addTypeVar(id.getName());
                                                       }
                                                       RESULT = new SchemaNode(makeLoc(fxleft, sxright), context , s.type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("schema",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // schema ::= FORINDEX ids COLON schema 
            {
              SchemaNode RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TypeContext context = s.context;
                                                       for (IdentifierNode id: ids) {
              		                                   context.addIndexVar(id.getName());
                                                       }
                                                       RESULT = new SchemaNode(makeLoc(fxleft, sxright), context , s.type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("schema",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // schema ::= FORUNIT vars COLON schema 
            {
              SchemaNode RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location vsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location vsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> vs = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TypeContext context = s.context;
                                                       for (String v: vs) {
              		                                   context.addUnitVar(v);
                                                       }
                                                       RESULT = new SchemaNode(makeLoc(fxleft, sxright), context , s.type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("schema",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // schema ::= type 
            {
              SchemaNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SchemaNode(makeLoc(txleft, txright), new TypeContext(), t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("schema",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // vars ::= var 
            {
              List<String> RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<String>(Arrays.asList(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // vars ::= vars COMMA var 
            {
              List<String> RESULT =null;
		Location vsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location vsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> vs = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 vs.add(v); RESULT = vs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // var ::= id 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id.getName(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // var ::= id EXCL id 
            {
              String RESULT =null;
		Location idxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode idx = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = idx.getName() + "!" + id.getName(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // types ::= type 
            {
              List<TypeNode> RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<TypeNode>(Arrays.asList(t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // types ::= types COMMA type 
            {
              List<TypeNode> RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<TypeNode> ts = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ts.add(t); RESULT = ts; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // typelist ::= LPAR RPAR 
            {
              List<TypeNode> RESULT =null;
		 RESULT = new LinkedList<TypeNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typelist",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // typelist ::= LPAR types RPAR 
            {
              List<TypeNode> RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<TypeNode> ts = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ts; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typelist",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // type ::= typelist TO type 
            {
              TypeNode RESULT =null;
		Location asxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location asxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<TypeNode> as = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode b = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TypeNode domain = new TypeApplicationNode(makeLoc(asxleft, bxright), 
                                                                            new TypeIdentifierNode(makeLoc(asxleft, asxright), "Tuple"), as);
                                                       RESULT = new FunctionTypeNode(makeLoc(asxleft, bxright), domain, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // type ::= typeid TO type 
            {
              TypeNode RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeIdentifierNode a = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode b = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionTypeNode(makeLoc(axleft, bxright), a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // type ::= typeid typelist 
            {
              TypeNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeIdentifierNode id = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<TypeNode> ts = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeApplicationNode(makeLoc(idxleft, tsxright), id, ts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // type ::= matrix_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // matrix_type ::= dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // matrix_type ::= dim_type PER dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypePerNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // dim_type ::= dim_type MULT dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeMultiplyNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // dim_type ::= dim_type DIV dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeDivideNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // dim_type ::= dim_type HAT integer 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypePowerNode(makeLoc(xxleft, nxright), x, new NumberTypeNode(makeLoc(nxleft, nxright), n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // dim_type ::= dim_type MOD dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeKroneckerNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // dim_type ::= typeid 
            {
              TypeNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdentifierNode id = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // dim_type ::= typeid COLON typeid 
            {
              TypeNode RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeIdentifierNode p = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdentifierNode u = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrefixUnitTypeNode(makeLoc(pxleft, uxright), p, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // dim_type ::= typeid EXCL 
            {
              TypeNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeIdentifierNode i = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BangTypeNode(makeLoc(ixleft, exright), i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // dim_type ::= typeid EXCL typeid 
            {
              TypeNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeIdentifierNode i = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdentifierNode u = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BangTypeNode(makeLoc(ixleft, uxright), i, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // dim_type ::= NATURAL 
            {
              TypeNode RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (n.equals("1")) {
                                                           RESULT = new NumberTypeNode(makeLoc(nxleft, nxright), n);
                                                       } else {
                                                           report_fatal_error("Number unexpected. Only number 1 allowed.", n);
                                                       } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // unit ::= unit_term 
            {
              UnitNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode t = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // unit ::= unit MULT unit 
            {
              UnitNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		UnitNode x = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode y = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitOperationNode(makeLoc(xxleft, yxright), "*", x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // unit ::= unit DIV unit 
            {
              UnitNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		UnitNode x = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode y = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitOperationNode(makeLoc(xxleft, yxright), "/", x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // unit ::= unit HAT integer 
            {
              UnitNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		UnitNode x = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitPowerNode(makeLoc(xxleft, nxright), x, new NumberUnitNode(n, makeLoc(nxleft, nxright))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // unit_term ::= LPAR unit_term RPAR 
            {
              UnitNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		UnitNode t = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // unit_term ::= id 
            {
              UnitNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitIdentifierNode(id.getLocation(), id.getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // unit_term ::= id COLON id 
            {
              UnitNode RESULT =null;
		Location prexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location prexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode pre = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitIdentifierNode(pre.getLocation().join(id.getLocation()), pre.getName(), id.getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // unit_term ::= unsigned 
            {
              UnitNode RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NumberUnitNode(n, makeLoc(nxleft, nxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // dimnum ::= unit 
            {
              UnitNode RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimnum",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
