
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pacioli.parser;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.List;
import java.util.HashMap;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.LinkedList;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import pacioli.PacioliException;
import pacioli.ast.*;
import pacioli.ast.definition.*;
import pacioli.ast.definition.UnitVectorDefinition.UnitDecl;
import pacioli.ast.expression.MatrixLiteralNode.ValueDecl;
import pacioli.ast.expression.*;
import pacioli.ast.expression.LetNode.BindingNode;
import pacioli.ast.unit.*;
import pacioli.types.ast.*;
import pacioli.TypeContext;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\263\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\006\000\002\003\002\000\002\004\005" +
    "\000\002\004\002\000\002\005\006\000\002\005\007\000" +
    "\002\005\007\000\002\005\004\000\002\005\010\000\002" +
    "\005\006\000\002\005\006\000\002\005\006\000\002\005" +
    "\010\000\002\005\005\000\002\005\007\000\002\005\010" +
    "\000\002\005\006\000\002\005\005\000\002\005\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\002\000\002" +
    "\033\003\000\002\033\003\000\002\033\005\000\002\033" +
    "\005\000\002\037\004\000\002\037\005\000\002\036\005" +
    "\000\002\036\007\000\002\034\004\000\002\034\005\000" +
    "\002\035\005\000\002\035\007\000\002\031\003\000\002" +
    "\031\004\000\002\032\003\000\002\032\004\000\002\030" +
    "\003\000\002\030\003\000\002\016\003\000\002\021\003" +
    "\000\002\021\005\000\002\023\004\000\002\023\004\000" +
    "\002\024\004\000\002\024\005\000\002\020\003\000\002" +
    "\017\003\000\002\017\003\000\002\022\003\000\002\022" +
    "\005\000\002\014\003\000\002\014\005\000\002\015\004" +
    "\000\002\015\005\000\002\006\003\000\002\006\003\000" +
    "\002\007\004\000\002\007\003\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\004\000\002\007\005\000\002\007\007\000\002\007\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\007\000\002\010\005\000\002\050\005\000\002\050\007" +
    "\000\002\011\006\000\002\011\006\000\002\011\007\000" +
    "\002\012\005\000\002\012\004\000\002\055\003\000\002" +
    "\054\003\000\002\054\004\000\002\056\006\000\002\056" +
    "\006\000\002\056\005\000\002\056\005\000\002\056\004" +
    "\000\002\056\007\000\002\056\007\000\002\057\007\000" +
    "\002\057\005\000\002\057\003\000\002\013\004\000\002" +
    "\013\005\000\002\051\007\000\002\051\010\000\002\052" +
    "\003\000\002\052\005\000\002\053\002\000\002\053\003" +
    "\000\002\053\005\000\002\053\005\000\002\043\007\000" +
    "\002\043\007\000\002\043\007\000\002\043\007\000\002" +
    "\043\003\000\002\061\004\000\002\061\002\000\002\062" +
    "\006\000\002\062\004\000\002\047\003\000\002\047\005" +
    "\000\002\046\003\000\002\046\005\000\002\044\003\000" +
    "\002\044\005\000\002\045\004\000\002\045\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\004\000\002\040" +
    "\003\000\002\041\003\000\002\041\005\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\042\005\000" +
    "\002\042\003\000\002\042\005\000\002\042\004\000\002" +
    "\042\005\000\002\042\003\000\002\026\003\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\027\005" +
    "\000\002\027\003\000\002\027\005\000\002\027\003\000" +
    "\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0180\000\064\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\021\ufffd\024\ufffd\035\ufffd\052\ufffd\056\ufffd\060" +
    "\ufffd\067\ufffd\116\ufffd\117\ufffd\120\ufffd\121\ufffd\122\ufffd" +
    "\123\ufffd\001\002\000\004\002\u0182\001\002\000\064\002" +
    "\ufffb\004\010\005\007\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\021\ufffb\024" +
    "\ufffb\035\ufffb\052\ufffb\056\ufffb\060\ufffb\067\ufffb\116\ufffb" +
    "\117\ufffb\120\ufffb\121\ufffb\122\ufffb\123\ufffb\001\002\000" +
    "\060\002\001\006\027\007\057\010\036\011\045\012\056" +
    "\013\055\014\046\015\042\016\024\021\037\024\041\035" +
    "\053\052\060\056\034\060\022\067\025\116\043\117\023" +
    "\120\031\121\035\122\044\123\030\001\002\000\006\121" +
    "\012\122\011\001\002\000\006\121\012\122\011\001\002" +
    "\000\006\047\uffe8\063\uffe8\001\002\000\006\047\uffe7\063" +
    "\uffe7\001\002\000\006\047\014\063\015\001\002\000\064" +
    "\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011" +
    "\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\021\uffff" +
    "\024\uffff\035\uffff\052\uffff\056\uffff\060\uffff\067\uffff\116" +
    "\uffff\117\uffff\120\uffff\121\uffff\122\uffff\123\uffff\001\002" +
    "\000\006\121\017\122\016\001\002\000\006\047\uffe6\063" +
    "\uffe6\001\002\000\006\047\uffe5\063\uffe5\001\002\000\006" +
    "\047\021\063\015\001\002\000\064\002\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\021\ufffe\024\ufffe\035\ufffe\052" +
    "\ufffe\056\ufffe\060\ufffe\067\ufffe\116\ufffe\117\ufffe\120\ufffe" +
    "\121\ufffe\122\ufffe\123\ufffe\001\002\000\006\117\234\121" +
    "\236\001\002\000\132\022\uffd7\023\uffd7\025\uffd7\027\uffd7" +
    "\030\uffd7\033\uffd7\034\uffd7\036\uffd7\037\uffd7\047\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\055\uffd7\057\uffd7\060\uffd7\061\uffd7" +
    "\062\uffd7\063\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071" +
    "\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7" +
    "\100\uffd7\101\uffd7\102\uffd7\103\uffd7\104\uffd7\105\uffd7\106" +
    "\uffd7\107\uffd7\110\uffd7\111\uffd7\112\uffd7\113\uffd7\114\uffd7" +
    "\115\uffd7\001\002\000\004\121\035\001\002\000\034\021" +
    "\037\024\041\035\053\052\060\056\034\060\022\067\025" +
    "\116\043\117\023\120\031\121\035\122\044\123\030\001" +
    "\002\000\100\036\137\047\uffec\052\136\061\107\062\123" +
    "\063\125\065\102\066\112\067\105\070\114\071\103\072" +
    "\134\073\113\074\130\075\122\076\132\077\127\100\131" +
    "\101\115\102\124\103\106\104\135\105\126\106\121\107" +
    "\120\110\133\111\110\112\101\113\111\114\116\115\117" +
    "\001\002\000\004\121\035\001\002\000\130\022\uff98\023" +
    "\uff98\025\uff98\027\uff98\030\uff98\033\uff98\034\uff98\036\uff98" +
    "\037\uff98\047\uff98\051\uff98\052\uff98\053\uff98\057\uff98\060" +
    "\uff98\061\uff98\062\uff98\063\uff98\065\uff98\066\uff98\067\uff98" +
    "\070\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075\uff98\076" +
    "\uff98\077\uff98\100\uff98\101\uff98\102\uff98\103\uff98\104\uff98" +
    "\105\uff98\106\uff98\107\uff98\110\uff98\111\uff98\112\uff98\113" +
    "\uff98\114\uff98\115\uff98\001\002\000\132\022\uffd8\023\uffd8" +
    "\025\uffd8\027\uffd8\030\uffd8\033\uffd8\034\uffd8\036\uffd8\037" +
    "\uffd8\047\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8\057\uffd8" +
    "\060\uffd8\061\uffd8\062\uffd8\063\uffd8\065\uffd8\066\uffd8\067" +
    "\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8" +
    "\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\103\uffd8\104" +
    "\uffd8\105\uffd8\106\uffd8\107\uffd8\110\uffd8\111\uffd8\112\uffd8" +
    "\113\uffd8\114\uffd8\115\uffd8\001\002\000\004\047\u0176\001" +
    "\002\000\130\022\uff9b\023\uff9b\025\uff9b\027\uff9b\030\uff9b" +
    "\033\uff9b\034\uff9b\036\uff9b\037\uff9b\047\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b" +
    "\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073" +
    "\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b" +
    "\102\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110" +
    "\uff9b\111\uff9b\112\uff9b\113\uff9b\114\uff9b\115\uff9b\001\002" +
    "\000\036\021\037\024\041\035\053\052\060\056\034\057" +
    "\u016f\060\022\067\025\116\043\117\023\120\031\121\035" +
    "\122\044\123\030\001\002\000\154\022\uffd6\023\uffd6\025" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\036\uffd6\037\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067" +
    "\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6" +
    "\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6\103\uffd6\104" +
    "\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6\111\uffd6\112\uffd6" +
    "\113\uffd6\114\uffd6\115\uffd6\122\uffd6\124\uffd6\001\002\000" +
    "\004\121\035\001\002\000\034\021\037\024\041\035\053" +
    "\052\060\056\034\060\022\067\025\116\043\117\023\120" +
    "\031\121\035\122\044\123\030\001\002\000\132\022\uffc3" +
    "\023\uffc3\025\uffc3\027\uffc3\030\uffc3\032\u015b\033\uffc3\034" +
    "\uffc3\036\uffc3\037\uffc3\047\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\065\uffc3\066" +
    "\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3" +
    "\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103" +
    "\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3" +
    "\112\uffc3\113\uffc3\114\uffc3\115\uffc3\001\002\000\014\021" +
    "\u0139\026\u0135\040\u013c\052\305\121\035\001\002\000\004" +
    "\121\035\001\002\000\130\022\uff9a\023\uff9a\025\uff9a\027" +
    "\uff9a\030\uff9a\033\uff9a\034\uff9a\036\uff9a\037\uff9a\047\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\057\uff9a\060\uff9a\061\uff9a\062" +
    "\uff9a\063\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a" +
    "\072\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100" +
    "\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a" +
    "\107\uff9a\110\uff9a\111\uff9a\112\uff9a\113\uff9a\114\uff9a\115" +
    "\uff9a\001\002\000\132\022\uff99\023\uff99\025\uff99\027\uff99" +
    "\030\uff99\033\uff99\034\uff99\036\uff99\037\uff99\045\uffcd\047" +
    "\uff99\051\uff99\052\uff99\053\uff99\057\uff99\060\uff99\061\uff99" +
    "\062\uff99\063\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071" +
    "\uff99\072\uff99\073\uff99\074\uff99\075\uff99\076\uff99\077\uff99" +
    "\100\uff99\101\uff99\102\uff99\103\uff99\104\uff99\105\uff99\106" +
    "\uff99\107\uff99\110\uff99\111\uff99\112\uff99\113\uff99\114\uff99" +
    "\115\uff99\001\002\000\020\041\235\042\237\043\232\044" +
    "\226\052\231\117\234\121\236\001\002\000\004\121\035" +
    "\001\002\000\130\022\uffa0\023\uffa0\025\uffa0\027\uffa0\030" +
    "\uffa0\033\uffa0\034\uffa0\036\uffa0\037\uffa0\047\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0" +
    "\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101" +
    "\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0" +
    "\110\uffa0\111\uffa0\112\uffa0\113\uffa0\114\uffa0\115\uffa0\001" +
    "\002\000\134\022\uffc5\023\uffc5\025\uffc5\027\uffc5\030\uffc5" +
    "\033\uffc5\034\uffc5\036\uffc5\037\uffc5\045\uffce\047\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\056\075\057\uffc5\060\uffc5\061\uffc5" +
    "\062\uffc5\063\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071" +
    "\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5" +
    "\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5\106" +
    "\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5\114\uffc5" +
    "\115\uffc5\001\002\000\132\022\uff9c\023\uff9c\025\uff9c\027" +
    "\uff9c\030\uff9c\033\uff9c\034\uff9c\036\uff9c\037\uff9c\047\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\057\uff9c\060\uff9c\061\uff9c\062" +
    "\uff9c\063\uff9c\064\u0128\065\uff9c\066\uff9c\067\uff9c\070\uff9c" +
    "\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\077" +
    "\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c" +
    "\106\uff9c\107\uff9c\110\uff9c\111\uff9c\112\uff9c\113\uff9c\114" +
    "\uff9c\115\uff9c\001\002\000\130\022\uffc6\023\uffc6\025\uffc6" +
    "\027\uffc6\030\uffc6\033\uffc6\034\uffc6\036\uffc6\037\uffc6\047" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071" +
    "\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6" +
    "\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106" +
    "\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6\114\uffc6" +
    "\115\uffc6\001\002\000\006\052\305\121\035\001\002\000" +
    "\130\022\uff9f\023\uff9f\025\uff9f\027\uff9f\030\uff9f\033\uff9f" +
    "\034\uff9f\036\uff9f\037\uff9f\047\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\065\uff9f" +
    "\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074" +
    "\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f" +
    "\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f\111" +
    "\uff9f\112\uff9f\113\uff9f\114\uff9f\115\uff9f\001\002\000\004" +
    "\121\035\001\002\000\004\121\335\001\002\000\010\017" +
    "\217\020\221\121\uffe9\001\002\000\036\021\037\024\041" +
    "\035\053\052\060\053\072\056\034\060\022\067\025\116" +
    "\043\117\023\120\031\121\035\122\044\123\030\001\002" +
    "\000\004\045\062\001\002\000\006\121\035\122\063\001" +
    "\002\000\142\022\uffcd\023\uffcd\025\uffcd\027\uffcd\030\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\036\uffcd\037\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\051\uffcd\052\uffcd\053\uffcd\055\uffcd\057\uffcd" +
    "\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd" +
    "\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd\103" +
    "\uffcd\104\uffcd\105\uffcd\106\uffcd\107\uffcd\110\uffcd\111\uffcd" +
    "\112\uffcd\113\uffcd\114\uffcd\115\uffcd\001\002\000\132\022" +
    "\uff95\023\uff95\025\uff95\027\uff95\030\uff95\033\uff95\034\uff95" +
    "\036\uff95\037\uff95\047\uff95\051\uff95\052\uff95\053\uff95\057" +
    "\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065\uff95" +
    "\066\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\074" +
    "\uff95\075\uff95\076\uff95\077\uff95\100\uff95\101\uff95\102\uff95" +
    "\103\uff95\104\uff95\105\uff95\106\uff95\107\uff95\110\uff95\111" +
    "\uff95\112\uff95\113\uff95\114\uff95\115\uff95\001\002\000\142" +
    "\022\uffce\023\uffce\025\uffce\027\uffce\030\uffce\032\uffce\033" +
    "\uffce\034\uffce\036\uffce\037\uffce\045\uffce\046\uffce\047\uffce" +
    "\051\uffce\052\uffce\053\uffce\055\uffce\057\uffce\060\uffce\061" +
    "\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce" +
    "\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076" +
    "\uffce\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce" +
    "\105\uffce\106\uffce\107\uffce\110\uffce\111\uffce\112\uffce\113" +
    "\uffce\114\uffce\115\uffce\001\002\000\076\036\137\052\136" +
    "\061\107\062\123\063\125\065\102\066\112\067\105\070" +
    "\114\071\103\072\134\073\113\074\130\075\122\076\132" +
    "\077\127\100\131\101\115\102\124\103\106\104\135\105" +
    "\126\106\121\107\120\110\133\111\110\112\101\113\111" +
    "\114\116\115\117\001\002\000\106\036\uffc5\045\uffce\051" +
    "\074\052\uffc5\053\076\056\075\061\uffc5\062\uffc5\063\uffc5" +
    "\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073" +
    "\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5" +
    "\102\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110" +
    "\uffc5\111\uffc5\112\uffc5\113\uffc5\114\uffc5\115\uffc5\001\002" +
    "\000\100\036\uffc6\052\uffc6\053\073\061\uffc6\062\uffc6\063" +
    "\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6" +
    "\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101" +
    "\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6" +
    "\110\uffc6\111\uffc6\112\uffc6\113\uffc6\114\uffc6\115\uffc6\001" +
    "\002\000\134\022\uffd2\023\uffd2\025\uffd2\027\uffd2\030\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\036\uffd2\037\uffd2\046\uffd2\047" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2" +
    "\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\106" +
    "\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2\113\uffd2\114\uffd2" +
    "\115\uffd2\001\002\000\134\022\uffd3\023\uffd3\025\uffd3\027" +
    "\uffd3\030\uffd3\032\uffd3\033\uffd3\034\uffd3\036\uffd3\037\uffd3" +
    "\046\uffd3\047\uffd3\051\uffd3\052\uffd3\053\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\065\uffd3\066\uffd3\067\uffd3" +
    "\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076" +
    "\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3" +
    "\105\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3\112\uffd3\113" +
    "\uffd3\114\uffd3\115\uffd3\001\002\000\130\022\uffc2\023\uffc2" +
    "\025\uffc2\027\uffc2\030\uffc2\033\uffc2\034\uffc2\036\uffc2\037" +
    "\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2\057\uffc2\060\uffc2" +
    "\061\uffc2\062\uffc2\063\uffc2\065\uffc2\066\uffc2\067\uffc2\070" +
    "\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2" +
    "\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105" +
    "\uffc2\106\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2" +
    "\114\uffc2\115\uffc2\001\002\000\004\121\035\001\002\000" +
    "\034\021\037\024\041\035\053\052\060\056\034\060\022" +
    "\067\025\116\043\117\023\120\031\121\035\122\044\123" +
    "\030\001\002\000\134\022\uffd1\023\uffd1\025\uffd1\027\uffd1" +
    "\030\uffd1\032\uffd1\033\uffd1\034\uffd1\036\uffd1\037\uffd1\046" +
    "\uffd1\047\uffd1\051\uffd1\052\uffd1\053\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\063\uffd1\065\uffd1\066\uffd1\067\uffd1\070" +
    "\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1" +
    "\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1\105" +
    "\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1\112\uffd1\113\uffd1" +
    "\114\uffd1\115\uffd1\001\002\000\100\036\137\052\136\060" +
    "\100\061\107\062\123\063\125\065\102\066\112\067\105" +
    "\070\114\071\103\072\134\073\113\074\130\075\122\076" +
    "\132\077\127\100\131\101\115\102\124\103\106\104\135" +
    "\105\126\106\121\107\120\110\133\111\110\112\101\113" +
    "\111\114\116\115\117\001\002\000\040\021\037\024\041" +
    "\035\053\051\uff7b\052\060\056\034\057\uff7b\060\022\067" +
    "\025\116\043\117\023\120\031\121\035\122\044\123\030" +
    "\001\002\000\034\021\037\024\041\035\053\052\060\056" +
    "\034\060\022\067\025\116\043\117\023\120\031\121\035" +
    "\122\044\123\030\001\002\000\034\021\037\024\041\035" +
    "\053\052\060\056\034\060\022\067\025\116\043\117\023" +
    "\120\031\121\035\122\044\123\030\001\002\000\034\021" +
    "\037\024\041\035\053\052\060\056\034\060\022\067\025" +
    "\116\043\117\023\120\031\121\035\122\044\123\030\001" +
    "\002\000\130\022\uffa4\023\uffa4\025\uffa4\027\uffa4\030\uffa4" +
    "\033\uffa4\034\uffa4\036\uffa4\037\uffa4\047\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\065\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073" +
    "\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4" +
    "\102\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\110" +
    "\uffa4\111\uffa4\112\uffa4\113\uffa4\114\uffa4\115\uffa4\001\002" +
    "\000\034\021\037\024\041\035\053\052\060\056\034\060" +
    "\022\067\025\116\043\117\023\120\031\121\035\122\044" +
    "\123\030\001\002\000\034\021\037\024\041\035\053\052" +
    "\060\056\034\060\022\067\025\116\043\117\023\120\031" +
    "\121\035\122\044\123\030\001\002\000\034\021\037\024" +
    "\041\035\053\052\060\056\034\060\022\067\025\116\043" +
    "\117\023\120\031\121\035\122\044\123\030\001\002\000" +
    "\034\021\037\024\041\035\053\052\060\056\034\060\022" +
    "\067\025\116\043\117\023\120\031\121\035\122\044\123" +
    "\030\001\002\000\034\021\037\024\041\035\053\052\060" +
    "\056\034\060\022\067\025\116\043\117\023\120\031\121" +
    "\035\122\044\123\030\001\002\000\006\067\151\117\152" +
    "\001\002\000\034\021\037\024\041\035\053\052\060\056" +
    "\034\060\022\067\025\116\043\117\023\120\031\121\035" +
    "\122\044\123\030\001\002\000\034\021\037\024\041\035" +
    "\053\052\060\056\034\060\022\067\025\116\043\117\023" +
    "\120\031\121\035\122\044\123\030\001\002\000\130\022" +
    "\uffbb\023\uffbb\025\uffbb\027\uffbb\030\uffbb\033\uffbb\034\uffbb" +
    "\036\uffbb\037\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\065\uffbb\066\uffbb" +
    "\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075" +
    "\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb" +
    "\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb\112" +
    "\uffbb\113\uffbb\114\uffbb\115\uffbb\001\002\000\034\021\037" +
    "\024\041\035\053\052\060\056\034\060\022\067\025\116" +
    "\043\117\023\120\031\121\035\122\044\123\030\001\002" +
    "\000\034\021\037\024\041\035\053\052\060\056\034\060" +
    "\022\067\025\116\043\117\023\120\031\121\035\122\044" +
    "\123\030\001\002\000\034\021\037\024\041\035\053\052" +
    "\060\056\034\060\022\067\025\116\043\117\023\120\031" +
    "\121\035\122\044\123\030\001\002\000\034\021\037\024" +
    "\041\035\053\052\060\056\034\060\022\067\025\116\043" +
    "\117\023\120\031\121\035\122\044\123\030\001\002\000" +
    "\034\021\037\024\041\035\053\052\060\056\034\060\022" +
    "\067\025\116\043\117\023\120\031\121\035\122\044\123" +
    "\030\001\002\000\034\021\037\024\041\035\053\052\060" +
    "\056\034\060\022\067\025\116\043\117\023\120\031\121" +
    "\035\122\044\123\030\001\002\000\130\022\uffbc\023\uffbc" +
    "\025\uffbc\027\uffbc\030\uffbc\033\uffbc\034\uffbc\036\uffbc\037" +
    "\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\065\uffbc\066\uffbc\067\uffbc\070" +
    "\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc" +
    "\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105" +
    "\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc" +
    "\114\uffbc\115\uffbc\001\002\000\034\021\037\024\041\035" +
    "\053\052\060\056\034\060\022\067\025\116\043\117\023" +
    "\120\031\121\035\122\044\123\030\001\002\000\034\021" +
    "\037\024\041\035\053\052\060\056\034\060\022\067\025" +
    "\116\043\117\023\120\031\121\035\122\044\123\030\001" +
    "\002\000\034\021\037\024\041\035\053\052\060\056\034" +
    "\060\022\067\025\116\043\117\023\120\031\121\035\122" +
    "\044\123\030\001\002\000\034\021\037\024\041\035\053" +
    "\052\060\056\034\060\022\067\025\116\043\117\023\120" +
    "\031\121\035\122\044\123\030\001\002\000\130\022\uffbd" +
    "\023\uffbd\025\uffbd\027\uffbd\030\uffbd\033\uffbd\034\uffbd\036" +
    "\uffbd\037\uffbd\047\uffbd\051\uffbd\052\uffbd\053\uffbd\057\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\063\uffbd\065\uffbd\066\uffbd\067" +
    "\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd" +
    "\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104" +
    "\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd\111\uffbd\112\uffbd" +
    "\113\uffbd\114\uffbd\115\uffbd\001\002\000\034\021\037\024" +
    "\041\035\053\052\060\056\034\060\022\067\025\116\043" +
    "\117\023\120\031\121\035\122\044\123\030\001\002\000" +
    "\034\021\037\024\041\035\053\052\060\056\034\060\022" +
    "\067\025\116\043\117\023\120\031\121\035\122\044\123" +
    "\030\001\002\000\006\067\151\117\152\001\002\000\034" +
    "\021\037\024\041\035\053\052\060\056\034\060\022\067" +
    "\025\116\043\117\023\120\031\121\035\122\044\123\030" +
    "\001\002\000\036\021\037\024\041\035\053\052\060\053" +
    "\143\056\034\060\022\067\025\116\043\117\023\120\031" +
    "\121\035\122\044\123\030\001\002\000\034\021\037\024" +
    "\041\035\053\052\060\056\034\060\022\067\025\116\043" +
    "\117\023\120\031\121\035\122\044\123\030\001\002\000" +
    "\130\022\uffbf\023\uffbf\025\uffbf\027\uffbf\030\uffbf\033\uffbf" +
    "\034\uffbf\036\uffbf\037\uffbf\047\uffbf\051\uffbf\052\136\053" +
    "\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\065\uffbf" +
    "\066\112\067\uffbf\070\uffbf\071\uffbf\072\134\073\uffbf\074" +
    "\uffbf\075\uffbf\076\uffbf\077\uffbf\100\131\101\115\102\124" +
    "\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111" +
    "\uffbf\112\uffbf\113\uffbf\114\uffbf\115\uffbf\001\002\000\102" +
    "\036\137\051\uffca\052\136\053\uffca\061\107\062\123\063" +
    "\125\065\102\066\112\067\105\070\114\071\103\072\134" +
    "\073\113\074\130\075\122\076\132\077\127\100\131\101" +
    "\115\102\124\103\106\104\135\105\126\106\121\107\120" +
    "\110\133\111\110\112\101\113\111\114\116\115\117\001" +
    "\002\000\006\051\144\053\145\001\002\000\130\022\uffc8" +
    "\023\uffc8\025\uffc8\027\uffc8\030\uffc8\033\uffc8\034\uffc8\036" +
    "\uffc8\037\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8\057\uffc8" +
    "\060\uffc8\061\uffc8\062\uffc8\063\uffc8\065\uffc8\066\uffc8\067" +
    "\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8" +
    "\076\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104" +
    "\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8" +
    "\113\uffc8\114\uffc8\115\uffc8\001\002\000\034\021\037\024" +
    "\041\035\053\052\060\056\034\060\022\067\025\116\043" +
    "\117\023\120\031\121\035\122\044\123\030\001\002\000" +
    "\130\022\uffc7\023\uffc7\025\uffc7\027\uffc7\030\uffc7\033\uffc7" +
    "\034\uffc7\036\uffc7\037\uffc7\047\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\065\uffc7" +
    "\066\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074" +
    "\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7" +
    "\103\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111" +
    "\uffc7\112\uffc7\113\uffc7\114\uffc7\115\uffc7\001\002\000\104" +
    "\036\137\051\uffc9\052\136\053\uffc9\057\uffc9\061\107\062" +
    "\123\063\125\065\102\066\112\067\105\070\114\071\103" +
    "\072\134\073\113\074\130\075\122\076\132\077\127\100" +
    "\131\101\115\102\124\103\106\104\135\105\126\106\121" +
    "\107\120\110\133\111\110\112\101\113\111\114\116\115" +
    "\117\001\002\000\114\022\uffac\023\uffac\025\uffac\027\uffac" +
    "\030\uffac\033\uffac\034\uffac\036\137\037\uffac\047\uffac\051" +
    "\uffac\052\136\053\uffac\057\uffac\060\uffac\061\107\062\123" +
    "\063\125\065\102\066\112\067\105\070\114\071\103\072" +
    "\134\073\113\074\130\075\122\076\132\077\127\100\131" +
    "\101\115\102\124\105\uffac\112\uffac\113\uffac\114\uffac\115" +
    "\uffac\001\002\000\130\022\uffb7\023\uffb7\025\uffb7\027\uffb7" +
    "\030\uffb7\033\uffb7\034\uffb7\036\uffb7\037\uffb7\047\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7" +
    "\063\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072" +
    "\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7" +
    "\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107" +
    "\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7\114\uffb7\115\uffb7" +
    "\001\002\000\004\117\153\001\002\000\134\022\uffda\023" +
    "\uffda\025\uffda\027\uffda\030\uffda\033\uffda\034\uffda\036\uffda" +
    "\037\uffda\047\uffda\051\uffda\052\uffda\053\uffda\055\uffda\057" +
    "\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda" +
    "\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda\074" +
    "\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda\102\uffda" +
    "\103\uffda\104\uffda\105\uffda\106\uffda\107\uffda\110\uffda\111" +
    "\uffda\112\uffda\113\uffda\114\uffda\115\uffda\001\002\000\134" +
    "\022\uffd9\023\uffd9\025\uffd9\027\uffd9\030\uffd9\033\uffd9\034" +
    "\uffd9\036\uffd9\037\uffd9\047\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\055\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064" +
    "\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9" +
    "\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101" +
    "\uffd9\102\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9\107\uffd9" +
    "\110\uffd9\111\uffd9\112\uffd9\113\uffd9\114\uffd9\115\uffd9\001" +
    "\002\000\114\022\uffae\023\uffae\025\uffae\027\uffae\030\uffae" +
    "\033\uffae\034\uffae\036\137\037\uffae\047\uffae\051\uffae\052" +
    "\136\053\uffae\057\uffae\060\uffae\061\107\062\123\063\125" +
    "\065\102\066\112\067\105\070\114\071\103\072\134\073" +
    "\113\074\130\075\122\076\132\077\127\100\131\101\115" +
    "\102\124\105\uffae\112\uffae\113\uffae\114\uffae\115\uffae\001" +
    "\002\000\130\022\uffb0\023\uffb0\025\uffb0\027\uffb0\030\uffb0" +
    "\033\uffb0\034\uffb0\036\137\037\uffb0\047\uffb0\051\uffb0\052" +
    "\136\053\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\065\uffb0\066\112\067\uffb0\070\uffb0\071\uffb0\072\134\073" +
    "\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\131\101\115" +
    "\102\124\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110" +
    "\uffb0\111\uffb0\112\uffb0\113\uffb0\114\uffb0\115\uffb0\001\002" +
    "\000\130\022\uffaf\023\uffaf\025\uffaf\027\uffaf\030\uffaf\033" +
    "\uffaf\034\uffaf\036\137\037\uffaf\047\uffaf\051\uffaf\052\136" +
    "\053\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\065" +
    "\uffaf\066\112\067\uffaf\070\uffaf\071\uffaf\072\134\073\uffaf" +
    "\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\131\101\115\102" +
    "\124\103\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf" +
    "\111\uffaf\112\uffaf\113\uffaf\114\uffaf\115\uffaf\001\002\000" +
    "\130\022\uffb2\023\uffb2\025\uffb2\027\uffb2\030\uffb2\033\uffb2" +
    "\034\uffb2\036\137\037\uffb2\047\uffb2\051\uffb2\052\136\053" +
    "\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\065\uffb2" +
    "\066\112\067\uffb2\070\uffb2\071\uffb2\072\134\073\uffb2\074" +
    "\uffb2\075\uffb2\076\uffb2\077\uffb2\100\131\101\115\102\124" +
    "\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111" +
    "\uffb2\112\uffb2\113\uffb2\114\uffb2\115\uffb2\001\002\000\122" +
    "\022\uffa7\023\uffa7\025\uffa7\027\uffa7\030\uffa7\033\uffa7\034" +
    "\uffa7\036\137\037\uffa7\047\uffa7\051\uffa7\052\136\053\uffa7" +
    "\057\uffa7\060\uffa7\061\107\062\123\063\125\065\102\066" +
    "\112\067\105\070\114\071\103\072\134\073\113\074\130" +
    "\075\122\076\132\077\127\100\131\101\115\102\124\103" +
    "\106\104\135\106\121\107\120\110\133\111\110\112\101" +
    "\113\111\001\002\000\130\022\uffb6\023\uffb6\025\uffb6\027" +
    "\uffb6\030\uffb6\033\uffb6\034\uffb6\036\137\037\uffb6\047\uffb6" +
    "\051\uffb6\052\136\053\uffb6\057\uffb6\060\uffb6\061\uffb6\062" +
    "\uffb6\063\uffb6\065\uffb6\066\112\067\uffb6\070\uffb6\071\uffb6" +
    "\072\134\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100" +
    "\131\101\115\102\124\103\uffb6\104\uffb6\105\uffb6\106\uffb6" +
    "\107\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\114\uffb6\115" +
    "\uffb6\001\002\000\130\022\uffba\023\uffba\025\uffba\027\uffba" +
    "\030\uffba\033\uffba\034\uffba\036\137\037\uffba\047\uffba\051" +
    "\uffba\052\136\053\uffba\057\uffba\060\uffba\061\uffba\062\uffba" +
    "\063\uffba\065\uffba\066\112\067\uffba\070\uffba\071\uffba\072" +
    "\134\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba\100\131" +
    "\101\115\102\124\103\uffba\104\uffba\105\uffba\106\uffba\107" +
    "\uffba\110\uffba\111\uffba\112\uffba\113\uffba\114\uffba\115\uffba" +
    "\001\002\000\130\022\uffb1\023\uffb1\025\uffb1\027\uffb1\030" +
    "\uffb1\033\uffb1\034\uffb1\036\137\037\uffb1\047\uffb1\051\uffb1" +
    "\052\136\053\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\065\uffb1\066\112\067\uffb1\070\uffb1\071\uffb1\072\134" +
    "\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\131\101" +
    "\115\102\124\103\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1" +
    "\110\uffb1\111\uffb1\112\uffb1\113\uffb1\114\uffb1\115\uffb1\001" +
    "\002\000\114\022\uffab\023\uffab\025\uffab\027\uffab\030\uffab" +
    "\033\uffab\034\uffab\036\137\037\uffab\047\uffab\051\uffab\052" +
    "\136\053\uffab\057\uffab\060\uffab\061\107\062\123\063\125" +
    "\065\102\066\112\067\105\070\114\071\103\072\134\073" +
    "\113\074\130\075\122\076\132\077\127\100\131\101\115" +
    "\102\124\105\uffab\112\uffab\113\uffab\114\uffab\115\uffab\001" +
    "\002\000\114\022\uffaa\023\uffaa\025\uffaa\027\uffaa\030\uffaa" +
    "\033\uffaa\034\uffaa\036\137\037\uffaa\047\uffaa\051\uffaa\052" +
    "\136\053\uffaa\057\uffaa\060\uffaa\061\107\062\123\063\125" +
    "\065\102\066\112\067\105\070\114\071\103\072\134\073" +
    "\113\074\130\075\122\076\132\077\127\100\131\101\115" +
    "\102\124\105\uffaa\112\uffaa\113\uffaa\114\uffaa\115\uffaa\001" +
    "\002\000\122\022\uffa9\023\uffa9\025\uffa9\027\uffa9\030\uffa9" +
    "\033\uffa9\034\uffa9\036\137\037\uffa9\047\uffa9\051\uffa9\052" +
    "\136\053\uffa9\057\uffa9\060\uffa9\061\107\062\123\063\125" +
    "\065\102\066\112\067\105\070\114\071\103\072\134\073" +
    "\113\074\130\075\122\076\132\077\127\100\131\101\115" +
    "\102\124\103\106\104\135\106\121\107\120\110\133\111" +
    "\110\112\101\113\111\001\002\000\122\022\uffa8\023\uffa8" +
    "\025\uffa8\027\uffa8\030\uffa8\033\uffa8\034\uffa8\036\137\037" +
    "\uffa8\047\uffa8\051\uffa8\052\136\053\uffa8\057\uffa8\060\uffa8" +
    "\061\107\062\123\063\125\065\102\066\112\067\105\070" +
    "\114\071\103\072\134\073\113\074\130\075\122\076\132" +
    "\077\127\100\131\101\115\102\124\103\106\104\135\106" +
    "\121\107\120\110\133\111\110\112\101\113\111\001\002" +
    "\000\130\022\uffb4\023\uffb4\025\uffb4\027\uffb4\030\uffb4\033" +
    "\uffb4\034\uffb4\036\137\037\uffb4\047\uffb4\051\uffb4\052\136" +
    "\053\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\065" +
    "\uffb4\066\112\067\uffb4\070\uffb4\071\uffb4\072\134\073\uffb4" +
    "\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\131\101\115\102" +
    "\124\103\uffb4\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4" +
    "\111\uffb4\112\uffb4\113\uffb4\114\uffb4\115\uffb4\001\002\000" +
    "\130\022\uffb3\023\uffb3\025\uffb3\027\uffb3\030\uffb3\033\uffb3" +
    "\034\uffb3\036\137\037\uffb3\047\uffb3\051\uffb3\052\136\053" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\065\uffb3" +
    "\066\112\067\uffb3\070\uffb3\071\uffb3\072\134\073\uffb3\074" +
    "\uffb3\075\uffb3\076\uffb3\077\uffb3\100\131\101\115\102\124" +
    "\103\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110\uffb3\111" +
    "\uffb3\112\uffb3\113\uffb3\114\uffb3\115\uffb3\001\002\000\130" +
    "\022\uffc0\023\uffc0\025\uffc0\027\uffc0\030\uffc0\033\uffc0\034" +
    "\uffc0\036\uffc0\037\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0" +
    "\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\065\uffc0\066" +
    "\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0" +
    "\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103" +
    "\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0\111\uffc0" +
    "\112\uffc0\113\uffc0\114\uffc0\115\uffc0\001\002\000\130\022" +
    "\uffa5\023\uffa5\025\uffa5\027\uffa5\030\uffa5\033\uffa5\034\uffa5" +
    "\036\137\037\uffa5\047\uffa5\051\uffa5\052\136\053\uffa5\057" +
    "\uffa5\060\uffa5\061\107\062\123\063\125\065\102\066\112" +
    "\067\105\070\114\071\103\072\134\073\113\074\130\075" +
    "\122\076\132\077\127\100\131\101\115\102\124\103\106" +
    "\104\135\105\uffa5\106\121\107\120\110\133\111\110\112" +
    "\uffa5\113\uffa5\114\uffa5\115\uffa5\001\002\000\114\022\uffad" +
    "\023\uffad\025\uffad\027\uffad\030\uffad\033\uffad\034\uffad\036" +
    "\137\037\uffad\047\uffad\051\uffad\052\136\053\uffad\057\uffad" +
    "\060\uffad\061\107\062\123\063\125\065\102\066\112\067" +
    "\105\070\114\071\103\072\134\073\113\074\130\075\122" +
    "\076\132\077\127\100\131\101\115\102\124\105\uffad\112" +
    "\uffad\113\uffad\114\uffad\115\uffad\001\002\000\130\022\uffb9" +
    "\023\uffb9\025\uffb9\027\uffb9\030\uffb9\033\uffb9\034\uffb9\036" +
    "\137\037\uffb9\047\uffb9\051\uffb9\052\136\053\uffb9\057\uffb9" +
    "\060\uffb9\061\uffb9\062\123\063\125\065\102\066\112\067" +
    "\uffb9\070\114\071\103\072\134\073\113\074\130\075\122" +
    "\076\132\077\127\100\131\101\115\102\124\103\uffb9\104" +
    "\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\112\uffb9" +
    "\113\uffb9\114\uffb9\115\uffb9\001\002\000\114\022\uffbe\023" +
    "\uffbe\025\uffbe\027\uffbe\030\uffbe\033\uffbe\034\uffbe\036\137" +
    "\037\uffbe\047\uffbe\051\uffbe\052\136\053\uffbe\057\uffbe\060" +
    "\uffbe\061\107\062\123\063\125\065\102\066\112\067\105" +
    "\070\114\071\103\072\134\073\113\074\130\075\122\076" +
    "\132\077\127\100\131\101\115\102\124\105\uffbe\112\uffbe" +
    "\113\uffbe\114\uffbe\115\uffbe\001\002\000\130\022\uffc1\023" +
    "\uffc1\025\uffc1\027\uffc1\030\uffc1\033\uffc1\034\uffc1\036\137" +
    "\037\uffc1\047\uffc1\051\uffc1\052\136\053\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\123\063\125\065\102\066\112\067\uffc1" +
    "\070\114\071\103\072\134\073\113\074\130\075\122\076" +
    "\132\077\127\100\131\101\115\102\124\103\uffc1\104\uffc1" +
    "\105\uffc1\106\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\113" +
    "\uffc1\114\uffc1\115\uffc1\001\002\000\130\022\uffb5\023\uffb5" +
    "\025\uffb5\027\uffb5\030\uffb5\033\uffb5\034\uffb5\036\137\037" +
    "\uffb5\047\uffb5\051\uffb5\052\136\053\uffb5\057\uffb5\060\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\065\uffb5\066\112\067\uffb5\070" +
    "\uffb5\071\uffb5\072\134\073\uffb5\074\uffb5\075\uffb5\076\uffb5" +
    "\077\uffb5\100\131\101\115\102\124\103\uffb5\104\uffb5\105" +
    "\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5" +
    "\114\uffb5\115\uffb5\001\002\000\130\022\uffb8\023\uffb8\025" +
    "\uffb8\027\uffb8\030\uffb8\033\uffb8\034\uffb8\036\137\037\uffb8" +
    "\047\uffb8\051\uffb8\052\136\053\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\063\uffb8\065\uffb8\066\112\067\uffb8\070\uffb8" +
    "\071\uffb8\072\134\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\100\131\101\115\102\124\103\uffb8\104\uffb8\105\uffb8" +
    "\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8\114" +
    "\uffb8\115\uffb8\001\002\000\130\022\uffa6\023\uffa6\025\uffa6" +
    "\027\uffa6\030\uffa6\033\uffa6\034\uffa6\036\137\037\uffa6\047" +
    "\uffa6\051\uffa6\052\136\053\uffa6\057\uffa6\060\uffa6\061\107" +
    "\062\123\063\125\065\102\066\112\067\105\070\114\071" +
    "\103\072\134\073\113\074\130\075\122\076\132\077\127" +
    "\100\131\101\115\102\124\103\106\104\135\105\uffa6\106" +
    "\121\107\120\110\133\111\110\112\uffa6\113\uffa6\114\uffa6" +
    "\115\uffa6\001\002\000\106\030\212\033\211\036\137\051" +
    "\uff7a\052\136\057\uff7a\061\107\062\123\063\125\065\102" +
    "\066\112\067\105\070\114\071\103\072\134\073\113\074" +
    "\130\075\122\076\132\077\127\100\131\101\115\102\124" +
    "\103\106\104\135\105\126\106\121\107\120\110\133\111" +
    "\110\112\101\113\111\114\116\115\117\001\002\000\006" +
    "\051\207\057\206\001\002\000\006\051\uff7d\057\uff7d\001" +
    "\002\000\130\022\uff7e\023\uff7e\025\uff7e\027\uff7e\030\uff7e" +
    "\033\uff7e\034\uff7e\036\uff7e\037\uff7e\047\uff7e\051\uff7e\052" +
    "\uff7e\053\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e" +
    "\065\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e\073" +
    "\uff7e\074\uff7e\075\uff7e\076\uff7e\077\uff7e\100\uff7e\101\uff7e" +
    "\102\uff7e\103\uff7e\104\uff7e\105\uff7e\106\uff7e\107\uff7e\110" +
    "\uff7e\111\uff7e\112\uff7e\113\uff7e\114\uff7e\115\uff7e\001\002" +
    "\000\040\021\037\024\041\035\053\051\uff7b\052\060\056" +
    "\034\057\uff7b\060\022\067\025\116\043\117\023\120\031" +
    "\121\035\122\044\123\030\001\002\000\006\051\uff7c\057" +
    "\uff7c\001\002\000\034\021\037\024\041\035\053\052\060" +
    "\056\034\060\022\067\025\116\043\117\023\120\031\121" +
    "\035\122\044\123\030\001\002\000\034\021\037\024\041" +
    "\035\053\052\060\056\034\060\022\067\025\116\043\117" +
    "\023\120\031\121\035\122\044\123\030\001\002\000\102" +
    "\036\137\051\uff78\052\136\057\uff78\061\107\062\123\063" +
    "\125\065\102\066\112\067\105\070\114\071\103\072\134" +
    "\073\113\074\130\075\122\076\132\077\127\100\131\101" +
    "\115\102\124\103\106\104\135\105\126\106\121\107\120" +
    "\110\133\111\110\112\101\113\111\114\116\115\117\001" +
    "\002\000\102\036\137\051\uff79\052\136\057\uff79\061\107" +
    "\062\123\063\125\065\102\066\112\067\105\070\114\071" +
    "\103\072\134\073\113\074\130\075\122\076\132\077\127" +
    "\100\131\101\115\102\124\103\106\104\135\105\126\106" +
    "\121\107\120\110\133\111\110\112\101\113\111\114\116" +
    "\115\117\001\002\000\134\022\uffd0\023\uffd0\025\uffd0\027" +
    "\uffd0\030\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0\037\uffd0" +
    "\046\uffd0\047\uffd0\051\uffd0\052\uffd0\053\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\065\uffd0\066\uffd0\067\uffd0" +
    "\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076" +
    "\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0" +
    "\105\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0\112\uffd0\113" +
    "\uffd0\114\uffd0\115\uffd0\001\002\000\006\051\074\053\076" +
    "\001\002\000\004\121\uffeb\001\002\000\004\121\035\001" +
    "\002\000\004\121\uffea\001\002\000\006\050\225\051\224" +
    "\001\002\000\012\046\uffd5\050\uffd5\051\uffd5\124\uffd5\001" +
    "\002\000\004\121\035\001\002\000\020\041\235\042\237" +
    "\043\232\044\226\052\231\117\234\121\236\001\002\000" +
    "\004\121\035\001\002\000\012\047\uff63\051\uff63\053\uff63" +
    "\103\uff63\001\002\000\004\047\ufff8\001\002\000\012\052" +
    "\231\053\323\117\234\121\236\001\002\000\004\121\035" +
    "\001\002\000\006\047\uff73\103\uff73\001\002\000\026\036" +
    "\uff58\047\uff58\051\uff58\053\uff58\060\uff58\062\uff58\063\uff58" +
    "\064\uff58\066\uff58\103\uff58\001\002\000\004\121\035\001" +
    "\002\000\036\031\uffcf\032\uffcf\036\uffcf\046\uffcf\047\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\060\uffcf\062\uffcf\063\uffcf\064" +
    "\uffcf\066\uffcf\103\uffcf\001\002\000\004\121\035\001\002" +
    "\000\034\031\253\032\264\036\uff5c\046\254\047\uff5c\051" +
    "\uff5c\052\231\053\uff5c\062\uff5c\063\uff5c\064\uff5c\066\uff5c" +
    "\103\uff5c\001\002\000\004\032\262\001\002\000\026\036" +
    "\246\047\uff62\051\uff62\053\uff62\060\uff62\062\244\063\245" +
    "\064\243\066\247\103\uff62\001\002\000\006\117\234\121" +
    "\236\001\002\000\006\117\234\121\236\001\002\000\006" +
    "\117\234\121\236\001\002\000\006\117\234\121\236\001" +
    "\002\000\006\067\151\117\152\001\002\000\026\036\uff5e" +
    "\047\uff5e\051\uff5e\053\uff5e\060\uff5e\062\uff5e\063\uff5e\064" +
    "\uff5e\066\uff5e\103\uff5e\001\002\000\024\047\uff61\051\uff61" +
    "\053\uff61\060\uff61\062\244\063\245\064\243\066\247\103" +
    "\uff61\001\002\000\032\031\253\036\uff5c\046\254\047\uff5c" +
    "\051\uff5c\053\uff5c\060\uff5c\062\uff5c\063\uff5c\064\uff5c\066" +
    "\uff5c\103\uff5c\001\002\000\030\036\uff5a\047\uff5a\051\uff5a" +
    "\053\uff5a\060\uff5a\062\uff5a\063\uff5a\064\uff5a\066\uff5a\103" +
    "\uff5a\121\236\001\002\000\004\121\236\001\002\000\026" +
    "\036\uff5b\047\uff5b\051\uff5b\053\uff5b\060\uff5b\062\uff5b\063" +
    "\uff5b\064\uff5b\066\uff5b\103\uff5b\001\002\000\026\036\uff59" +
    "\047\uff59\051\uff59\053\uff59\060\uff59\062\uff59\063\uff59\064" +
    "\uff59\066\uff59\103\uff59\001\002\000\026\036\uff5f\047\uff5f" +
    "\051\uff5f\053\uff5f\060\uff5f\062\uff5f\063\uff5f\064\uff5f\066" +
    "\247\103\uff5f\001\002\000\026\036\uff60\047\uff60\051\uff60" +
    "\053\uff60\060\uff60\062\uff60\063\uff60\064\uff60\066\247\103" +
    "\uff60\001\002\000\026\036\uff5d\047\uff5d\051\uff5d\053\uff5d" +
    "\060\uff5d\062\244\063\245\064\uff5d\066\247\103\uff5d\001" +
    "\002\000\010\052\231\117\234\121\236\001\002\000\012" +
    "\047\uff66\051\uff66\053\uff66\103\uff66\001\002\000\010\052" +
    "\231\117\234\121\236\001\002\000\012\047\uff64\051\uff64" +
    "\053\uff64\103\uff64\001\002\000\012\047\uff65\051\uff65\053" +
    "\uff65\103\uff65\001\002\000\010\046\uff6e\051\uff6e\124\uff6e" +
    "\001\002\000\010\046\uff71\051\274\124\275\001\002\000" +
    "\012\031\272\046\uff6c\051\uff6c\124\uff6c\001\002\000\004" +
    "\121\035\001\002\000\010\046\uff6b\051\uff6b\124\uff6b\001" +
    "\002\000\004\121\035\001\002\000\004\121\236\001\002" +
    "\000\004\046\277\001\002\000\020\041\235\042\237\043" +
    "\232\044\226\052\231\117\234\121\236\001\002\000\006" +
    "\047\uff75\103\uff75\001\002\000\004\052\305\001\002\000" +
    "\006\046\uff72\112\303\001\002\000\004\121\236\001\002" +
    "\000\004\052\305\001\002\000\006\053\072\121\035\001" +
    "\002\000\006\046\uff70\112\uff70\001\002\000\006\046\uff6f" +
    "\112\uff6f\001\002\000\010\046\uff6d\051\uff6d\124\uff6d\001" +
    "\002\000\010\046\uff71\051\224\124\275\001\002\000\004" +
    "\046\313\001\002\000\020\041\235\042\237\043\232\044" +
    "\226\052\231\117\234\121\236\001\002\000\006\047\uff77" +
    "\103\uff77\001\002\000\010\046\uff71\051\224\124\275\001" +
    "\002\000\004\046\317\001\002\000\020\041\235\042\237" +
    "\043\232\044\226\052\231\117\234\121\236\001\002\000" +
    "\006\047\uff76\103\uff76\001\002\000\006\051\324\053\325" +
    "\001\002\000\006\051\uff6a\053\uff6a\001\002\000\014\032" +
    "\uff68\047\uff68\051\uff68\053\uff68\103\uff68\001\002\000\010" +
    "\052\231\117\234\121\236\001\002\000\014\032\uff67\047" +
    "\uff67\051\uff67\053\uff67\103\uff67\001\002\000\006\051\uff69" +
    "\053\uff69\001\002\000\010\046\uff71\051\274\124\275\001" +
    "\002\000\004\046\331\001\002\000\020\041\235\042\237" +
    "\043\232\044\226\052\231\117\234\121\236\001\002\000" +
    "\006\047\uff74\103\uff74\001\002\000\012\046\uffd4\050\uffd4" +
    "\051\uffd4\124\uffd4\001\002\000\004\031\361\001\002\000" +
    "\006\031\uffcf\122\uffd6\001\002\000\004\122\337\001\002" +
    "\000\006\047\ufff1\103\340\001\002\000\012\052\344\117" +
    "\023\120\031\121\035\001\002\000\022\046\357\047\uff52" +
    "\051\uff52\053\uff52\055\uff52\062\uff52\063\uff52\066\uff52\001" +
    "\002\000\020\047\uff50\051\uff50\053\uff50\055\uff50\062\uff50" +
    "\063\uff50\066\uff50\001\002\000\016\047\uff57\051\uff57\055" +
    "\uff57\062\uff57\063\uff57\066\uff57\001\002\000\012\052\344" +
    "\117\023\120\031\121\035\001\002\000\004\047\ufff0\001" +
    "\002\000\012\047\uff4f\062\347\063\350\066\351\001\002" +
    "\000\012\052\344\117\023\120\031\121\035\001\002\000" +
    "\012\052\344\117\023\120\031\121\035\001\002\000\006" +
    "\067\151\117\152\001\002\000\016\047\uff54\051\uff54\055" +
    "\uff54\062\uff54\063\uff54\066\uff54\001\002\000\016\047\uff55" +
    "\051\uff55\055\uff55\062\uff55\063\uff55\066\351\001\002\000" +
    "\016\047\uff56\051\uff56\055\uff56\062\uff56\063\uff56\066\351" +
    "\001\002\000\004\053\356\001\002\000\020\047\uff53\051" +
    "\uff53\053\uff53\055\uff53\062\uff53\063\uff53\066\uff53\001\002" +
    "\000\004\121\035\001\002\000\020\047\uff51\051\uff51\053" +
    "\uff51\055\uff51\062\uff51\063\uff51\066\uff51\001\002\000\004" +
    "\121\236\001\002\000\004\103\363\001\002\000\004\054" +
    "\364\001\002\000\010\055\370\121\035\122\063\001\002" +
    "\000\004\047\ufff2\001\002\000\006\051\373\055\374\001" +
    "\002\000\004\046\371\001\002\000\004\047\uffe0\001\002" +
    "\000\012\052\344\117\023\120\031\121\035\001\002\000" +
    "\014\051\uffde\055\uffde\062\347\063\350\066\351\001\002" +
    "\000\006\121\035\122\063\001\002\000\004\047\uffdf\001" +
    "\002\000\004\046\376\001\002\000\012\052\344\117\023" +
    "\120\031\121\035\001\002\000\014\051\uffdd\055\uffdd\062" +
    "\347\063\350\066\351\001\002\000\004\050\u0101\001\002" +
    "\000\010\052\231\117\234\121\236\001\002\000\004\103" +
    "\u0103\001\002\000\004\054\u0104\001\002\000\010\055\u0108" +
    "\121\035\122\063\001\002\000\004\047\uffef\001\002\000" +
    "\006\051\u0111\055\u0112\001\002\000\010\032\uffcc\051\uffcc" +
    "\055\uffcc\001\002\000\004\047\uffe4\001\002\000\006\032" +
    "\u010a\051\u010b\001\002\000\010\067\u010f\117\023\120\031" +
    "\001\002\000\006\121\035\122\063\001\002\000\010\032" +
    "\uffcb\051\uffcb\055\uffcb\001\002\000\006\051\uffdc\055\uffdc" +
    "\001\002\000\006\051\uffe2\055\uffe2\001\002\000\006\117" +
    "\023\120\031\001\002\000\006\051\uffdb\055\uffdb\001\002" +
    "\000\006\121\035\122\063\001\002\000\004\047\uffe3\001" +
    "\002\000\006\032\u0114\051\u010b\001\002\000\010\067\u010f" +
    "\117\023\120\031\001\002\000\006\051\uffe1\055\uffe1\001" +
    "\002\000\130\022\uffa1\023\uffa1\025\uffa1\027\uffa1\030\uffa1" +
    "\033\uffa1\034\uffa1\036\uffa1\037\uffa1\047\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1" +
    "\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073" +
    "\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1" +
    "\102\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110" +
    "\uffa1\111\uffa1\112\uffa1\113\uffa1\114\uffa1\115\uffa1\001\002" +
    "\000\004\103\u0125\001\002\000\006\052\305\103\u0119\001" +
    "\002\000\034\021\037\024\041\035\053\052\060\056\034" +
    "\060\022\067\025\116\043\117\023\120\031\121\035\122" +
    "\044\123\030\001\002\000\004\103\u011b\001\002\000\034" +
    "\021\037\024\041\035\053\052\060\056\034\060\022\067" +
    "\025\116\043\117\023\120\031\121\035\122\044\123\030" +
    "\001\002\000\102\034\u011d\036\137\051\u011e\052\136\061" +
    "\107\062\123\063\125\065\102\066\112\067\105\070\114" +
    "\071\103\072\134\073\113\074\130\075\122\076\132\077" +
    "\127\100\131\101\115\102\124\103\106\104\135\105\126" +
    "\106\121\107\120\110\133\111\110\112\101\113\111\114" +
    "\116\115\117\001\002\000\034\021\037\024\041\035\053" +
    "\052\060\056\034\060\022\067\025\116\043\117\023\120" +
    "\031\121\035\122\044\123\030\001\002\000\006\052\305" +
    "\121\035\001\002\000\130\022\uff91\023\uff91\025\uff91\027" +
    "\uff91\030\uff91\033\uff91\034\uff91\036\uff91\037\uff91\047\uff91" +
    "\051\uff91\052\uff91\053\uff91\057\uff91\060\uff91\061\uff91\062" +
    "\uff91\063\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071\uff91" +
    "\072\uff91\073\uff91\074\uff91\075\uff91\076\uff91\077\uff91\100" +
    "\uff91\101\uff91\102\uff91\103\uff91\104\uff91\105\uff91\106\uff91" +
    "\107\uff91\110\uff91\111\uff91\112\uff91\113\uff91\114\uff91\115" +
    "\uff91\001\002\000\130\022\uff8f\023\uff8f\025\uff8f\027\uff8f" +
    "\030\uff8f\033\uff8f\034\uff8f\036\uff8f\037\uff8f\047\uff8f\051" +
    "\uff8f\052\uff8f\053\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f" +
    "\063\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072" +
    "\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f" +
    "\101\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f\106\uff8f\107" +
    "\uff8f\110\uff8f\111\uff8f\112\uff8f\113\uff8f\114\uff8f\115\uff8f" +
    "\001\002\000\100\025\u0122\036\137\052\136\061\107\062" +
    "\123\063\125\065\102\066\112\067\105\070\114\071\103" +
    "\072\134\073\113\074\130\075\122\076\132\077\127\100" +
    "\131\101\115\102\124\103\106\104\135\105\126\106\121" +
    "\107\120\110\133\111\110\112\101\113\111\114\116\115" +
    "\117\001\002\000\130\022\uff90\023\uff90\025\uff90\027\uff90" +
    "\030\uff90\033\uff90\034\uff90\036\uff90\037\uff90\047\uff90\051" +
    "\uff90\052\uff90\053\uff90\057\uff90\060\uff90\061\uff90\062\uff90" +
    "\063\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072" +
    "\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100\uff90" +
    "\101\uff90\102\uff90\103\uff90\104\uff90\105\uff90\106\uff90\107" +
    "\uff90\110\uff90\111\uff90\112\uff90\113\uff90\114\uff90\115\uff90" +
    "\001\002\000\102\034\u011d\036\137\051\u011e\052\136\061" +
    "\107\062\123\063\125\065\102\066\112\067\105\070\114" +
    "\071\103\072\134\073\113\074\130\075\122\076\132\077" +
    "\127\100\131\101\115\102\124\103\106\104\135\105\126" +
    "\106\121\107\120\110\133\111\110\112\101\113\111\114" +
    "\116\115\117\001\002\000\130\022\uff93\023\uff93\025\uff93" +
    "\027\uff93\030\uff93\033\uff93\034\uff93\036\uff93\037\uff93\047" +
    "\uff93\051\uff93\052\uff93\053\uff93\057\uff93\060\uff93\061\uff93" +
    "\062\uff93\063\uff93\065\uff93\066\uff93\067\uff93\070\uff93\071" +
    "\uff93\072\uff93\073\uff93\074\uff93\075\uff93\076\uff93\077\uff93" +
    "\100\uff93\101\uff93\102\uff93\103\uff93\104\uff93\105\uff93\106" +
    "\uff93\107\uff93\110\uff93\111\uff93\112\uff93\113\uff93\114\uff93" +
    "\115\uff93\001\002\000\034\021\037\024\041\035\053\052" +
    "\060\056\034\060\022\067\025\116\043\117\023\120\031" +
    "\121\035\122\044\123\030\001\002\000\102\034\u011d\036" +
    "\137\051\u011e\052\136\061\107\062\123\063\125\065\102" +
    "\066\112\067\105\070\114\071\103\072\134\073\113\074" +
    "\130\075\122\076\132\077\127\100\131\101\115\102\124" +
    "\103\106\104\135\105\126\106\121\107\120\110\133\111" +
    "\110\112\101\113\111\114\116\115\117\001\002\000\130" +
    "\022\uff92\023\uff92\025\uff92\027\uff92\030\uff92\033\uff92\034" +
    "\uff92\036\uff92\037\uff92\047\uff92\051\uff92\052\uff92\053\uff92" +
    "\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\065\uff92\066" +
    "\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074\uff92" +
    "\075\uff92\076\uff92\077\uff92\100\uff92\101\uff92\102\uff92\103" +
    "\uff92\104\uff92\105\uff92\106\uff92\107\uff92\110\uff92\111\uff92" +
    "\112\uff92\113\uff92\114\uff92\115\uff92\001\002\000\006\121" +
    "\035\122\063\001\002\000\004\045\u012a\001\002\000\006" +
    "\121\035\122\063\001\002\000\132\022\uff94\023\uff94\025" +
    "\uff94\027\uff94\030\uff94\033\uff94\034\uff94\036\uff94\037\uff94" +
    "\047\uff94\051\uff94\052\uff94\053\uff94\057\uff94\060\uff94\061" +
    "\uff94\062\uff94\063\uff94\064\uff94\065\uff94\066\uff94\067\uff94" +
    "\070\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076" +
    "\uff94\077\uff94\100\uff94\101\uff94\102\uff94\103\uff94\104\uff94" +
    "\105\uff94\106\uff94\107\uff94\110\uff94\111\uff94\112\uff94\113" +
    "\uff94\114\uff94\115\uff94\001\002\000\004\103\u012d\001\002" +
    "\000\012\052\344\117\023\120\031\121\035\001\002\000" +
    "\012\047\ufff3\062\347\063\350\066\351\001\002\000\004" +
    "\103\u0130\001\002\000\010\052\231\117\234\121\236\001" +
    "\002\000\004\047\ufff4\001\002\000\004\050\u0133\001\002" +
    "\000\010\052\231\117\234\121\236\001\002\000\004\047" +
    "\uffee\001\002\000\034\021\037\024\041\035\053\052\060" +
    "\056\034\060\022\067\025\116\043\117\023\120\031\121" +
    "\035\122\044\123\030\001\002\000\006\030\u0153\052\136" +
    "\001\002\000\004\030\u014f\001\002\000\004\025\u014e\001" +
    "\002\000\034\021\037\024\041\035\053\052\060\056\034" +
    "\060\022\067\025\116\043\117\023\120\031\121\035\122" +
    "\044\123\030\001\002\000\022\021\u0139\022\uff8e\023\uff8e" +
    "\025\uff8e\026\u0135\040\u013c\052\305\121\035\001\002\000" +
    "\022\021\uff8d\022\uff8d\023\uff8d\025\uff8d\026\uff8d\040\uff8d" +
    "\052\uff8d\121\uff8d\001\002\000\036\021\037\024\041\035" +
    "\053\047\u013d\052\060\056\034\060\022\067\025\116\043" +
    "\117\023\120\031\121\035\122\044\123\030\001\002\000" +
    "\022\021\uff87\022\uff87\023\uff87\025\uff87\026\uff87\040\uff87" +
    "\052\uff87\121\uff87\001\002\000\100\036\137\047\u013f\052" +
    "\136\061\107\062\123\063\125\065\102\066\112\067\105" +
    "\070\114\071\103\072\134\073\113\074\130\075\122\076" +
    "\132\077\127\100\131\101\115\102\124\103\106\104\135" +
    "\105\126\106\121\107\120\110\133\111\110\112\101\113" +
    "\111\114\116\115\117\001\002\000\022\021\uff88\022\uff88" +
    "\023\uff88\025\uff88\026\uff88\040\uff88\052\uff88\121\uff88\001" +
    "\002\000\022\021\uff8c\022\uff8c\023\uff8c\025\uff8c\026\uff8c" +
    "\040\uff8c\052\uff8c\121\uff8c\001\002\000\100\036\137\037" +
    "\u0142\052\136\061\107\062\123\063\125\065\102\066\112" +
    "\067\105\070\114\071\103\072\134\073\113\074\130\075" +
    "\122\076\132\077\127\100\131\101\115\102\124\103\106" +
    "\104\135\105\126\106\121\107\120\110\133\111\110\112" +
    "\101\113\111\114\116\115\117\001\002\000\014\021\u0139" +
    "\026\u0135\040\u013c\052\305\121\035\001\002\000\010\022" +
    "\u0145\023\u0144\025\u0147\001\002\000\034\021\037\024\041" +
    "\035\053\052\060\056\034\060\022\067\025\116\043\117" +
    "\023\120\031\121\035\122\044\123\030\001\002\000\014" +
    "\021\u0139\026\u0135\040\u013c\052\305\121\035\001\002\000" +
    "\022\021\uff85\022\uff85\023\uff85\025\uff85\026\uff85\040\uff85" +
    "\052\uff85\121\uff85\001\002\000\022\021\uff82\022\uff82\023" +
    "\uff82\025\uff82\026\uff82\040\uff82\052\uff82\121\uff82\001\002" +
    "\000\004\025\u0149\001\002\000\022\021\uff83\022\uff83\023" +
    "\uff83\025\uff83\026\uff83\040\uff83\052\uff83\121\uff83\001\002" +
    "\000\100\036\137\037\u014b\052\136\061\107\062\123\063" +
    "\125\065\102\066\112\067\105\070\114\071\103\072\134" +
    "\073\113\074\130\075\122\076\132\077\127\100\131\101" +
    "\115\102\124\103\106\104\135\105\126\106\121\107\120" +
    "\110\133\111\110\112\101\113\111\114\116\115\117\001" +
    "\002\000\014\021\u0139\026\u0135\040\u013c\052\305\121\035" +
    "\001\002\000\010\022\u0145\023\u0144\025\u0147\001\002\000" +
    "\022\021\uff84\022\uff84\023\uff84\025\uff84\026\uff84\040\uff84" +
    "\052\uff84\121\uff84\001\002\000\130\022\uff9d\023\uff9d\025" +
    "\uff9d\027\uff9d\030\uff9d\033\uff9d\034\uff9d\036\uff9d\037\uff9d" +
    "\047\uff9d\051\uff9d\052\uff9d\053\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077" +
    "\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d" +
    "\106\uff9d\107\uff9d\110\uff9d\111\uff9d\112\uff9d\113\uff9d\114" +
    "\uff9d\115\uff9d\001\002\000\034\021\037\024\041\035\053" +
    "\052\060\056\034\060\022\067\025\116\043\117\023\120" +
    "\031\121\035\122\044\123\030\001\002\000\100\036\137" +
    "\047\u0151\052\136\061\107\062\123\063\125\065\102\066" +
    "\112\067\105\070\114\071\103\072\134\073\113\074\130" +
    "\075\122\076\132\077\127\100\131\101\115\102\124\103" +
    "\106\104\135\105\126\106\121\107\120\110\133\111\110" +
    "\112\101\113\111\114\116\115\117\001\002\000\022\021" +
    "\uff8a\022\uff8a\023\uff8a\025\uff8a\026\uff8a\040\uff8a\052\uff8a" +
    "\121\uff8a\001\002\000\004\047\u0156\001\002\000\034\021" +
    "\037\024\041\035\053\052\060\056\034\060\022\067\025" +
    "\116\043\117\023\120\031\121\035\122\044\123\030\001" +
    "\002\000\100\036\137\047\u0155\052\136\061\107\062\123" +
    "\063\125\065\102\066\112\067\105\070\114\071\103\072" +
    "\134\073\113\074\130\075\122\076\132\077\127\100\131" +
    "\101\115\102\124\103\106\104\135\105\126\106\121\107" +
    "\120\110\133\111\110\112\101\113\111\114\116\115\117" +
    "\001\002\000\022\021\uff8b\022\uff8b\023\uff8b\025\uff8b\026" +
    "\uff8b\040\uff8b\052\uff8b\121\uff8b\001\002\000\022\021\uff89" +
    "\022\uff89\023\uff89\025\uff89\026\uff89\040\uff89\052\uff89\121" +
    "\uff89\001\002\000\100\027\u0158\036\137\052\136\061\107" +
    "\062\123\063\125\065\102\066\112\067\105\070\114\071" +
    "\103\072\134\073\113\074\130\075\122\076\132\077\127" +
    "\100\131\101\115\102\124\103\106\104\135\105\126\106" +
    "\121\107\120\110\133\111\110\112\101\113\111\114\116" +
    "\115\117\001\002\000\014\021\u0139\026\u0135\040\u013c\052" +
    "\305\121\035\001\002\000\004\025\u015a\001\002\000\022" +
    "\021\uff86\022\uff86\023\uff86\025\uff86\026\uff86\040\uff86\052" +
    "\uff86\121\uff86\001\002\000\034\021\037\024\041\035\053" +
    "\052\060\056\034\060\022\067\025\116\043\117\023\120" +
    "\031\121\035\122\044\123\030\001\002\000\130\022\uffa3" +
    "\023\uffa3\025\uffa3\027\uffa3\030\uffa3\033\uffa3\034\uffa3\036" +
    "\137\037\uffa3\047\uffa3\051\uffa3\052\136\053\uffa3\057\uffa3" +
    "\060\uffa3\061\107\062\123\063\125\065\102\066\112\067" +
    "\105\070\114\071\103\072\134\073\113\074\130\075\122" +
    "\076\132\077\127\100\131\101\115\102\124\103\106\104" +
    "\135\105\126\106\121\107\120\110\133\111\110\112\101" +
    "\113\111\114\116\115\117\001\002\000\100\036\137\037" +
    "\u015e\052\136\061\107\062\123\063\125\065\102\066\112" +
    "\067\105\070\114\071\103\072\134\073\113\074\130\075" +
    "\122\076\132\077\127\100\131\101\115\102\124\103\106" +
    "\104\135\105\126\106\121\107\120\110\133\111\110\112" +
    "\101\113\111\114\116\115\117\001\002\000\034\021\037" +
    "\024\041\035\053\052\060\056\034\060\022\067\025\116" +
    "\043\117\023\120\031\121\035\122\044\123\030\001\002" +
    "\000\102\022\u0160\023\u0162\036\137\052\136\061\107\062" +
    "\123\063\125\065\102\066\112\067\105\070\114\071\103" +
    "\072\134\073\113\074\130\075\122\076\132\077\127\100" +
    "\131\101\115\102\124\103\106\104\135\105\126\106\121" +
    "\107\120\110\133\111\110\112\101\113\111\114\116\115" +
    "\117\001\002\000\034\021\037\024\041\035\053\052\060" +
    "\056\034\060\022\067\025\116\043\117\023\120\031\121" +
    "\035\122\044\123\030\001\002\000\130\022\uffa2\023\uffa2" +
    "\025\uffa2\027\uffa2\030\uffa2\033\uffa2\034\uffa2\036\uffa2\037" +
    "\uffa2\047\uffa2\051\uffa2\052\uffa2\053\uffa2\057\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\063\uffa2\065\uffa2\066\uffa2\067\uffa2\070" +
    "\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2" +
    "\077\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105" +
    "\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2\112\uffa2\113\uffa2" +
    "\114\uffa2\115\uffa2\001\002\000\034\021\037\024\041\035" +
    "\053\052\060\056\034\060\022\067\025\116\043\117\023" +
    "\120\031\121\035\122\044\123\030\001\002\000\100\036" +
    "\137\037\u0164\052\136\061\107\062\123\063\125\065\102" +
    "\066\112\067\105\070\114\071\103\072\134\073\113\074" +
    "\130\075\122\076\132\077\127\100\131\101\115\102\124" +
    "\103\106\104\135\105\126\106\121\107\120\110\133\111" +
    "\110\112\101\113\111\114\116\115\117\001\002\000\034" +
    "\021\037\024\041\035\053\052\060\056\034\060\022\067" +
    "\025\116\043\117\023\120\031\121\035\122\044\123\030" +
    "\001\002\000\102\022\u0160\023\u0162\036\137\052\136\061" +
    "\107\062\123\063\125\065\102\066\112\067\105\070\114" +
    "\071\103\072\134\073\113\074\130\075\122\076\132\077" +
    "\127\100\131\101\115\102\124\103\106\104\135\105\126" +
    "\106\121\107\120\110\133\111\110\112\101\113\111\114" +
    "\116\115\117\001\002\000\130\022\uff97\023\uff97\025\uff97" +
    "\027\uff97\030\uff97\033\uff97\034\uff97\036\uff97\037\uff97\047" +
    "\uff97\051\uff97\052\uff97\053\uff97\057\uff97\060\uff97\061\uff97" +
    "\062\uff97\063\uff97\065\uff97\066\uff97\067\uff97\070\uff97\071" +
    "\uff97\072\uff97\073\uff97\074\uff97\075\uff97\076\uff97\077\uff97" +
    "\100\uff97\101\uff97\102\uff97\103\uff97\104\uff97\105\uff97\106" +
    "\uff97\107\uff97\110\uff97\111\uff97\112\uff97\113\uff97\114\uff97" +
    "\115\uff97\001\002\000\100\025\u0168\036\137\052\136\061" +
    "\107\062\123\063\125\065\102\066\112\067\105\070\114" +
    "\071\103\072\134\073\113\074\130\075\122\076\132\077" +
    "\127\100\131\101\115\102\124\103\106\104\135\105\126" +
    "\106\121\107\120\110\133\111\110\112\101\113\111\114" +
    "\116\115\117\001\002\000\130\022\uff96\023\uff96\025\uff96" +
    "\027\uff96\030\uff96\033\uff96\034\uff96\036\uff96\037\uff96\047" +
    "\uff96\051\uff96\052\uff96\053\uff96\057\uff96\060\uff96\061\uff96" +
    "\062\uff96\063\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071" +
    "\uff96\072\uff96\073\uff96\074\uff96\075\uff96\076\uff96\077\uff96" +
    "\100\uff96\101\uff96\102\uff96\103\uff96\104\uff96\105\uff96\106" +
    "\uff96\107\uff96\110\uff96\111\uff96\112\uff96\113\uff96\114\uff96" +
    "\115\uff96\001\002\000\006\047\ufff7\103\u016a\001\002\000" +
    "\036\021\037\024\041\035\053\052\060\054\u016c\056\034" +
    "\060\022\067\025\116\043\117\023\120\031\121\035\122" +
    "\044\123\030\001\002\000\100\036\137\047\ufff5\052\136" +
    "\061\107\062\123\063\125\065\102\066\112\067\105\070" +
    "\114\071\103\072\134\073\113\074\130\075\122\076\132" +
    "\077\127\100\131\101\115\102\124\103\106\104\135\105" +
    "\126\106\121\107\120\110\133\111\110\112\101\113\111" +
    "\114\116\115\117\001\002\000\006\121\035\122\063\001" +
    "\002\000\006\051\u010b\055\u016e\001\002\000\004\047\ufff6" +
    "\001\002\000\130\022\uff81\023\uff81\025\uff81\027\uff81\030" +
    "\uff81\033\uff81\034\uff81\036\uff81\037\uff81\047\uff81\051\uff81" +
    "\052\uff81\053\uff81\057\uff81\060\uff81\061\uff81\062\uff81\063" +
    "\uff81\065\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81" +
    "\073\uff81\074\uff81\075\uff81\076\uff81\077\uff81\100\uff81\101" +
    "\uff81\102\uff81\103\uff81\104\uff81\105\uff81\106\uff81\107\uff81" +
    "\110\uff81\111\uff81\112\uff81\113\uff81\114\uff81\115\uff81\001" +
    "\002\000\104\036\137\051\uffca\052\136\057\uffca\060\u0173" +
    "\061\107\062\123\063\125\065\102\066\112\067\105\070" +
    "\114\071\103\072\134\073\113\074\130\075\122\076\132" +
    "\077\127\100\131\101\115\102\124\103\106\104\135\105" +
    "\126\106\121\107\120\110\133\111\110\112\101\113\111" +
    "\114\116\115\117\001\002\000\006\051\144\057\u0172\001" +
    "\002\000\130\022\uff80\023\uff80\025\uff80\027\uff80\030\uff80" +
    "\033\uff80\034\uff80\036\uff80\037\uff80\047\uff80\051\uff80\052" +
    "\uff80\053\uff80\057\uff80\060\uff80\061\uff80\062\uff80\063\uff80" +
    "\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80\072\uff80\073" +
    "\uff80\074\uff80\075\uff80\076\uff80\077\uff80\100\uff80\101\uff80" +
    "\102\uff80\103\uff80\104\uff80\105\uff80\106\uff80\107\uff80\110" +
    "\uff80\111\uff80\112\uff80\113\uff80\114\uff80\115\uff80\001\002" +
    "\000\040\021\037\024\041\035\053\051\uff7b\052\060\056" +
    "\034\057\uff7b\060\022\067\025\116\043\117\023\120\031" +
    "\121\035\122\044\123\030\001\002\000\006\051\207\057" +
    "\u0175\001\002\000\130\022\uff7f\023\uff7f\025\uff7f\027\uff7f" +
    "\030\uff7f\033\uff7f\034\uff7f\036\uff7f\037\uff7f\047\uff7f\051" +
    "\uff7f\052\uff7f\053\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f" +
    "\063\uff7f\065\uff7f\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072" +
    "\uff7f\073\uff7f\074\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f" +
    "\101\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f\106\uff7f\107" +
    "\uff7f\110\uff7f\111\uff7f\112\uff7f\113\uff7f\114\uff7f\115\uff7f" +
    "\001\002\000\060\002\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\021\ufffc" +
    "\024\ufffc\035\ufffc\052\ufffc\056\ufffc\060\ufffc\067\ufffc\116" +
    "\ufffc\117\ufffc\120\ufffc\121\ufffc\122\ufffc\123\ufffc\001\002" +
    "\000\006\052\305\103\u0178\001\002\000\034\021\037\024" +
    "\041\035\053\052\060\056\034\060\022\067\025\116\043" +
    "\117\023\120\031\121\035\122\044\123\030\001\002\000" +
    "\004\103\u017a\001\002\000\034\021\037\024\041\035\053" +
    "\052\060\056\034\060\022\067\025\116\043\117\023\120" +
    "\031\121\035\122\044\123\030\001\002\000\100\036\137" +
    "\047\ufff9\052\136\061\107\062\123\063\125\065\102\066" +
    "\112\067\105\070\114\071\103\072\134\073\113\074\130" +
    "\075\122\076\132\077\127\100\131\101\115\102\124\103" +
    "\106\104\135\105\126\106\121\107\120\110\133\111\110" +
    "\112\101\113\111\114\116\115\117\001\002\000\100\036" +
    "\137\047\ufffa\052\136\061\107\062\123\063\125\065\102" +
    "\066\112\067\105\070\114\071\103\072\134\073\113\074" +
    "\130\075\122\076\132\077\127\100\131\101\115\102\124" +
    "\103\106\104\135\105\126\106\121\107\120\110\133\111" +
    "\110\112\101\113\111\114\116\115\117\001\002\000\130" +
    "\022\uffc4\023\uffc4\025\uffc4\027\uffc4\030\uffc4\033\uffc4\034" +
    "\uffc4\036\137\037\uffc4\047\uffc4\051\uffc4\052\136\053\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\062\123\063\125\065\102\066" +
    "\112\067\uffc4\070\114\071\103\072\134\073\113\074\130" +
    "\075\122\076\132\077\127\100\131\101\115\102\124\103" +
    "\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\110\uffc4\111\uffc4" +
    "\112\uffc4\113\uffc4\114\uffc4\115\uffc4\001\002\000\004\122" +
    "\u017f\001\002\000\004\047\uffed\001\002\000\004\060\u0181" +
    "\001\002\000\130\022\uff9e\023\uff9e\025\uff9e\027\uff9e\030" +
    "\uff9e\033\uff9e\034\uff9e\036\uff9e\037\uff9e\047\uff9e\051\uff9e" +
    "\052\uff9e\053\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e" +
    "\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e\101" +
    "\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e" +
    "\110\uff9e\111\uff9e\112\uff9e\113\uff9e\114\uff9e\115\uff9e\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0180\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\005\001\001\000\026\005\031\006\025" +
    "\007\051\013\046\016\047\017\060\023\037\030\032\050" +
    "\050\051\053\001\001\000\004\033\017\001\001\000\004" +
    "\033\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\251\041\u017f\042\241\001\001\000\002" +
    "\001\001\000\004\016\u017d\001\001\000\024\006\u017c\007" +
    "\051\013\046\016\047\017\060\023\037\030\032\050\050" +
    "\051\053\001\001\000\004\015\103\001\001\000\004\016" +
    "\u0176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\u016f\007\051\013" +
    "\046\014\u0170\016\047\017\060\023\037\030\032\050\050" +
    "\051\053\001\001\000\002\001\001\000\004\016\u0168\001" +
    "\001\000\024\006\u015c\007\051\013\046\016\047\017\060" +
    "\023\037\030\032\050\050\051\053\001\001\000\002\001" +
    "\001\000\014\016\u0135\023\u0136\054\u0139\055\u0137\056\u013a" +
    "\001\001\000\004\016\u0131\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\020\237\040\232\041\226\042\241" +
    "\043\u012e\045\240\001\001\000\004\016\u012b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\u0115\016\u0117\023\u0116\001\001\000" +
    "\002\001\001\000\004\016\377\001\001\000\006\016\335" +
    "\020\333\001\001\000\004\060\217\001\001\000\026\006" +
    "\065\007\067\013\046\016\066\017\060\023\037\024\070" +
    "\030\032\050\050\051\053\001\001\000\002\001\001\000" +
    "\006\016\064\017\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\215\024\214\001" +
    "\001\000\024\006\076\007\051\013\046\016\047\017\060" +
    "\023\037\030\032\050\050\051\053\001\001\000\002\001" +
    "\001\000\004\015\103\001\001\000\030\006\202\007\051" +
    "\013\046\016\047\017\060\023\037\030\032\050\050\051" +
    "\053\052\203\053\204\001\001\000\024\006\201\007\051" +
    "\013\046\016\047\017\060\023\037\030\032\050\050\051" +
    "\053\001\001\000\024\006\200\007\051\013\046\016\047" +
    "\017\060\023\037\030\032\050\050\051\053\001\001\000" +
    "\024\006\177\007\051\013\046\016\047\017\060\023\037" +
    "\030\032\050\050\051\053\001\001\000\002\001\001\000" +
    "\024\006\176\007\051\013\046\016\047\017\060\023\037" +
    "\030\032\050\050\051\053\001\001\000\024\006\175\007" +
    "\051\013\046\016\047\017\060\023\037\030\032\050\050" +
    "\051\053\001\001\000\024\006\174\007\051\013\046\016" +
    "\047\017\060\023\037\030\032\050\050\051\053\001\001" +
    "\000\024\006\173\007\051\013\046\016\047\017\060\023" +
    "\037\030\032\050\050\051\053\001\001\000\024\006\172" +
    "\007\051\013\046\016\047\017\060\023\037\030\032\050" +
    "\050\051\053\001\001\000\004\032\171\001\001\000\024" +
    "\006\170\007\051\013\046\016\047\017\060\023\037\030" +
    "\032\050\050\051\053\001\001\000\024\006\167\007\051" +
    "\013\046\016\047\017\060\023\037\030\032\050\050\051" +
    "\053\001\001\000\002\001\001\000\024\006\166\007\051" +
    "\013\046\016\047\017\060\023\037\030\032\050\050\051" +
    "\053\001\001\000\024\006\165\007\051\013\046\016\047" +
    "\017\060\023\037\030\032\050\050\051\053\001\001\000" +
    "\024\006\164\007\051\013\046\016\047\017\060\023\037" +
    "\030\032\050\050\051\053\001\001\000\024\006\163\007" +
    "\051\013\046\016\047\017\060\023\037\030\032\050\050" +
    "\051\053\001\001\000\024\006\162\007\051\013\046\016" +
    "\047\017\060\023\037\030\032\050\050\051\053\001\001" +
    "\000\024\006\161\007\051\013\046\016\047\017\060\023" +
    "\037\030\032\050\050\051\053\001\001\000\002\001\001" +
    "\000\024\006\160\007\051\013\046\016\047\017\060\023" +
    "\037\030\032\050\050\051\053\001\001\000\024\006\157" +
    "\007\051\013\046\016\047\017\060\023\037\030\032\050" +
    "\050\051\053\001\001\000\024\006\156\007\051\013\046" +
    "\016\047\017\060\023\037\030\032\050\050\051\053\001" +
    "\001\000\024\006\155\007\051\013\046\016\047\017\060" +
    "\023\037\030\032\050\050\051\053\001\001\000\002\001" +
    "\001\000\024\006\154\007\051\013\046\016\047\017\060" +
    "\023\037\030\032\050\050\051\053\001\001\000\024\006" +
    "\153\007\051\013\046\016\047\017\060\023\037\030\032" +
    "\050\050\051\053\001\001\000\004\032\147\001\001\000" +
    "\024\006\146\007\051\013\046\016\047\017\060\023\037" +
    "\030\032\050\050\051\053\001\001\000\026\006\140\007" +
    "\051\013\046\014\141\016\047\017\060\023\037\030\032" +
    "\050\050\051\053\001\001\000\024\006\137\007\051\013" +
    "\046\016\047\017\060\023\037\030\032\050\050\051\053" +
    "\001\001\000\004\015\103\001\001\000\004\015\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\006\145" +
    "\007\051\013\046\016\047\017\060\023\037\030\032\050" +
    "\050\051\053\001\001\000\002\001\001\000\004\015\103" +
    "\001\001\000\004\015\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\103\001\001\000\004\015\103\001\001\000\004\015" +
    "\103\001\001\000\004\015\103\001\001\000\004\015\103" +
    "\001\001\000\004\015\103\001\001\000\004\015\103\001" +
    "\001\000\004\015\103\001\001\000\004\015\103\001\001" +
    "\000\004\015\103\001\001\000\004\015\103\001\001\000" +
    "\004\015\103\001\001\000\004\015\103\001\001\000\004" +
    "\015\103\001\001\000\002\001\001\000\004\015\103\001" +
    "\001\000\004\015\103\001\001\000\004\015\103\001\001" +
    "\000\004\015\103\001\001\000\004\015\103\001\001\000" +
    "\004\015\103\001\001\000\004\015\103\001\001\000\004" +
    "\015\103\001\001\000\004\015\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\202" +
    "\007\051\013\046\016\047\017\060\023\037\030\032\050" +
    "\050\051\053\053\207\001\001\000\002\001\001\000\024" +
    "\006\213\007\051\013\046\016\047\017\060\023\037\030" +
    "\032\050\050\051\053\001\001\000\024\006\212\007\051" +
    "\013\046\016\047\017\060\023\037\030\032\050\050\051" +
    "\053\001\001\000\004\015\103\001\001\000\004\015\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\222\021\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\332\001" +
    "\001\000\016\020\237\040\232\041\226\042\241\043\227" +
    "\045\240\001\001\000\010\016\270\046\266\047\326\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\020\237" +
    "\040\321\041\226\042\241\044\320\045\240\001\001\000" +
    "\006\016\222\021\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\222\021\310\001\001\000\002\001" +
    "\001\000\010\016\270\046\266\047\267\001\001\000\004" +
    "\045\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\251\042\260\001\001\000\006\020\251\042\257" +
    "\001\001\000\006\020\251\042\256\001\001\000\006\020" +
    "\251\042\250\001\001\000\004\032\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\255\001\001\000\004\020\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\237\040\262\041\226\042\241" +
    "\045\240\001\001\000\002\001\001\000\014\020\237\040" +
    "\265\041\226\042\241\045\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\275\001" +
    "\001\000\002\001\001\000\004\016\272\001\001\000\002" +
    "\001\001\000\006\016\270\046\307\001\001\000\006\020" +
    "\300\062\301\001\001\000\002\001\001\000\016\020\237" +
    "\040\232\041\226\042\241\043\277\045\240\001\001\000" +
    "\002\001\001\000\004\023\306\001\001\000\002\001\001" +
    "\000\004\020\303\001\001\000\004\023\305\001\001\000" +
    "\006\016\215\024\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\311\001\001\000" +
    "\002\001\001\000\016\020\237\040\232\041\226\042\241" +
    "\043\313\045\240\001\001\000\002\001\001\000\004\061" +
    "\315\001\001\000\002\001\001\000\016\020\237\040\232" +
    "\041\226\042\241\043\317\045\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\237\040\325\041\226\042\241\045\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\327" +
    "\001\001\000\002\001\001\000\016\020\237\040\232\041" +
    "\226\042\241\043\331\045\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\340\025\344" +
    "\026\345\027\342\030\341\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\340\027\354" +
    "\030\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\340\026\353\027\342\030\341\001\001\000\012" +
    "\016\340\026\352\027\342\030\341\001\001\000\004\032" +
    "\351\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\357\001\001\000\002\001\001\000\004\020\361\001\001" +
    "\000\002\001\001\000\004\034\364\001\001\000\010\016" +
    "\064\017\366\035\365\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\340\026\371\027\342\030\341\001\001\000\002\001\001" +
    "\000\006\016\064\017\374\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\340\026\376\027\342\030\341" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\020" +
    "\237\040\u0101\041\226\042\241\045\240\001\001\000\002" +
    "\001\001\000\004\037\u0104\001\001\000\012\016\064\017" +
    "\u0106\022\u0108\036\u0105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\u010c\031\u010d\001\001\000\006\016\064" +
    "\017\u010b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\u010f\001\001\000\002\001\001" +
    "\000\010\016\064\017\u0106\022\u0112\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\u010c\031\u0114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u0119\001\001\000\024\006\u0122\007\051\013\046" +
    "\016\047\017\060\023\037\030\032\050\050\051\053\001" +
    "\001\000\002\001\001\000\024\006\u011b\007\051\013\046" +
    "\016\047\017\060\023\037\030\032\050\050\051\053\001" +
    "\001\000\006\012\u011e\015\103\001\001\000\024\006\u0120" +
    "\007\051\013\046\016\047\017\060\023\037\030\032\050" +
    "\050\051\053\001\001\000\010\011\u011f\016\u0117\023\u0116" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\103\001\001\000\002\001\001\000\006\012\u0123\015\103" +
    "\001\001\000\002\001\001\000\024\006\u0125\007\051\013" +
    "\046\016\047\017\060\023\037\030\032\050\050\051\053" +
    "\001\001\000\006\012\u0126\015\103\001\001\000\002\001" +
    "\001\000\006\016\064\017\u0128\001\001\000\002\001\001" +
    "\000\006\016\064\017\u012a\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\340\026\u012d\027\342\030\341" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\020" +
    "\237\040\u0130\041\226\042\241\045\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\237\040\u0133\041" +
    "\226\042\241\045\240\001\001\000\002\001\001\000\024" +
    "\006\u0156\007\051\013\046\016\047\017\060\023\037\030" +
    "\032\050\050\051\053\001\001\000\004\015\u0151\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\u0140\007" +
    "\051\013\046\016\047\017\060\023\037\030\032\050\050" +
    "\051\053\001\001\000\010\016\u0135\023\u0136\056\u013f\001" +
    "\001\000\002\001\001\000\024\006\u013d\007\051\013\046" +
    "\016\047\017\060\023\037\030\032\050\050\051\053\001" +
    "\001\000\002\001\001\000\004\015\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\103\001\001\000" +
    "\014\016\u0135\023\u0136\054\u0139\055\u0142\056\u013a\001\001" +
    "\000\004\057\u0145\001\001\000\024\006\u0149\007\051\013" +
    "\046\016\047\017\060\023\037\030\032\050\050\051\053" +
    "\001\001\000\014\016\u0135\023\u0136\054\u0139\055\u0147\056" +
    "\u013a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\103\001\001\000" +
    "\014\016\u0135\023\u0136\054\u0139\055\u014b\056\u013a\001\001" +
    "\000\004\057\u014c\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\u014f\007\051\013\046\016\047\017\060" +
    "\023\037\030\032\050\050\051\053\001\001\000\004\015" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\006\u0153\007\051\013\046\016\047\017\060\023\037\030" +
    "\032\050\050\051\053\001\001\000\004\015\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\103\001" +
    "\001\000\014\016\u0135\023\u0136\054\u0139\055\u0158\056\u013a" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\u015b\007\051\013\046\016\047\017\060\023\037\030\032" +
    "\050\050\051\053\001\001\000\004\015\103\001\001\000" +
    "\004\015\103\001\001\000\024\006\u015e\007\051\013\046" +
    "\016\047\017\060\023\037\030\032\050\050\051\053\001" +
    "\001\000\006\010\u0160\015\103\001\001\000\024\006\u0166" +
    "\007\051\013\046\016\047\017\060\023\037\030\032\050" +
    "\050\051\053\001\001\000\002\001\001\000\024\006\u0162" +
    "\007\051\013\046\016\047\017\060\023\037\030\032\050" +
    "\050\051\053\001\001\000\004\015\103\001\001\000\024" +
    "\006\u0164\007\051\013\046\016\047\017\060\023\037\030" +
    "\032\050\050\051\053\001\001\000\006\010\u0165\015\103" +
    "\001\001\000\002\001\001\000\004\015\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\u016a\007\051" +
    "\013\046\016\047\017\060\023\037\030\032\050\050\051" +
    "\053\001\001\000\004\015\103\001\001\000\010\016\064" +
    "\017\u0106\022\u016c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\202\007\051\013" +
    "\046\016\047\017\060\023\037\030\032\050\050\051\053" +
    "\052\u0173\053\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0178\001\001\000\024" +
    "\006\u017b\007\051\013\046\016\047\017\060\023\037\030" +
    "\032\050\050\051\053\001\001\000\002\001\001\000\024" +
    "\006\u017a\007\051\013\046\016\047\017\060\023\037\030" +
    "\032\050\050\051\053\001\001\000\004\015\103\001\001" +
    "\000\004\015\103\001\001\000\004\015\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* The file being parsed. Only needed for location info. */
    File file;                   

    /* Buffer to get syntax error ino from message and location info
       from CUP's syntax_error to CUP's report_fatal_error
       function. */
    String errorMessage;
    pacioli.Location errorLocation;

   /* Public interface */
    public Parser(Lexer lex, ComplexSymbolFactory sf, File file) {
        super(lex,sf);
        this.file = file;
    }

    public static ProgramNode parseFile(File file) throws Exception {
        BufferedReader reader = new BufferedReader(new FileReader(file));
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        Lexer lexer = new Lexer(reader, csf, file, null);
        Parser parser = new Parser(lexer, csf, file);
        return (ProgramNode) parser.parse().value;
    }

   /* CUP overrides to get error handling with location info */
    public void report_error(String message, Object info) {
    }

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        done_parsing();      
        throw new PacioliException(errorLocation, errorMessage);
    }

    public void syntax_error(Symbol cur_token) {
        assert(cur_token instanceof ComplexSymbol);
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();
        for (Integer expected : ids){
            list.add(symbl_name_from_id(expected));
        }
        ComplexSymbol token = (ComplexSymbol) cur_token;
        errorLocation = makeLoc(token.getLeft(), token.getRight());
        errorMessage = "Expected one of " + list;
    }

   /* Utility functions for the grammar rules */
    private pacioli.Location makeLoc(Location from, Location to) {
        pacioli.Location pacioliFrom = new pacioli.Location(file, from.getLine(), from.getColumn(), from.getOffset());
        pacioli.Location pacioliTo = new pacioli.Location(file, to.getLine(), to.getColumn(), to.getOffset());
        return pacioliFrom.join(pacioliTo);
    }

    private static List<String> idNames(List<IdentifierNode> ids) {
        List<String> names = new ArrayList<String>();
        for (IdentifierNode id: ids) {
            names.add(id.getName());
        }
        return names;
    }

    private ValueDefinition functionDefinition(pacioli.Location loc, IdentifierNode id, List<IdentifierNode> args, ExpressionNode body) {
        ExpressionNode function = new LambdaNode(freshUnderscores(idNames(args)), body, loc);
        return new ValueDefinition(loc, id, function);
    }

    private static List<String> freshUnderscores(List<String> names) {
          List<String> fresh = new ArrayList<String>();
          for (String name : names) {
              if (name.equals("_")) {
                  fresh.add(freshUnderscore());
              } else {
                  fresh.add(name);
              }
          }
          return fresh;
      }

    private static int counter = 0;

    private static String freshUnderscore() {
        return "_" + counter++;
    }
    
    private static String freshName(String prefix) {
        return prefix + counter++;
    }

    private static ExpressionNode binop(String name, ExpressionNode left, ExpressionNode right) {
        pacioli.Location loc = left.getLocation().join(right.getLocation());
        List<ExpressionNode> args = new ArrayList<ExpressionNode>();
        args.add(left);
        args.add(right);
        return new ApplicationNode(new IdentifierNode(name, loc), args, loc);
    }

    private static ExpressionNode desugarExp(String op, ExpressionNode base, String power,
        pacioli.Location loc, boolean swapSign) {
      
          int pow = Integer.parseInt(power);
          
        ExpressionNode bas;
        
        if (pow < 0) {
            bas = new ApplicationNode(new IdentifierNode(op.equals("multiply") ? "reciprocal" : "inverse", loc), Arrays.asList(base), loc);
        } else {
            bas = base;
        }
        return desugarExpHelper(op, bas, (pow < 0) ? -pow : pow, loc);
    }

    private static ExpressionNode desugarExpHelper(String op, ExpressionNode base, int power, pacioli.Location loc) {

        if (power == 0) {
        List<ExpressionNode> args = new ArrayList<ExpressionNode>();
        args.add(base);
        return new ApplicationNode(new IdentifierNode(op.equals("multiply")? "unit" : "left_identity", loc), args, loc);
        } else if (power == 1) {
        return base;
        } else {
        String fresh = freshName(op);

        ExpressionNode exp = new IdentifierNode(fresh, loc);

        for (int i = 1; i < power; i++) {
            List<ExpressionNode> args = new ArrayList<ExpressionNode>();
            args.add(exp);
            args.add(new IdentifierNode(fresh, loc));
            exp = new ApplicationNode(new IdentifierNode(op, loc), args, loc);
        }

        BindingNode binding = new LetBindingNode(loc, fresh, base);
        return new LetNode(Arrays.asList(binding), exp, loc);
        }
    }

    private static ExpressionNode singleop(String name, ExpressionNode exp, pacioli.Location loc) {
        List<ExpressionNode> args = new ArrayList<ExpressionNode>();
        args.add(exp);
        return new ApplicationNode(new IdentifierNode(name, loc), args, loc);
    }

    private static class GeneratorClause {
        public final IdentifierNode id;
        public final ExpressionNode list;
        public GeneratorClause(IdentifierNode id, ExpressionNode list) {
            this.id = id;
            this.list = list;
        }
    }

    private static class TupleGeneratorClause {
        public final List<IdentifierNode> ids;
        public final ExpressionNode list;
        public TupleGeneratorClause(List<IdentifierNode> ids, ExpressionNode list) {
            this.ids = ids;
            this.list = list;
        }
    }

    private static class AssignmentClause {
        public final IdentifierNode id;
        public final ExpressionNode value;
        public AssignmentClause(IdentifierNode id, ExpressionNode value) {
            this.id = id;
            this.value = value;
        }
    }

    private static class TupleAssignmentClause {
        public final List<IdentifierNode> ids;
        public final ExpressionNode value;
        public TupleAssignmentClause(List<IdentifierNode> ids, ExpressionNode value) {
            this.ids = ids;
            this.value = value;
        }
    }

    private static ExpressionNode desugarComprehension(pacioli.Location loc, ExpressionNode e, List<Object> ps) throws PacioliException {

        String accuName = freshName("_c_accu");
        String tupName = freshName("_c_tup");

        ExpressionNode addMut = new IdentifierNode("_add_mut", e.getLocation());
        ExpressionNode accu = new IdentifierNode(accuName, e.getLocation());
        ExpressionNode body = new ApplicationNode(addMut, Arrays.asList(accu, e), e.getLocation());

        for (int i = ps.size() - 1; 0 <= i; i--) {
            Object part = ps.get(i);
            if (part instanceof GeneratorClause) {
                GeneratorClause clause = (GeneratorClause) part;
                pacioli.Location loc2 = clause.list.getLocation();
                body = new ApplicationNode(
                                new IdentifierNode("loop_list",loc2),
                                Arrays.asList((ExpressionNode) new IdentifierNode(accuName, loc2),
                                              new LambdaNode(freshUnderscores(Arrays.asList(accuName, clause.id.getName())), body, loc2), clause.list),
                                loc2);
            } else if (part instanceof TupleGeneratorClause) {
                TupleGeneratorClause clause = (TupleGeneratorClause) part;
                pacioli.Location loc2 = clause.list.getLocation();

                List<String> args = new ArrayList<String>();
                for (IdentifierNode var : clause.ids) {
                    args.add(var.getName());
                }

                ExpressionNode apply = new IdentifierNode("apply", loc2);
                ExpressionNode restLambda = new LambdaNode(freshUnderscores(args), body, loc2);
                ExpressionNode tup = new IdentifierNode(tupName, loc2);
                ExpressionNode loopList = new IdentifierNode("loop_list", loc2);
                ExpressionNode accuId = new IdentifierNode(accuName, loc2);
                ExpressionNode restApp = new ApplicationNode(apply, Arrays.asList(restLambda, tup), loc2);
                ExpressionNode restAppLambda = new LambdaNode(Arrays.asList(accuName, tupName), restApp, loc2);

                body = new ApplicationNode(loopList, Arrays.asList(accuId, restAppLambda, clause.list), loc2);
            } else if (part instanceof AssignmentClause) {
                AssignmentClause clause = (AssignmentClause) part;

                body = new ApplicationNode(new LambdaNode(freshUnderscores(Arrays.asList(clause.id.getName())), body, body.getLocation()), Arrays.asList(clause.value), clause.value.getLocation());
            } else if (part instanceof TupleAssignmentClause) {

                TupleAssignmentClause clause = (TupleAssignmentClause) part;

                List<String> args = new ArrayList<String>();
                for (IdentifierNode var : clause.ids) {
                    args.add(var.getName());
                }

                ExpressionNode apply = new IdentifierNode("apply", loc);
                ExpressionNode restLambda = new LambdaNode(freshUnderscores(args), body, loc);

                body = new ApplicationNode(apply, Arrays.asList(restLambda, clause.value), clause.value.getLocation());
            } else if (part instanceof ExpressionNode) {
                ExpressionNode clause = (ExpressionNode) part;
                body = new BranchNode(clause, body, new IdentifierNode(accuName, loc), loc);
            } else {
                throw new PacioliException(loc, "Unexpected clause %s", part);
            }
        }

        ExpressionNode lambda = new LambdaNode(Arrays .asList(accuName), body, loc);
        ExpressionNode emptyListId = new IdentifierNode("empty_list", loc);
        ExpressionNode emptyList = new ApplicationNode(emptyListId, new ArrayList<ExpressionNode>(), loc);

        return new ApplicationNode(lambda, Arrays.asList(emptyList), loc);
    }

    private static ExpressionNode desugarFoldComprehension(pacioli.Location loc, IdentifierNode op, ExpressionNode e, List<Object> ps) throws PacioliException {
        pacioli.Location eLoc = e.getLocation();
        pacioli.Location opLoc = op.getLocation();
        ExpressionNode body = desugarComprehension(loc, e, ps);
        if (op.getName().equals("sum")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_sum", eLoc), Arrays.asList(body), opLoc);
        } else if (op.getName().equals("count")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_count", eLoc), Arrays.asList(body), opLoc);
        } else if (op.getName().equals("all")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_all", eLoc), Arrays.asList(body), opLoc);
        } else if (op.getName().equals("some")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_some", eLoc), Arrays.asList(body), opLoc);
        } else if (op.getName().equals("gcd")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_gcd", eLoc), Arrays.asList(body), opLoc);
        } else if (op.getName().equals("concat")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_concat", eLoc), Arrays.asList(body), opLoc);
        } else {
            throw new PacioliException(op.getLocation(), "Comprehension operator '%s' unknown", op.getName());
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= includes commands 
            {
              ProgramNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Node> i = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Definition> c = (List<Definition>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<IncludeNode> includes = new ArrayList<IncludeNode>();
                                                       List<ImportNode> imports = new ArrayList<ImportNode>();
                                                       for (Node node : i) {
                                                           if (node instanceof IncludeNode) {
                                                               includes.add((IncludeNode) node);
                                                           } else {
                                                               imports.add((ImportNode) node);
                                                           }
                                                       }
                                                       RESULT = new ProgramNode(new pacioli.Location(file, 0, 0, 0), includes, imports, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // includes ::= includes INCLUDE path SEMICOLON 
            {
              List<Node> RESULT =null;
		Location isxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location isxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<Node> is = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		StringNode p = (StringNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 is.add(new IncludeNode(makeLoc(pxleft, pxright), p)); RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // includes ::= includes IMPORT path SEMICOLON 
            {
              List<Node> RESULT =null;
		Location isxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location isxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<Node> is = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		StringNode p = (StringNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 is.add(new ImportNode(makeLoc(pxleft, pxright), p)); RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // includes ::= 
            {
              List<Node> RESULT =null;
		 RESULT = new ArrayList<Node>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // commands ::= commands command SEMICOLON 
            {
              List<Definition> RESULT =null;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Definition> cs = (List<Definition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Definition c = (Definition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 cs.add(c); RESULT = cs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commands",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // commands ::= 
            {
              List<Definition> RESULT =null;
		 RESULT = new LinkedList<Definition>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commands",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command ::= DEFINE id EQL expr 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValueDefinition(makeLoc(dxleft, exright), id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command ::= DEFINE id idlist EQL expr 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = functionDefinition(makeLoc(dxleft, exright), id, ids, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // command ::= DECLARE quali ids DBLCLN schema 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location qxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location qxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultiDeclaration(makeLoc(dxleft, sxright), ids, s, q != null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // command ::= DEFINDEX id 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> names = new ArrayList<String>();
                                                       RESULT = new IndexSetDefinition(makeLoc(dxleft, idxright), id, names); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // command ::= DEFINDEX id EQL LBRC names RBRC 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IndexSetDefinition(makeLoc(dxleft, pxright), id, idNames(ids)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // command ::= DEFINDEX id EQL expr 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IndexSetDefinition(makeLoc(dxleft, exright), id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // command ::= DEFTYPE schema EQL type 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeDefinition(makeLoc(dxleft, txright), s.context, s.type, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // command ::= DEFALIAS id EQL unit 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AliasDefinition(makeLoc(dxleft, uxright), id, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // command ::= DEFUNIT typeid EXCL typeid EQL unitvec 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TypeIdentifierNode id = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeIdentifierNode n = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<UnitDecl> ps = (List<UnitDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 /* Todo: remove hashmap and use pair list directly in UnitVectorDefinition */
                                                       java.util.Map<String, UnitNode> unitVector = new HashMap<String, UnitNode>();
                                                       for (UnitDecl pair: ps) {
                                                           unitVector.put(pair.key.getName(), pair.value);
                                                       }
                                                       RESULT = new UnitVectorDefinition(makeLoc(dxleft, psxright), id, n, ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // command ::= DEFUNIT id STRING 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitDefinition(makeLoc(dxleft, sxright), id, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // command ::= DEFUNIT id STRING EQL dimnum 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode def = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitDefinition(makeLoc(dxleft, defxright), id, s, def); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // command ::= DEFMATRIX id DBLCLN type EQL matrix 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode s = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ValueDecl> m = (List<ValueDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 /* Change MatrixLiteralNode to accept a ValueDecl list */
                                                       //List<Pair<List<String>, String>> stringPairs = new ArrayList<Pair<List<String>, String>>();
                                                       //for (ValueDecl decl: m) {
                                                         //  stringPairs.add(new Pair<List<String>, String>(idNames(decl.key), decl.value));
                                                       //}
                                                       ExpressionNode body = new MatrixLiteralNode(makeLoc(mxleft, mxright), s, m);
                                                       //ExpressionNode body = new MatrixLiteralNode(makeLoc(mxleft, mxright), s, stringPairs);
                                                       RESULT = new ValueDefinition(makeLoc(dxleft, mxright), id, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // command ::= DEFCONV id DBLCLN type 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(dxleft, txright);
                                                       ExpressionNode conv = new ConversionNode(loc, t);
                                                       RESULT = new ValueDefinition(loc, id, conv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // command ::= DOC id STRING 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(dxleft, sxright);
                                                       RESULT = new Documentation(loc, id, new StringNode(s, makeLoc(sxleft, sxright))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // command ::= expr 
            {
              Definition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Toplevel(e.getLocation(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // quali ::= EXPORT 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("quali",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // quali ::= PUBLIC 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("quali",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // quali ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("quali",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // path ::= STRING 
            {
              StringNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(s, makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // path ::= IDENTIFIER 
            {
              StringNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(s, makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // path ::= path DIV STRING 
            {
              StringNode RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		StringNode p = (StringNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(p.valueString() + "/" + s, makeLoc(pxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // path ::= path DIV IDENTIFIER 
            {
              StringNode RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		StringNode p = (StringNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(p.valueString() + "/" + s, makeLoc(pxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // matrix ::= LBRC RBRC 
            {
              List<ValueDecl> RESULT =null;
		 RESULT = new LinkedList<ValueDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // matrix ::= LBRC matrix_parts RBRC 
            {
              List<ValueDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ValueDecl> ps = (List<ValueDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // matrix_parts ::= names TO number 
            {
              List<ValueDecl> RESULT =null;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ns = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ValueDecl>(Arrays.asList(new ValueDecl(ns, n))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_parts",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // matrix_parts ::= matrix_parts COMMA names TO number 
            {
              List<ValueDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<ValueDecl> ps = (List<ValueDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ns = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(new ValueDecl(ns, n)); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_parts",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unitvec ::= LBRC RBRC 
            {
              List<UnitDecl> RESULT =null;
		 RESULT = new LinkedList<UnitDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unitvec ::= LBRC unitvec_parts RBRC 
            {
              List<UnitDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<UnitDecl> ps = (List<UnitDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unitvec_parts ::= name COLON unit 
            {
              List<UnitDecl> RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<UnitDecl>(Arrays.asList(new UnitDecl(n, u))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec_parts",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unitvec_parts ::= unitvec_parts COMMA name COLON unit 
            {
              List<UnitDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<UnitDecl> ps = (List<UnitDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(new UnitDecl(n, u)); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec_parts",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // number ::= unsigned 
            {
              String RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // number ::= NEG unsigned 
            {
              String RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "-" + u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // integer ::= NATURAL 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // integer ::= NEG NATURAL 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "-" + n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unsigned ::= DECIMAL 
            {
              String RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unsigned ::= NATURAL 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // id ::= IDENTIFIER 
            {
              IdentifierNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierNode(id, makeLoc(idxleft, idxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ids ::= id 
            {
              List<IdentifierNode> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<IdentifierNode>(Arrays.asList(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ids ::= ids COMMA id 
            {
              List<IdentifierNode> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ids.add(id); RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // idlist ::= LPAR RPAR 
            {
              List<IdentifierNode> RESULT =null;
		 RESULT = new LinkedList<IdentifierNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // idlist ::= LPAR idlist_tail 
            {
              List<IdentifierNode> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // idlist_tail ::= id RPAR 
            {
              List<IdentifierNode> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<IdentifierNode>(Arrays.asList(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist_tail",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // idlist_tail ::= id COMMA idlist_tail 
            {
              List<IdentifierNode> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ids.add(0, id); RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist_tail",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // typeid ::= IDENTIFIER 
            {
              TypeIdentifierNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeIdentifierNode(makeLoc(idxleft, idxright), id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeid",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // name ::= id 
            {
              IdentifierNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // name ::= STRING 
            {
              IdentifierNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierNode(s, makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // names ::= name 
            {
              List<IdentifierNode> RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<IdentifierNode>(Arrays.asList(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("names",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // names ::= names COMMA name 
            {
              List<IdentifierNode> RESULT =null;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ns = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ns.add(n); RESULT = ns; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("names",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exprs ::= expr 
            {
              List<ExpressionNode> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ExpressionNode>(Arrays.asList(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exprs ::= exprs COMMA expr 
            {
              List<ExpressionNode> RESULT =null;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ExpressionNode> es = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 es.add(e); RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exprlist ::= LPAR RPAR 
            {
              List<ExpressionNode> RESULT =null;
		 RESULT = new LinkedList<ExpressionNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exprlist ::= LPAR exprs RPAR 
            {
              List<ExpressionNode> RESULT =null;
		Location exprsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exprsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> exprs = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exprs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr_no_id 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= id 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_no_id ::= NEG expr 
            {
              ExpressionNode RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("negative", e, makeLoc(nxleft, exright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_no_id ::= idlist 
            {
              ExpressionNode RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdListNode(makeLoc(idsxleft, idsxright), ids); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_no_id ::= LPAR expr_no_id RPAR 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_no_id ::= expr NEG expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("minus", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_no_id ::= expr HAT integer 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = desugarExp("multiply", e1, e2, makeLoc(e1xleft, e2xright), false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_no_id ::= expr PER expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("dim_div", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_no_id ::= expr EQL expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("equal", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_no_id ::= expr TRANS 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("transpose", e, makeLoc(exleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_no_id ::= expr RECI 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("reciprocal", e, makeLoc(exleft, rxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_no_id ::= expr DIMINV 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("dim_inv", e, makeLoc(exleft, dxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_no_id ::= expr MULT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("multiply", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr_no_id ::= expr PLUS expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("sum", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr_no_id ::= expr MMULT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("mmult", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_no_id ::= expr MEXPT integer 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = desugarExp("mmult", e1, e2, makeLoc(e1xleft, e2xright), false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_no_id ::= expr DIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("divide", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_no_id ::= expr MDIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("right_division", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_no_id ::= expr LEFTDIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("left_divide", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr_no_id ::= expr MLEFTDIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("left_division", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr_no_id ::= expr LSCALE expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("scale", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr_no_id ::= expr RSCALE expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("rscale", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr_no_id ::= expr LSCALEDOWN expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("lscale_down", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr_no_id ::= expr RSCALEDOWN expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("scale_down", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr_no_id ::= expr LEQ expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("less_eq", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr_no_id ::= expr GTQ expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("greater_eq", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr_no_id ::= expr NEQ expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("not_equal", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr_no_id ::= expr LE expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("less", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr_no_id ::= expr GT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("greater", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr_no_id ::= expr FOLLOWSFROM expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e2, e1, new ConstNode("true", loc), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr_no_id ::= expr IMPLIES expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e1, e2, new ConstNode("true", loc), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr_no_id ::= expr EQUIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("equiv", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr_no_id ::= expr AND expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e1, e2, new ConstNode("false", loc), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr_no_id ::= expr OR expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e1, new ConstNode("true", loc), e2, loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr_no_id ::= expr exprlist 
            {
              ExpressionNode RESULT =null;
		Location funxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location funxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode fun = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ExpressionNode> args = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ApplicationNode(fun, args, makeLoc(funxleft, argsxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr_no_id ::= idlist TO expr 
            {
              ExpressionNode RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode b = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LambdaNode(freshUnderscores(idNames(ids)), b, makeLoc(idsxleft, bxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr_no_id ::= IF expr THEN expr if_tail 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode b = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BranchNode(c, b, t, makeLoc(ixleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr_no_id ::= LET lettail 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr_no_id ::= listlit 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_no_id ::= comprehension 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_no_id ::= PIPE matrix_type PIPE 
            {
              ExpressionNode RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeNode m = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MatrixTypeNode(makeLoc(mxleft, mxright), m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_no_id ::= BEGIN sequence END 
            {
              ExpressionNode RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StatementNode(makeLoc(bxleft, exright), s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_no_id ::= indexkey 
            {
              ExpressionNode RESULT =null;
		Location kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		KeyNode k = (KeyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = k; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr_no_id ::= unsigned 
            {
              ExpressionNode RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstNode(u, makeLoc(uxleft, uxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr_no_id ::= BOOLEAN 
            {
              ExpressionNode RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstNode(b, makeLoc(bxleft, bxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr_no_id ::= STRING 
            {
              ExpressionNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(s, makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr_no_id ::= QUESTIONMARKS 
            {
              ExpressionNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ApplicationNode(new IdentifierNode("_three_question_marks", makeLoc(sxleft, sxright)), new ArrayList<ExpressionNode>() , makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // if_tail ::= ELSEIF expr THEN expr if_tail 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode b = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BranchNode(c, b, t, makeLoc(ixleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_tail",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // if_tail ::= ELSE expr END 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_tail",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // indexkey ::= name AT name 
            {
              KeyNode RESULT =null;
		Location idxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode idx = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new KeyNode(idx.getName(), id.getName(), makeLoc(idxxleft, idxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexkey",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // indexkey ::= indexkey MOD name AT name 
            {
              KeyNode RESULT =null;
		Location kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		KeyNode k = (KeyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode idx = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 KeyNode node = new KeyNode(idx.getName(), id.getName(), makeLoc(idxxleft, idxright));
                                                       RESULT = k.merge(node); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexkey",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // lettail ::= id EQL expr letrest 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> args = freshUnderscores(Arrays.asList(id.getName()));  // remove fresh underscors
                                                       BindingNode binding = new LetBindingNode(makeLoc(idxleft, exright), args.get(0), e);
                                                       RESULT = new LetNode(Arrays.asList(binding), r, makeLoc(idxleft, rxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lettail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // lettail ::= idlist EQL expr letrest 
            {
              ExpressionNode RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> args = freshUnderscores(idNames(ids));
                                                       pacioli.Location loc = makeLoc(idsxleft, rxright);
                                                       ExpressionNode fun = new LambdaNode(args, r, r.getLocation());
                                                       RESULT = new ApplicationNode(new IdentifierNode("apply", e.getLocation()), Arrays.asList(fun, e), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lettail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // lettail ::= id idlist EQL expr letrest 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //List<String> rArgs = freshUnderscores(Arrays.asList(id.getName()));
                                                       List<String> eArgs = freshUnderscores(idNames(ids)); // remove fresh underscors
                                                       pacioli.Location loc = makeLoc(idxleft, rxright);
                                                       ExpressionNode eFun = new LambdaNode(eArgs, e, e.getLocation());
                                                       BindingNode binding = new LetBindingNode(makeLoc(idsxleft, exright), id.getName(), eFun);
                                                       RESULT = new LetNode(Arrays.asList(binding), r, loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lettail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // letrest ::= IN expr END 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("letrest",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // letrest ::= COMMA lettail 
            {
              ExpressionNode RESULT =null;
		Location ltxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ltxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode lt = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("letrest",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sequence ::= statements 
            {
              SequenceNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ExpressionNode> s = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SequenceNode(makeLoc(sxleft, sxright), s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // statements ::= statement 
            {
              List<ExpressionNode> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode s = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ExpressionNode>(Arrays.asList(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // statements ::= statements statement 
            {
              List<ExpressionNode> RESULT =null;
		Location ssxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ssxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> ss = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode s = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // statement ::= id ASSIGN expr SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentNode(makeLoc(idxleft, sxright), id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // statement ::= idlist ASSIGN expr SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TupleAssignmentNode(makeLoc(idsxleft, sxright), ids, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // statement ::= id exprlist SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> es = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ApplicationNode(id, es, makeLoc(idxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // statement ::= RETURN expr SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(rxleft, sxright);
                                                       RESULT = new ReturnNode(loc, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // statement ::= RETURN SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(rxleft, sxright);
                                                       RESULT = new ReturnNode(loc, new IdentifierNode("nothing", loc)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // statement ::= WHILE expr DO sequence END 
            {
              ExpressionNode RESULT =null;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileNode(makeLoc(wxleft, nxright), e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // statement ::= IF expr THEN sequence stm_if_tail 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(ixleft, txright);
                                                       RESULT = new IfStatementNode(loc, e, s, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // stm_if_tail ::= ELSEIF expr THEN sequence stm_if_tail 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, txright);
                                                       RESULT = new IfStatementNode(loc, e, s, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stm_if_tail",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // stm_if_tail ::= ELSE sequence END 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stm_if_tail",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // stm_if_tail ::= END 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(exleft, exright);
                                                       RESULT = new ApplicationNode(new IdentifierNode("_skip", loc), new ArrayList<ExpressionNode>(), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stm_if_tail",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // listlit ::= LBRACK RBRACK 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, rxright);
                                                       RESULT = new ApplicationNode(new IdentifierNode("empty_list", loc), new ArrayList<ExpressionNode>(), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listlit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // listlit ::= LBRACK exprs RBRACK 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> es = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, rxright);
                                                       ExpressionNode list = new ApplicationNode(new IdentifierNode("empty_list", loc), new ArrayList<ExpressionNode>(), loc);
                                                       for (ExpressionNode item : es) {
                                                           List<ExpressionNode> tup = new ArrayList<ExpressionNode>();
                                                           tup.add(list);
                                                           tup.add(item);
                                                           list = new ApplicationNode(new IdentifierNode("_add_mut", loc), tup, item.getLocation());
                                                       }
                                                       RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listlit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // comprehension ::= LBRACK expr PIPE parts RBRACK 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Object> ps = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, rxright);
                                                       RESULT = desugarComprehension(loc, e, ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comprehension",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // comprehension ::= id LBRACK expr PIPE parts RBRACK 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Object> ps = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(idxleft, rxright);
                                                       RESULT = desugarFoldComprehension(loc, id, e, ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comprehension",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // parts ::= part 
            {
              List<Object> RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Object>(Arrays.asList(p)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parts",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // parts ::= parts COMMA part 
            {
              List<Object> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Object> ps = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(p); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parts",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // part ::= expr 
            {
              Object RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // part ::= expr FROM expr 
            {
              Object RESULT =null;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode g = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if (g instanceof IdListNode) {
                                                           RESULT = new TupleGeneratorClause(((IdListNode)g).ids, e);
                                                        } else if (g instanceof IdentifierNode) {
                                                            RESULT = new GeneratorClause((IdentifierNode) g, e);
                                                        } else {
                                                            errorLocation = g.getLocation();
                                                            errorMessage = "Expected a variable or tuple";
                                                            report_fatal_error("Fixme: this string is not used? How to throw an error here?", g);
                                                        }
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // part ::= expr ASSIGN expr 
            {
              Object RESULT =null;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode g = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if (g instanceof IdListNode) {
                                                           RESULT = new TupleAssignmentClause(((IdListNode)g).ids, e);
                                                        } else if (g instanceof IdentifierNode) {
                                                            RESULT = new AssignmentClause((IdentifierNode) g, e);
                                                        } else {
                                                            errorLocation = g.getLocation();
                                                            errorMessage = "Expected a variable or tuple";
                                                            report_fatal_error("Fixme: this string is not used? How to throw an error here?", g);
                                                        } 
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // schema ::= FORTYPE ids classcondition COLON schema 
            {
              SchemaNode RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TypeContext context = s.context;
                                                       for (IdentifierNode id: ids) {
              		                                   context.addTypeVar(id.getName());
                                                       }
                                                       RESULT = new SchemaNode(makeLoc(fxleft, sxright), context , s.type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("schema",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // schema ::= FORINDEX ids classcondition COLON schema 
            {
              SchemaNode RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TypeContext context = s.context;
                                                       for (IdentifierNode id: ids) {
              		                                   context.addIndexVar(id.getName());
                                                       }
                                                       RESULT = new SchemaNode(makeLoc(fxleft, sxright), context , s.type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("schema",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // schema ::= FORUNIT vars classcondition COLON schema 
            {
              SchemaNode RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location vsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location vsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<String> vs = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TypeContext context = s.context;
                                                       for (String v: vs) {
              		                                   context.addUnitVar(v);
                                                       }
                                                       RESULT = new SchemaNode(makeLoc(fxleft, sxright), context , s.type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("schema",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // schema ::= FOROP vars classcondition COLON schema 
            {
              SchemaNode RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location vsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location vsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<String> vs = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TypeContext context = s.context;
                                                       for (String v: vs) {
              		                                   context.addOpVar(v);
                                                       }
                                                       RESULT = new SchemaNode(makeLoc(fxleft, sxright), context , s.type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("schema",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // schema ::= type 
            {
              SchemaNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SchemaNode(makeLoc(txleft, txright), new TypeContext(), t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("schema",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // classcondition ::= WHERE conditions 
            {
              List<TypeNode> RESULT =null;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<TypeNode> cs = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = List.of(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classcondition",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // classcondition ::= 
            {
              List<TypeNode> RESULT =null;
		 RESULT = List.of(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classcondition",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // conditions ::= conditions AND typeid idlist 
            {
              List<TypeNode> RESULT =null;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<TypeNode> cs = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeIdentifierNode id = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdentifierNode> ts = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = List.of(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // conditions ::= typeid idlist 
            {
              List<TypeNode> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeIdentifierNode id = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdentifierNode> ts = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = List.of(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // vars ::= var 
            {
              List<String> RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<String>(Arrays.asList(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // vars ::= vars COMMA var 
            {
              List<String> RESULT =null;
		Location vsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location vsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> vs = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 vs.add(v); RESULT = vs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // var ::= id 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id.getName(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // var ::= id EXCL id 
            {
              String RESULT =null;
		Location idxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode idx = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = idx.getName() + "!" + id.getName(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // types ::= type 
            {
              List<TypeNode> RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<TypeNode>(Arrays.asList(t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // types ::= types COMMA type 
            {
              List<TypeNode> RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<TypeNode> ts = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ts.add(t); RESULT = ts; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // typelist ::= LPAR RPAR 
            {
              List<TypeNode> RESULT =null;
		 RESULT = new LinkedList<TypeNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typelist",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // typelist ::= LPAR types RPAR 
            {
              List<TypeNode> RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<TypeNode> ts = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ts; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typelist",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // type ::= typelist TO type 
            {
              TypeNode RESULT =null;
		Location asxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location asxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<TypeNode> as = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode b = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TypeNode domain = new TypeApplicationNode(makeLoc(asxleft, bxright), 
                                                                            new TypeIdentifierNode(makeLoc(asxleft, asxright), "Tuple"), as);
                                                       RESULT = new FunctionTypeNode(makeLoc(asxleft, bxright), domain, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // type ::= typeid TO type 
            {
              TypeNode RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeIdentifierNode a = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode b = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionTypeNode(makeLoc(axleft, bxright), a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // type ::= typeid typelist 
            {
              TypeNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeIdentifierNode id = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<TypeNode> ts = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeApplicationNode(makeLoc(idxleft, tsxright), id, ts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // type ::= matrix_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // matrix_type ::= dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // matrix_type ::= dim_type PER dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypePerNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // dim_type ::= dim_type MULT dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeMultiplyNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // dim_type ::= dim_type DIV dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeDivideNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // dim_type ::= dim_type HAT integer 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypePowerNode(makeLoc(xxleft, nxright), x, new NumberTypeNode(makeLoc(nxleft, nxright), n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // dim_type ::= dim_type MOD dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeKroneckerNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // dim_type ::= typeid 
            {
              TypeNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdentifierNode id = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // dim_type ::= typeid COLON typeid 
            {
              TypeNode RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeIdentifierNode p = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdentifierNode u = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrefixUnitTypeNode(makeLoc(pxleft, uxright), p, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // dim_type ::= typeid EXCL 
            {
              TypeNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeIdentifierNode i = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BangTypeNode(makeLoc(ixleft, exright), i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // dim_type ::= typeid EXCL typeid 
            {
              TypeNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeIdentifierNode i = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdentifierNode u = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BangTypeNode(makeLoc(ixleft, uxright), i, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // dim_type ::= NATURAL 
            {
              TypeNode RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (n.equals("1")) {
                                                           RESULT = new NumberTypeNode(makeLoc(nxleft, nxright), n);
                                                       } else {
                                                           report_fatal_error("Number unexpected. Only number 1 allowed.", n);
                                                       } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // unit ::= unit_term 
            {
              UnitNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode t = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // unit ::= unit MULT unit 
            {
              UnitNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		UnitNode x = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode y = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitOperationNode(makeLoc(xxleft, yxright), "*", x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // unit ::= unit DIV unit 
            {
              UnitNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		UnitNode x = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode y = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitOperationNode(makeLoc(xxleft, yxright), "/", x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // unit ::= unit HAT integer 
            {
              UnitNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		UnitNode x = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitPowerNode(makeLoc(xxleft, nxright), x, new NumberUnitNode(n, makeLoc(nxleft, nxright))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // unit_term ::= LPAR unit_term RPAR 
            {
              UnitNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		UnitNode t = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // unit_term ::= id 
            {
              UnitNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitIdentifierNode(id.getLocation(), id.getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // unit_term ::= id COLON id 
            {
              UnitNode RESULT =null;
		Location prexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location prexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode pre = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitIdentifierNode(pre.getLocation().join(id.getLocation()), pre.getName(), id.getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // unit_term ::= unsigned 
            {
              UnitNode RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NumberUnitNode(n, makeLoc(nxleft, nxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // dimnum ::= unit 
            {
              UnitNode RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimnum",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
