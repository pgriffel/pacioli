
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pacioli.parser;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.List;
import java.util.HashMap;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.LinkedList;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import pacioli.PacioliException;
import pacioli.ast.*;
import pacioli.ast.definition.*;
import pacioli.ast.definition.UnitVectorDefinition.UnitDecl;
import pacioli.ast.expression.MatrixLiteralNode.ValueDecl;
import pacioli.ast.expression.*;
import pacioli.ast.expression.LetNode.BindingNode;
import pacioli.ast.unit.*;
import pacioli.types.ast.*;
import pacioli.TypeContext;
import pacioli.symboltable.SymbolTable;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\275\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\006\000\002\003\002\000\002\004\005" +
    "\000\002\004\002\000\002\005\006\000\002\005\007\000" +
    "\002\005\007\000\002\005\004\000\002\005\010\000\002" +
    "\005\006\000\002\005\006\000\002\005\006\000\002\005" +
    "\010\000\002\005\005\000\002\005\007\000\002\005\010" +
    "\000\002\005\006\000\002\005\005\000\002\005\003\000" +
    "\002\005\007\000\002\005\007\000\002\061\003\000\002" +
    "\061\003\000\002\061\002\000\002\064\005\000\002\064" +
    "\003\000\002\065\005\000\002\065\003\000\002\067\005" +
    "\000\002\066\005\000\002\066\006\000\002\033\003\000" +
    "\002\033\003\000\002\033\005\000\002\033\005\000\002" +
    "\037\004\000\002\037\005\000\002\036\005\000\002\036" +
    "\007\000\002\034\004\000\002\034\005\000\002\035\005" +
    "\000\002\035\007\000\002\031\003\000\002\031\004\000" +
    "\002\032\003\000\002\032\004\000\002\030\003\000\002" +
    "\030\003\000\002\016\003\000\002\021\003\000\002\021" +
    "\005\000\002\023\004\000\002\023\004\000\002\024\004" +
    "\000\002\024\005\000\002\020\003\000\002\017\003\000" +
    "\002\017\003\000\002\022\003\000\002\022\005\000\002" +
    "\014\003\000\002\014\005\000\002\015\004\000\002\015" +
    "\005\000\002\006\003\000\002\006\003\000\002\007\004" +
    "\000\002\007\003\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\004\000\002" +
    "\007\005\000\002\007\007\000\002\007\004\000\002\007" +
    "\003\000\002\007\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\007\000\002" +
    "\010\005\000\002\051\005\000\002\051\007\000\002\011" +
    "\006\000\002\011\006\000\002\011\007\000\002\012\005" +
    "\000\002\012\004\000\002\056\003\000\002\055\003\000" +
    "\002\055\004\000\002\057\006\000\002\057\006\000\002" +
    "\057\005\000\002\057\005\000\002\057\004\000\002\057" +
    "\007\000\002\057\007\000\002\060\007\000\002\060\005" +
    "\000\002\060\003\000\002\013\004\000\002\013\005\000" +
    "\002\052\007\000\002\052\010\000\002\053\003\000\002" +
    "\053\005\000\002\054\002\000\002\054\003\000\002\054" +
    "\005\000\002\054\005\000\002\043\004\000\002\044\007" +
    "\000\002\044\007\000\002\044\007\000\002\044\007\000" +
    "\002\044\002\000\002\062\004\000\002\062\002\000\002" +
    "\063\006\000\002\063\004\000\002\050\003\000\002\050" +
    "\005\000\002\047\003\000\002\047\005\000\002\045\003" +
    "\000\002\045\005\000\002\046\004\000\002\046\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\004\000\002" +
    "\040\003\000\002\041\003\000\002\041\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\005" +
    "\000\002\042\003\000\002\042\005\000\002\042\004\000" +
    "\002\042\005\000\002\042\003\000\002\026\003\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\027" +
    "\005\000\002\027\003\000\002\027\005\000\002\027\003" +
    "\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019a\000\070\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\023\ufffd\026\ufffd\037\ufffd\054" +
    "\ufffd\060\ufffd\062\ufffd\071\ufffd\120\ufffd\121\ufffd\122\ufffd" +
    "\123\ufffd\124\ufffd\125\ufffd\001\002\000\004\002\u019c\001" +
    "\002\000\070\002\ufffb\004\010\005\007\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\023\ufffb\026\ufffb\037\ufffb\054\ufffb" +
    "\060\ufffb\062\ufffb\071\ufffb\120\ufffb\121\ufffb\122\ufffb\123" +
    "\ufffb\124\ufffb\125\ufffb\001\002\000\064\002\001\006\027" +
    "\007\061\010\036\011\046\012\060\013\057\014\047\015" +
    "\042\016\045\017\056\020\024\023\037\026\041\037\054" +
    "\054\062\060\034\062\022\071\025\120\043\121\023\122" +
    "\031\123\035\124\044\125\030\001\002\000\006\123\012" +
    "\124\011\001\002\000\006\123\012\124\011\001\002\000" +
    "\006\051\uffdf\065\uffdf\001\002\000\006\051\uffde\065\uffde" +
    "\001\002\000\006\051\014\065\015\001\002\000\070\002" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020" +
    "\uffff\023\uffff\026\uffff\037\uffff\054\uffff\060\uffff\062\uffff" +
    "\071\uffff\120\uffff\121\uffff\122\uffff\123\uffff\124\uffff\125" +
    "\uffff\001\002\000\006\123\017\124\016\001\002\000\006" +
    "\051\uffdd\065\uffdd\001\002\000\006\051\uffdc\065\uffdc\001" +
    "\002\000\006\051\021\065\015\001\002\000\070\002\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe" +
    "\023\ufffe\026\ufffe\037\ufffe\054\ufffe\060\ufffe\062\ufffe\071" +
    "\ufffe\120\ufffe\121\ufffe\122\ufffe\123\ufffe\124\ufffe\125\ufffe" +
    "\001\002\000\006\121\261\123\244\001\002\000\132\024" +
    "\uffce\025\uffce\027\uffce\031\uffce\032\uffce\035\uffce\036\uffce" +
    "\040\uffce\041\uffce\051\uffce\053\uffce\054\uffce\055\uffce\057" +
    "\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\067\uffce" +
    "\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076" +
    "\uffce\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce" +
    "\105\uffce\106\uffce\107\uffce\110\uffce\111\uffce\112\uffce\113" +
    "\uffce\114\uffce\115\uffce\116\uffce\117\uffce\001\002\000\004" +
    "\123\035\001\002\000\034\023\037\026\041\037\054\054" +
    "\062\060\034\062\022\071\025\120\043\121\023\122\031" +
    "\123\035\124\044\125\030\001\002\000\100\040\141\051" +
    "\uffec\054\140\063\107\064\125\065\126\067\104\070\114" +
    "\071\111\072\116\073\105\074\137\075\115\076\132\077" +
    "\124\100\135\101\131\102\133\103\117\104\127\105\110" +
    "\106\136\107\130\110\123\111\122\112\134\113\113\114" +
    "\103\115\112\116\120\117\121\001\002\000\004\123\035" +
    "\001\002\000\130\024\uff8f\025\uff8f\027\uff8f\031\uff8f\032" +
    "\uff8f\035\uff8f\036\uff8f\040\uff8f\041\uff8f\051\uff8f\053\uff8f" +
    "\054\uff8f\055\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065" +
    "\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f" +
    "\075\uff8f\076\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f\103" +
    "\uff8f\104\uff8f\105\uff8f\106\uff8f\107\uff8f\110\uff8f\111\uff8f" +
    "\112\uff8f\113\uff8f\114\uff8f\115\uff8f\116\uff8f\117\uff8f\001" +
    "\002\000\132\024\uffcf\025\uffcf\027\uffcf\031\uffcf\032\uffcf" +
    "\035\uffcf\036\uffcf\040\uffcf\041\uffcf\051\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\057\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074" +
    "\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf" +
    "\103\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf\111" +
    "\uffcf\112\uffcf\113\uffcf\114\uffcf\115\uffcf\116\uffcf\117\uffcf" +
    "\001\002\000\004\051\u0190\001\002\000\130\024\uff92\025" +
    "\uff92\027\uff92\031\uff92\032\uff92\035\uff92\036\uff92\040\uff92" +
    "\041\uff92\051\uff92\053\uff92\054\uff92\055\uff92\061\uff92\062" +
    "\uff92\063\uff92\064\uff92\065\uff92\067\uff92\070\uff92\071\uff92" +
    "\072\uff92\073\uff92\074\uff92\075\uff92\076\uff92\077\uff92\100" +
    "\uff92\101\uff92\102\uff92\103\uff92\104\uff92\105\uff92\106\uff92" +
    "\107\uff92\110\uff92\111\uff92\112\uff92\113\uff92\114\uff92\115" +
    "\uff92\116\uff92\117\uff92\001\002\000\036\023\037\026\041" +
    "\037\054\054\062\060\034\061\u0189\062\022\071\025\120" +
    "\043\121\023\122\031\123\035\124\044\125\030\001\002" +
    "\000\154\024\uffcd\025\uffcd\027\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd\041\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd" +
    "\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074" +
    "\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd" +
    "\103\uffcd\104\uffcd\105\uffcd\106\uffcd\107\uffcd\110\uffcd\111" +
    "\uffcd\112\uffcd\113\uffcd\114\uffcd\115\uffcd\116\uffcd\117\uffcd" +
    "\124\uffcd\126\uffcd\001\002\000\004\123\035\001\002\000" +
    "\034\023\037\026\041\037\054\054\062\060\034\062\022" +
    "\071\025\120\043\121\023\122\031\123\035\124\044\125" +
    "\030\001\002\000\132\024\uffba\025\uffba\027\uffba\031\uffba" +
    "\032\uffba\034\u0175\035\uffba\036\uffba\040\uffba\041\uffba\051" +
    "\uffba\053\uffba\054\uffba\055\uffba\061\uffba\062\uffba\063\uffba" +
    "\064\uffba\065\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073" +
    "\uffba\074\uffba\075\uffba\076\uffba\077\uffba\100\uffba\101\uffba" +
    "\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\107\uffba\110" +
    "\uffba\111\uffba\112\uffba\113\uffba\114\uffba\115\uffba\116\uffba" +
    "\117\uffba\001\002\000\014\023\u0153\030\u014f\042\u0156\054" +
    "\250\123\035\001\002\000\004\123\035\001\002\000\130" +
    "\024\uff91\025\uff91\027\uff91\031\uff91\032\uff91\035\uff91\036" +
    "\uff91\040\uff91\041\uff91\051\uff91\053\uff91\054\uff91\055\uff91" +
    "\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91\067\uff91\070" +
    "\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91\076\uff91" +
    "\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91\104\uff91\105" +
    "\uff91\106\uff91\107\uff91\110\uff91\111\uff91\112\uff91\113\uff91" +
    "\114\uff91\115\uff91\116\uff91\117\uff91\001\002\000\132\024" +
    "\uff90\025\uff90\027\uff90\031\uff90\032\uff90\035\uff90\036\uff90" +
    "\040\uff90\041\uff90\047\uffc4\051\uff90\053\uff90\054\uff90\055" +
    "\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065\uff90\067\uff90" +
    "\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076" +
    "\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90\104\uff90" +
    "\105\uff90\106\uff90\107\uff90\110\uff90\111\uff90\112\uff90\113" +
    "\uff90\114\uff90\115\uff90\116\uff90\117\uff90\001\002\000\004" +
    "\123\244\001\002\000\020\043\231\044\232\045\233\046" +
    "\235\054\uff69\121\uff69\123\uff69\001\002\000\004\123\035" +
    "\001\002\000\130\024\uff97\025\uff97\027\uff97\031\uff97\032" +
    "\uff97\035\uff97\036\uff97\040\uff97\041\uff97\051\uff97\053\uff97" +
    "\054\uff97\055\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065" +
    "\uff97\067\uff97\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97" +
    "\075\uff97\076\uff97\077\uff97\100\uff97\101\uff97\102\uff97\103" +
    "\uff97\104\uff97\105\uff97\106\uff97\107\uff97\110\uff97\111\uff97" +
    "\112\uff97\113\uff97\114\uff97\115\uff97\116\uff97\117\uff97\001" +
    "\002\000\134\024\uffbc\025\uffbc\027\uffbc\031\uffbc\032\uffbc" +
    "\035\uffbc\036\uffbc\040\uffbc\041\uffbc\047\uffc5\051\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\060\077\061\uffbc\062\uffbc\063\uffbc" +
    "\064\uffbc\065\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073" +
    "\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc" +
    "\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110" +
    "\uffbc\111\uffbc\112\uffbc\113\uffbc\114\uffbc\115\uffbc\116\uffbc" +
    "\117\uffbc\001\002\000\132\024\uff93\025\uff93\027\uff93\031" +
    "\uff93\032\uff93\035\uff93\036\uff93\040\uff93\041\uff93\051\uff93" +
    "\053\uff93\054\uff93\055\uff93\061\uff93\062\uff93\063\uff93\064" +
    "\uff93\065\uff93\066\u0138\067\uff93\070\uff93\071\uff93\072\uff93" +
    "\073\uff93\074\uff93\075\uff93\076\uff93\077\uff93\100\uff93\101" +
    "\uff93\102\uff93\103\uff93\104\uff93\105\uff93\106\uff93\107\uff93" +
    "\110\uff93\111\uff93\112\uff93\113\uff93\114\uff93\115\uff93\116" +
    "\uff93\117\uff93\001\002\000\130\024\uffbd\025\uffbd\027\uffbd" +
    "\031\uffbd\032\uffbd\035\uffbd\036\uffbd\040\uffbd\041\uffbd\051" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\064\uffbd\065\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073" +
    "\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd" +
    "\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd\110" +
    "\uffbd\111\uffbd\112\uffbd\113\uffbd\114\uffbd\115\uffbd\116\uffbd" +
    "\117\uffbd\001\002\000\006\054\250\123\035\001\002\000" +
    "\130\024\uff96\025\uff96\027\uff96\031\uff96\032\uff96\035\uff96" +
    "\036\uff96\040\uff96\041\uff96\051\uff96\053\uff96\054\uff96\055" +
    "\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\067\uff96" +
    "\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075\uff96\076" +
    "\uff96\077\uff96\100\uff96\101\uff96\102\uff96\103\uff96\104\uff96" +
    "\105\uff96\106\uff96\107\uff96\110\uff96\111\uff96\112\uff96\113" +
    "\uff96\114\uff96\115\uff96\116\uff96\117\uff96\001\002\000\004" +
    "\123\244\001\002\000\004\123\035\001\002\000\004\123" +
    "\340\001\002\000\010\021\221\022\223\123\uffe7\001\002" +
    "\000\036\023\037\026\041\037\054\054\062\055\074\060" +
    "\034\062\022\071\025\120\043\121\023\122\031\123\035" +
    "\124\044\125\030\001\002\000\004\047\064\001\002\000" +
    "\006\123\035\124\065\001\002\000\142\024\uffc4\025\uffc4" +
    "\027\uffc4\031\uffc4\032\uffc4\034\uffc4\035\uffc4\036\uffc4\040" +
    "\uffc4\041\uffc4\047\uffc4\050\uffc4\051\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\057\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065" +
    "\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4" +
    "\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102" +
    "\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\110\uffc4" +
    "\111\uffc4\112\uffc4\113\uffc4\114\uffc4\115\uffc4\116\uffc4\117" +
    "\uffc4\001\002\000\132\024\uff8c\025\uff8c\027\uff8c\031\uff8c" +
    "\032\uff8c\035\uff8c\036\uff8c\040\uff8c\041\uff8c\051\uff8c\053" +
    "\uff8c\054\uff8c\055\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c" +
    "\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073" +
    "\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\101\uff8c" +
    "\102\uff8c\103\uff8c\104\uff8c\105\uff8c\106\uff8c\107\uff8c\110" +
    "\uff8c\111\uff8c\112\uff8c\113\uff8c\114\uff8c\115\uff8c\116\uff8c" +
    "\117\uff8c\001\002\000\142\024\uffc5\025\uffc5\027\uffc5\031" +
    "\uffc5\032\uffc5\034\uffc5\035\uffc5\036\uffc5\040\uffc5\041\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\053\uffc5\054\uffc5\055\uffc5\057" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5" +
    "\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075" +
    "\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5" +
    "\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112" +
    "\uffc5\113\uffc5\114\uffc5\115\uffc5\116\uffc5\117\uffc5\001\002" +
    "\000\076\040\141\054\140\063\107\064\125\065\126\067" +
    "\104\070\114\071\111\072\116\073\105\074\137\075\115" +
    "\076\132\077\124\100\135\101\131\102\133\103\117\104" +
    "\127\105\110\106\136\107\130\110\123\111\122\112\134" +
    "\113\113\114\103\115\112\116\120\117\121\001\002\000" +
    "\106\040\uffbc\047\uffc5\053\076\054\uffbc\055\100\060\077" +
    "\063\uffbc\064\uffbc\065\uffbc\067\uffbc\070\uffbc\071\uffbc\072" +
    "\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc" +
    "\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107" +
    "\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc\114\uffbc\115\uffbc" +
    "\116\uffbc\117\uffbc\001\002\000\100\040\uffbd\054\uffbd\055" +
    "\075\063\uffbd\064\uffbd\065\uffbd\067\uffbd\070\uffbd\071\uffbd" +
    "\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100" +
    "\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd" +
    "\107\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd\114\uffbd\115" +
    "\uffbd\116\uffbd\117\uffbd\001\002\000\134\024\uffc9\025\uffc9" +
    "\027\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9\036\uffc9\040" +
    "\uffc9\041\uffc9\050\uffc9\051\uffc9\053\uffc9\054\uffc9\055\uffc9" +
    "\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\067\uffc9\070" +
    "\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9" +
    "\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105" +
    "\uffc9\106\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9\113\uffc9" +
    "\114\uffc9\115\uffc9\116\uffc9\117\uffc9\001\002\000\134\024" +
    "\uffca\025\uffca\027\uffca\031\uffca\032\uffca\034\uffca\035\uffca" +
    "\036\uffca\040\uffca\041\uffca\050\uffca\051\uffca\053\uffca\054" +
    "\uffca\055\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca" +
    "\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075" +
    "\uffca\076\uffca\077\uffca\100\uffca\101\uffca\102\uffca\103\uffca" +
    "\104\uffca\105\uffca\106\uffca\107\uffca\110\uffca\111\uffca\112" +
    "\uffca\113\uffca\114\uffca\115\uffca\116\uffca\117\uffca\001\002" +
    "\000\130\024\uffb9\025\uffb9\027\uffb9\031\uffb9\032\uffb9\035" +
    "\uffb9\036\uffb9\040\uffb9\041\uffb9\051\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\067" +
    "\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9" +
    "\076\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104" +
    "\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\112\uffb9" +
    "\113\uffb9\114\uffb9\115\uffb9\116\uffb9\117\uffb9\001\002\000" +
    "\004\123\035\001\002\000\034\023\037\026\041\037\054" +
    "\054\062\060\034\062\022\071\025\120\043\121\023\122" +
    "\031\123\035\124\044\125\030\001\002\000\134\024\uffc8" +
    "\025\uffc8\027\uffc8\031\uffc8\032\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\040\uffc8\041\uffc8\050\uffc8\051\uffc8\053\uffc8\054\uffc8" +
    "\055\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\067" +
    "\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8" +
    "\076\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104" +
    "\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8" +
    "\113\uffc8\114\uffc8\115\uffc8\116\uffc8\117\uffc8\001\002\000" +
    "\100\040\141\054\140\062\102\063\107\064\125\065\126" +
    "\067\104\070\114\071\111\072\116\073\105\074\137\075" +
    "\115\076\132\077\124\100\135\101\131\102\133\103\117" +
    "\104\127\105\110\106\136\107\130\110\123\111\122\112" +
    "\134\113\113\114\103\115\112\116\120\117\121\001\002" +
    "\000\040\023\037\026\041\037\054\053\uff72\054\062\060" +
    "\034\061\uff72\062\022\071\025\120\043\121\023\122\031" +
    "\123\035\124\044\125\030\001\002\000\034\023\037\026" +
    "\041\037\054\054\062\060\034\062\022\071\025\120\043" +
    "\121\023\122\031\123\035\124\044\125\030\001\002\000" +
    "\034\023\037\026\041\037\054\054\062\060\034\062\022" +
    "\071\025\120\043\121\023\122\031\123\035\124\044\125" +
    "\030\001\002\000\034\023\037\026\041\037\054\054\062" +
    "\060\034\062\022\071\025\120\043\121\023\122\031\123" +
    "\035\124\044\125\030\001\002\000\130\024\uff9b\025\uff9b" +
    "\027\uff9b\031\uff9b\032\uff9b\035\uff9b\036\uff9b\040\uff9b\041" +
    "\uff9b\051\uff9b\053\uff9b\054\uff9b\055\uff9b\061\uff9b\062\uff9b" +
    "\063\uff9b\064\uff9b\065\uff9b\067\uff9b\070\uff9b\071\uff9b\072" +
    "\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b" +
    "\101\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107" +
    "\uff9b\110\uff9b\111\uff9b\112\uff9b\113\uff9b\114\uff9b\115\uff9b" +
    "\116\uff9b\117\uff9b\001\002\000\034\023\037\026\041\037" +
    "\054\054\062\060\034\062\022\071\025\120\043\121\023" +
    "\122\031\123\035\124\044\125\030\001\002\000\034\023" +
    "\037\026\041\037\054\054\062\060\034\062\022\071\025" +
    "\120\043\121\023\122\031\123\035\124\044\125\030\001" +
    "\002\000\034\023\037\026\041\037\054\054\062\060\034" +
    "\062\022\071\025\120\043\121\023\122\031\123\035\124" +
    "\044\125\030\001\002\000\034\023\037\026\041\037\054" +
    "\054\062\060\034\062\022\071\025\120\043\121\023\122" +
    "\031\123\035\124\044\125\030\001\002\000\034\023\037" +
    "\026\041\037\054\054\062\060\034\062\022\071\025\120" +
    "\043\121\023\122\031\123\035\124\044\125\030\001\002" +
    "\000\006\071\152\121\153\001\002\000\034\023\037\026" +
    "\041\037\054\054\062\060\034\062\022\071\025\120\043" +
    "\121\023\122\031\123\035\124\044\125\030\001\002\000" +
    "\034\023\037\026\041\037\054\054\062\060\034\062\022" +
    "\071\025\120\043\121\023\122\031\123\035\124\044\125" +
    "\030\001\002\000\130\024\uffb2\025\uffb2\027\uffb2\031\uffb2" +
    "\032\uffb2\035\uffb2\036\uffb2\040\uffb2\041\uffb2\051\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2" +
    "\065\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074" +
    "\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2" +
    "\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111" +
    "\uffb2\112\uffb2\113\uffb2\114\uffb2\115\uffb2\116\uffb2\117\uffb2" +
    "\001\002\000\034\023\037\026\041\037\054\054\062\060" +
    "\034\062\022\071\025\120\043\121\023\122\031\123\035" +
    "\124\044\125\030\001\002\000\034\023\037\026\041\037" +
    "\054\054\062\060\034\062\022\071\025\120\043\121\023" +
    "\122\031\123\035\124\044\125\030\001\002\000\034\023" +
    "\037\026\041\037\054\054\062\060\034\062\022\071\025" +
    "\120\043\121\023\122\031\123\035\124\044\125\030\001" +
    "\002\000\034\023\037\026\041\037\054\054\062\060\034" +
    "\062\022\071\025\120\043\121\023\122\031\123\035\124" +
    "\044\125\030\001\002\000\034\023\037\026\041\037\054" +
    "\054\062\060\034\062\022\071\025\120\043\121\023\122" +
    "\031\123\035\124\044\125\030\001\002\000\034\023\037" +
    "\026\041\037\054\054\062\060\034\062\022\071\025\120" +
    "\043\121\023\122\031\123\035\124\044\125\030\001\002" +
    "\000\034\023\037\026\041\037\054\054\062\060\034\062" +
    "\022\071\025\120\043\121\023\122\031\123\035\124\044" +
    "\125\030\001\002\000\130\024\uffb3\025\uffb3\027\uffb3\031" +
    "\uffb3\032\uffb3\035\uffb3\036\uffb3\040\uffb3\041\uffb3\051\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3" +
    "\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3\102" +
    "\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110\uffb3" +
    "\111\uffb3\112\uffb3\113\uffb3\114\uffb3\115\uffb3\116\uffb3\117" +
    "\uffb3\001\002\000\034\023\037\026\041\037\054\054\062" +
    "\060\034\062\022\071\025\120\043\121\023\122\031\123" +
    "\035\124\044\125\030\001\002\000\034\023\037\026\041" +
    "\037\054\054\062\060\034\062\022\071\025\120\043\121" +
    "\023\122\031\123\035\124\044\125\030\001\002\000\034" +
    "\023\037\026\041\037\054\054\062\060\034\062\022\071" +
    "\025\120\043\121\023\122\031\123\035\124\044\125\030" +
    "\001\002\000\130\024\uffb4\025\uffb4\027\uffb4\031\uffb4\032" +
    "\uffb4\035\uffb4\036\uffb4\040\uffb4\041\uffb4\051\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065" +
    "\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4" +
    "\075\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103" +
    "\uffb4\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4\111\uffb4" +
    "\112\uffb4\113\uffb4\114\uffb4\115\uffb4\116\uffb4\117\uffb4\001" +
    "\002\000\034\023\037\026\041\037\054\054\062\060\034" +
    "\062\022\071\025\120\043\121\023\122\031\123\035\124" +
    "\044\125\030\001\002\000\034\023\037\026\041\037\054" +
    "\054\062\060\034\062\022\071\025\120\043\121\023\122" +
    "\031\123\035\124\044\125\030\001\002\000\034\023\037" +
    "\026\041\037\054\054\062\060\034\062\022\071\025\120" +
    "\043\121\023\122\031\123\035\124\044\125\030\001\002" +
    "\000\006\071\152\121\153\001\002\000\036\023\037\026" +
    "\041\037\054\054\062\055\145\060\034\062\022\071\025" +
    "\120\043\121\023\122\031\123\035\124\044\125\030\001" +
    "\002\000\034\023\037\026\041\037\054\054\062\060\034" +
    "\062\022\071\025\120\043\121\023\122\031\123\035\124" +
    "\044\125\030\001\002\000\130\024\uffb6\025\uffb6\027\uffb6" +
    "\031\uffb6\032\uffb6\035\uffb6\036\uffb6\040\uffb6\041\uffb6\051" +
    "\uffb6\053\uffb6\054\140\055\uffb6\061\uffb6\062\uffb6\063\uffb6" +
    "\064\uffb6\065\uffb6\067\uffb6\070\114\071\uffb6\072\uffb6\073" +
    "\uffb6\074\137\075\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6" +
    "\102\133\103\117\104\127\105\uffb6\106\uffb6\107\uffb6\110" +
    "\uffb6\111\uffb6\112\uffb6\113\uffb6\114\uffb6\115\uffb6\116\uffb6" +
    "\117\uffb6\001\002\000\102\040\141\053\uffc1\054\140\055" +
    "\uffc1\063\107\064\125\065\126\067\104\070\114\071\111" +
    "\072\116\073\105\074\137\075\115\076\132\077\124\100" +
    "\135\101\131\102\133\103\117\104\127\105\110\106\136" +
    "\107\130\110\123\111\122\112\134\113\113\114\103\115" +
    "\112\116\120\117\121\001\002\000\006\053\146\055\147" +
    "\001\002\000\130\024\uffbf\025\uffbf\027\uffbf\031\uffbf\032" +
    "\uffbf\035\uffbf\036\uffbf\040\uffbf\041\uffbf\051\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065" +
    "\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf" +
    "\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103" +
    "\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111\uffbf" +
    "\112\uffbf\113\uffbf\114\uffbf\115\uffbf\116\uffbf\117\uffbf\001" +
    "\002\000\034\023\037\026\041\037\054\054\062\060\034" +
    "\062\022\071\025\120\043\121\023\122\031\123\035\124" +
    "\044\125\030\001\002\000\130\024\uffbe\025\uffbe\027\uffbe" +
    "\031\uffbe\032\uffbe\035\uffbe\036\uffbe\040\uffbe\041\uffbe\051" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\061\uffbe\062\uffbe\063\uffbe" +
    "\064\uffbe\065\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073" +
    "\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe" +
    "\102\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\110" +
    "\uffbe\111\uffbe\112\uffbe\113\uffbe\114\uffbe\115\uffbe\116\uffbe" +
    "\117\uffbe\001\002\000\104\040\141\053\uffc0\054\140\055" +
    "\uffc0\061\uffc0\063\107\064\125\065\126\067\104\070\114" +
    "\071\111\072\116\073\105\074\137\075\115\076\132\077" +
    "\124\100\135\101\131\102\133\103\117\104\127\105\110" +
    "\106\136\107\130\110\123\111\122\112\134\113\113\114" +
    "\103\115\112\116\120\117\121\001\002\000\130\024\uffae" +
    "\025\uffae\027\uffae\031\uffae\032\uffae\035\uffae\036\uffae\040" +
    "\uffae\041\uffae\051\uffae\053\uffae\054\uffae\055\uffae\061\uffae" +
    "\062\uffae\063\uffae\064\uffae\065\uffae\067\uffae\070\uffae\071" +
    "\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076\uffae\077\uffae" +
    "\100\uffae\101\uffae\102\uffae\103\uffae\104\uffae\105\uffae\106" +
    "\uffae\107\uffae\110\uffae\111\uffae\112\uffae\113\uffae\114\uffae" +
    "\115\uffae\116\uffae\117\uffae\001\002\000\004\121\154\001" +
    "\002\000\134\024\uffd1\025\uffd1\027\uffd1\031\uffd1\032\uffd1" +
    "\035\uffd1\036\uffd1\040\uffd1\041\uffd1\051\uffd1\053\uffd1\054" +
    "\uffd1\055\uffd1\057\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1" +
    "\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073" +
    "\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1" +
    "\102\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1\110" +
    "\uffd1\111\uffd1\112\uffd1\113\uffd1\114\uffd1\115\uffd1\116\uffd1" +
    "\117\uffd1\001\002\000\134\024\uffd0\025\uffd0\027\uffd0\031" +
    "\uffd0\032\uffd0\035\uffd0\036\uffd0\040\uffd0\041\uffd0\051\uffd0" +
    "\053\uffd0\054\uffd0\055\uffd0\057\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0" +
    "\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100" +
    "\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\106\uffd0" +
    "\107\uffd0\110\uffd0\111\uffd0\112\uffd0\113\uffd0\114\uffd0\115" +
    "\uffd0\116\uffd0\117\uffd0\001\002\000\114\024\uffa3\025\uffa3" +
    "\027\uffa3\031\uffa3\032\uffa3\035\uffa3\036\uffa3\040\141\041" +
    "\uffa3\051\uffa3\053\uffa3\054\140\055\uffa3\061\uffa3\062\uffa3" +
    "\063\107\064\125\065\126\067\104\070\114\071\111\072" +
    "\116\073\105\074\137\075\115\076\132\077\124\100\135" +
    "\101\131\102\133\103\117\104\127\107\uffa3\114\uffa3\115" +
    "\uffa3\116\uffa3\117\uffa3\001\002\000\130\024\uffa7\025\uffa7" +
    "\027\uffa7\031\uffa7\032\uffa7\035\uffa7\036\uffa7\040\141\041" +
    "\uffa7\051\uffa7\053\uffa7\054\140\055\uffa7\061\uffa7\062\uffa7" +
    "\063\uffa7\064\uffa7\065\uffa7\067\uffa7\070\114\071\uffa7\072" +
    "\uffa7\073\uffa7\074\137\075\uffa7\076\uffa7\077\uffa7\100\uffa7" +
    "\101\uffa7\102\133\103\117\104\127\105\uffa7\106\uffa7\107" +
    "\uffa7\110\uffa7\111\uffa7\112\uffa7\113\uffa7\114\uffa7\115\uffa7" +
    "\116\uffa7\117\uffa7\001\002\000\114\024\uffa5\025\uffa5\027" +
    "\uffa5\031\uffa5\032\uffa5\035\uffa5\036\uffa5\040\141\041\uffa5" +
    "\051\uffa5\053\uffa5\054\140\055\uffa5\061\uffa5\062\uffa5\063" +
    "\107\064\125\065\126\067\104\070\114\071\111\072\116" +
    "\073\105\074\137\075\115\076\132\077\124\100\135\101" +
    "\131\102\133\103\117\104\127\107\uffa5\114\uffa5\115\uffa5" +
    "\116\uffa5\117\uffa5\001\002\000\130\024\uffa6\025\uffa6\027" +
    "\uffa6\031\uffa6\032\uffa6\035\uffa6\036\uffa6\040\141\041\uffa6" +
    "\051\uffa6\053\uffa6\054\140\055\uffa6\061\uffa6\062\uffa6\063" +
    "\uffa6\064\uffa6\065\uffa6\067\uffa6\070\114\071\uffa6\072\uffa6" +
    "\073\uffa6\074\137\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101" +
    "\uffa6\102\133\103\117\104\127\105\uffa6\106\uffa6\107\uffa6" +
    "\110\uffa6\111\uffa6\112\uffa6\113\uffa6\114\uffa6\115\uffa6\116" +
    "\uffa6\117\uffa6\001\002\000\130\024\uffa9\025\uffa9\027\uffa9" +
    "\031\uffa9\032\uffa9\035\uffa9\036\uffa9\040\141\041\uffa9\051" +
    "\uffa9\053\uffa9\054\140\055\uffa9\061\uffa9\062\uffa9\063\uffa9" +
    "\064\uffa9\065\uffa9\067\uffa9\070\114\071\uffa9\072\uffa9\073" +
    "\uffa9\074\137\075\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9" +
    "\102\133\103\117\104\127\105\uffa9\106\uffa9\107\uffa9\110" +
    "\uffa9\111\uffa9\112\uffa9\113\uffa9\114\uffa9\115\uffa9\116\uffa9" +
    "\117\uffa9\001\002\000\122\024\uff9e\025\uff9e\027\uff9e\031" +
    "\uff9e\032\uff9e\035\uff9e\036\uff9e\040\141\041\uff9e\051\uff9e" +
    "\053\uff9e\054\140\055\uff9e\061\uff9e\062\uff9e\063\107\064" +
    "\125\065\126\067\104\070\114\071\111\072\116\073\105" +
    "\074\137\075\115\076\132\077\124\100\135\101\131\102" +
    "\133\103\117\104\127\105\110\106\136\110\123\111\122" +
    "\112\134\113\113\114\103\115\112\001\002\000\130\024" +
    "\uffad\025\uffad\027\uffad\031\uffad\032\uffad\035\uffad\036\uffad" +
    "\040\141\041\uffad\051\uffad\053\uffad\054\140\055\uffad\061" +
    "\uffad\062\uffad\063\uffad\064\uffad\065\uffad\067\uffad\070\114" +
    "\071\uffad\072\uffad\073\uffad\074\137\075\uffad\076\uffad\077" +
    "\uffad\100\uffad\101\uffad\102\133\103\117\104\127\105\uffad" +
    "\106\uffad\107\uffad\110\uffad\111\uffad\112\uffad\113\uffad\114" +
    "\uffad\115\uffad\116\uffad\117\uffad\001\002\000\130\024\uffb1" +
    "\025\uffb1\027\uffb1\031\uffb1\032\uffb1\035\uffb1\036\uffb1\040" +
    "\141\041\uffb1\051\uffb1\053\uffb1\054\140\055\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\065\uffb1\067\uffb1\070\114\071" +
    "\uffb1\072\uffb1\073\uffb1\074\137\075\uffb1\076\uffb1\077\uffb1" +
    "\100\uffb1\101\uffb1\102\133\103\117\104\127\105\uffb1\106" +
    "\uffb1\107\uffb1\110\uffb1\111\uffb1\112\uffb1\113\uffb1\114\uffb1" +
    "\115\uffb1\116\uffb1\117\uffb1\001\002\000\130\024\uffa8\025" +
    "\uffa8\027\uffa8\031\uffa8\032\uffa8\035\uffa8\036\uffa8\040\141" +
    "\041\uffa8\051\uffa8\053\uffa8\054\140\055\uffa8\061\uffa8\062" +
    "\uffa8\063\uffa8\064\uffa8\065\uffa8\067\uffa8\070\114\071\uffa8" +
    "\072\uffa8\073\uffa8\074\137\075\uffa8\076\uffa8\077\uffa8\100" +
    "\uffa8\101\uffa8\102\133\103\117\104\127\105\uffa8\106\uffa8" +
    "\107\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\114\uffa8\115" +
    "\uffa8\116\uffa8\117\uffa8\001\002\000\114\024\uffa2\025\uffa2" +
    "\027\uffa2\031\uffa2\032\uffa2\035\uffa2\036\uffa2\040\141\041" +
    "\uffa2\051\uffa2\053\uffa2\054\140\055\uffa2\061\uffa2\062\uffa2" +
    "\063\107\064\125\065\126\067\104\070\114\071\111\072" +
    "\116\073\105\074\137\075\115\076\132\077\124\100\135" +
    "\101\131\102\133\103\117\104\127\107\uffa2\114\uffa2\115" +
    "\uffa2\116\uffa2\117\uffa2\001\002\000\114\024\uffa1\025\uffa1" +
    "\027\uffa1\031\uffa1\032\uffa1\035\uffa1\036\uffa1\040\141\041" +
    "\uffa1\051\uffa1\053\uffa1\054\140\055\uffa1\061\uffa1\062\uffa1" +
    "\063\107\064\125\065\126\067\104\070\114\071\111\072" +
    "\116\073\105\074\137\075\115\076\132\077\124\100\135" +
    "\101\131\102\133\103\117\104\127\107\uffa1\114\uffa1\115" +
    "\uffa1\116\uffa1\117\uffa1\001\002\000\122\024\uffa0\025\uffa0" +
    "\027\uffa0\031\uffa0\032\uffa0\035\uffa0\036\uffa0\040\141\041" +
    "\uffa0\051\uffa0\053\uffa0\054\140\055\uffa0\061\uffa0\062\uffa0" +
    "\063\107\064\125\065\126\067\104\070\114\071\111\072" +
    "\116\073\105\074\137\075\115\076\132\077\124\100\135" +
    "\101\131\102\133\103\117\104\127\105\110\106\136\110" +
    "\123\111\122\112\134\113\113\114\103\115\112\001\002" +
    "\000\122\024\uff9f\025\uff9f\027\uff9f\031\uff9f\032\uff9f\035" +
    "\uff9f\036\uff9f\040\141\041\uff9f\051\uff9f\053\uff9f\054\140" +
    "\055\uff9f\061\uff9f\062\uff9f\063\107\064\125\065\126\067" +
    "\104\070\114\071\111\072\116\073\105\074\137\075\115" +
    "\076\132\077\124\100\135\101\131\102\133\103\117\104" +
    "\127\105\110\106\136\110\123\111\122\112\134\113\113" +
    "\114\103\115\112\001\002\000\130\024\uffab\025\uffab\027" +
    "\uffab\031\uffab\032\uffab\035\uffab\036\uffab\040\141\041\uffab" +
    "\051\uffab\053\uffab\054\140\055\uffab\061\uffab\062\uffab\063" +
    "\uffab\064\uffab\065\uffab\067\uffab\070\114\071\uffab\072\uffab" +
    "\073\uffab\074\137\075\uffab\076\uffab\077\uffab\100\uffab\101" +
    "\uffab\102\133\103\117\104\127\105\uffab\106\uffab\107\uffab" +
    "\110\uffab\111\uffab\112\uffab\113\uffab\114\uffab\115\uffab\116" +
    "\uffab\117\uffab\001\002\000\130\024\uffaa\025\uffaa\027\uffaa" +
    "\031\uffaa\032\uffaa\035\uffaa\036\uffaa\040\141\041\uffaa\051" +
    "\uffaa\053\uffaa\054\140\055\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\065\uffaa\067\uffaa\070\114\071\uffaa\072\uffaa\073" +
    "\uffaa\074\137\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa" +
    "\102\133\103\117\104\127\105\uffaa\106\uffaa\107\uffaa\110" +
    "\uffaa\111\uffaa\112\uffaa\113\uffaa\114\uffaa\115\uffaa\116\uffaa" +
    "\117\uffaa\001\002\000\130\024\uffb7\025\uffb7\027\uffb7\031" +
    "\uffb7\032\uffb7\035\uffb7\036\uffb7\040\uffb7\041\uffb7\051\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\061\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\065\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7" +
    "\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102" +
    "\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7" +
    "\111\uffb7\112\uffb7\113\uffb7\114\uffb7\115\uffb7\116\uffb7\117" +
    "\uffb7\001\002\000\114\024\uffa4\025\uffa4\027\uffa4\031\uffa4" +
    "\032\uffa4\035\uffa4\036\uffa4\040\141\041\uffa4\051\uffa4\053" +
    "\uffa4\054\140\055\uffa4\061\uffa4\062\uffa4\063\107\064\125" +
    "\065\126\067\104\070\114\071\111\072\116\073\105\074" +
    "\137\075\115\076\132\077\124\100\135\101\131\102\133" +
    "\103\117\104\127\107\uffa4\114\uffa4\115\uffa4\116\uffa4\117" +
    "\uffa4\001\002\000\130\024\uff9c\025\uff9c\027\uff9c\031\uff9c" +
    "\032\uff9c\035\uff9c\036\uff9c\040\141\041\uff9c\051\uff9c\053" +
    "\uff9c\054\140\055\uff9c\061\uff9c\062\uff9c\063\107\064\125" +
    "\065\126\067\104\070\114\071\111\072\116\073\105\074" +
    "\137\075\115\076\132\077\124\100\135\101\131\102\133" +
    "\103\117\104\127\105\110\106\136\107\uff9c\110\123\111" +
    "\122\112\134\113\113\114\uff9c\115\uff9c\116\uff9c\117\uff9c" +
    "\001\002\000\130\024\uffb8\025\uffb8\027\uffb8\031\uffb8\032" +
    "\uffb8\035\uffb8\036\uffb8\040\141\041\uffb8\051\uffb8\053\uffb8" +
    "\054\140\055\uffb8\061\uffb8\062\uffb8\063\uffb8\064\125\065" +
    "\126\067\104\070\114\071\uffb8\072\116\073\105\074\137" +
    "\075\115\076\132\077\124\100\135\101\131\102\133\103" +
    "\117\104\127\105\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8" +
    "\112\uffb8\113\uffb8\114\uffb8\115\uffb8\116\uffb8\117\uffb8\001" +
    "\002\000\114\024\uffb5\025\uffb5\027\uffb5\031\uffb5\032\uffb5" +
    "\035\uffb5\036\uffb5\040\141\041\uffb5\051\uffb5\053\uffb5\054" +
    "\140\055\uffb5\061\uffb5\062\uffb5\063\107\064\125\065\126" +
    "\067\104\070\114\071\111\072\116\073\105\074\137\075" +
    "\115\076\132\077\124\100\135\101\131\102\133\103\117" +
    "\104\127\107\uffb5\114\uffb5\115\uffb5\116\uffb5\117\uffb5\001" +
    "\002\000\130\024\uffb0\025\uffb0\027\uffb0\031\uffb0\032\uffb0" +
    "\035\uffb0\036\uffb0\040\141\041\uffb0\051\uffb0\053\uffb0\054" +
    "\140\055\uffb0\061\uffb0\062\uffb0\063\uffb0\064\125\065\126" +
    "\067\104\070\114\071\uffb0\072\116\073\105\074\137\075" +
    "\115\076\132\077\124\100\135\101\131\102\133\103\117" +
    "\104\127\105\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112" +
    "\uffb0\113\uffb0\114\uffb0\115\uffb0\116\uffb0\117\uffb0\001\002" +
    "\000\130\024\uffac\025\uffac\027\uffac\031\uffac\032\uffac\035" +
    "\uffac\036\uffac\040\141\041\uffac\051\uffac\053\uffac\054\140" +
    "\055\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\067" +
    "\uffac\070\114\071\uffac\072\uffac\073\uffac\074\137\075\uffac" +
    "\076\uffac\077\uffac\100\uffac\101\uffac\102\133\103\117\104" +
    "\127\105\uffac\106\uffac\107\uffac\110\uffac\111\uffac\112\uffac" +
    "\113\uffac\114\uffac\115\uffac\116\uffac\117\uffac\001\002\000" +
    "\130\024\uffaf\025\uffaf\027\uffaf\031\uffaf\032\uffaf\035\uffaf" +
    "\036\uffaf\040\141\041\uffaf\051\uffaf\053\uffaf\054\140\055" +
    "\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\067\uffaf" +
    "\070\114\071\uffaf\072\uffaf\073\uffaf\074\137\075\uffaf\076" +
    "\uffaf\077\uffaf\100\uffaf\101\uffaf\102\133\103\117\104\127" +
    "\105\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112\uffaf\113" +
    "\uffaf\114\uffaf\115\uffaf\116\uffaf\117\uffaf\001\002\000\130" +
    "\024\uff9d\025\uff9d\027\uff9d\031\uff9d\032\uff9d\035\uff9d\036" +
    "\uff9d\040\141\041\uff9d\051\uff9d\053\uff9d\054\140\055\uff9d" +
    "\061\uff9d\062\uff9d\063\107\064\125\065\126\067\104\070" +
    "\114\071\111\072\116\073\105\074\137\075\115\076\132" +
    "\077\124\100\135\101\131\102\133\103\117\104\127\105" +
    "\110\106\136\107\uff9d\110\123\111\122\112\134\113\113" +
    "\114\uff9d\115\uff9d\116\uff9d\117\uff9d\001\002\000\106\032" +
    "\214\035\213\040\141\053\uff71\054\140\061\uff71\063\107" +
    "\064\125\065\126\067\104\070\114\071\111\072\116\073" +
    "\105\074\137\075\115\076\132\077\124\100\135\101\131" +
    "\102\133\103\117\104\127\105\110\106\136\107\130\110" +
    "\123\111\122\112\134\113\113\114\103\115\112\116\120" +
    "\117\121\001\002\000\006\053\211\061\210\001\002\000" +
    "\006\053\uff74\061\uff74\001\002\000\130\024\uff75\025\uff75" +
    "\027\uff75\031\uff75\032\uff75\035\uff75\036\uff75\040\uff75\041" +
    "\uff75\051\uff75\053\uff75\054\uff75\055\uff75\061\uff75\062\uff75" +
    "\063\uff75\064\uff75\065\uff75\067\uff75\070\uff75\071\uff75\072" +
    "\uff75\073\uff75\074\uff75\075\uff75\076\uff75\077\uff75\100\uff75" +
    "\101\uff75\102\uff75\103\uff75\104\uff75\105\uff75\106\uff75\107" +
    "\uff75\110\uff75\111\uff75\112\uff75\113\uff75\114\uff75\115\uff75" +
    "\116\uff75\117\uff75\001\002\000\040\023\037\026\041\037" +
    "\054\053\uff72\054\062\060\034\061\uff72\062\022\071\025" +
    "\120\043\121\023\122\031\123\035\124\044\125\030\001" +
    "\002\000\006\053\uff73\061\uff73\001\002\000\034\023\037" +
    "\026\041\037\054\054\062\060\034\062\022\071\025\120" +
    "\043\121\023\122\031\123\035\124\044\125\030\001\002" +
    "\000\034\023\037\026\041\037\054\054\062\060\034\062" +
    "\022\071\025\120\043\121\023\122\031\123\035\124\044" +
    "\125\030\001\002\000\102\040\141\053\uff6f\054\140\061" +
    "\uff6f\063\107\064\125\065\126\067\104\070\114\071\111" +
    "\072\116\073\105\074\137\075\115\076\132\077\124\100" +
    "\135\101\131\102\133\103\117\104\127\105\110\106\136" +
    "\107\130\110\123\111\122\112\134\113\113\114\103\115" +
    "\112\116\120\117\121\001\002\000\102\040\141\053\uff70" +
    "\054\140\061\uff70\063\107\064\125\065\126\067\104\070" +
    "\114\071\111\072\116\073\105\074\137\075\115\076\132" +
    "\077\124\100\135\101\131\102\133\103\117\104\127\105" +
    "\110\106\136\107\130\110\123\111\122\112\134\113\113" +
    "\114\103\115\112\116\120\117\121\001\002\000\134\024" +
    "\uffc7\025\uffc7\027\uffc7\031\uffc7\032\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\040\uffc7\041\uffc7\050\uffc7\051\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7" +
    "\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075" +
    "\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7" +
    "\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\112" +
    "\uffc7\113\uffc7\114\uffc7\115\uffc7\116\uffc7\117\uffc7\001\002" +
    "\000\006\053\076\055\100\001\002\000\004\123\uffe9\001" +
    "\002\000\004\123\035\001\002\000\004\123\uffe8\001\002" +
    "\000\006\052\227\053\226\001\002\000\012\050\uffcc\052" +
    "\uffcc\053\uffcc\126\uffcc\001\002\000\004\123\035\001\002" +
    "\000\020\043\231\044\232\045\233\046\235\054\uff69\121" +
    "\uff69\123\uff69\001\002\000\004\051\ufff8\001\002\000\004" +
    "\123\035\001\002\000\004\123\035\001\002\000\004\123" +
    "\035\001\002\000\010\054\256\121\261\123\244\001\002" +
    "\000\004\123\035\001\002\000\010\050\uff67\053\226\126" +
    "\237\001\002\000\004\123\244\001\002\000\004\050\241" +
    "\001\002\000\020\043\231\044\232\045\233\046\235\054" +
    "\uff69\121\uff69\123\uff69\001\002\000\010\054\uff6a\121\uff6a" +
    "\123\uff6a\001\002\000\004\054\250\001\002\000\036\033" +
    "\uffc6\034\uffc6\040\uffc6\050\uffc6\051\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\062\uffc6\064\uffc6\065\uffc6\066\uffc6\070\uffc6\105" +
    "\uffc6\001\002\000\006\050\uff68\114\246\001\002\000\004" +
    "\123\244\001\002\000\004\054\250\001\002\000\006\055" +
    "\074\123\035\001\002\000\006\050\uff66\114\uff66\001\002" +
    "\000\006\050\uff65\114\uff65\001\002\000\026\040\305\051" +
    "\uff58\053\uff58\055\uff58\062\uff58\064\302\065\303\066\301" +
    "\070\304\105\uff58\001\002\000\034\033\273\034\272\040" +
    "\uff52\050\274\051\uff52\053\uff52\054\256\055\uff52\064\uff52" +
    "\065\uff52\066\uff52\070\uff52\105\uff52\001\002\000\010\051" +
    "\uff6e\053\uff6e\105\uff6e\001\002\000\012\054\256\055\266" +
    "\121\261\123\244\001\002\000\012\051\uff59\053\uff59\055" +
    "\uff59\105\uff59\001\002\000\004\034\262\001\002\000\026" +
    "\040\uff4e\051\uff4e\053\uff4e\055\uff4e\062\uff4e\064\uff4e\065" +
    "\uff4e\066\uff4e\070\uff4e\105\uff4e\001\002\000\010\054\256" +
    "\121\261\123\244\001\002\000\012\051\uff5c\053\uff5c\055" +
    "\uff5c\105\uff5c\001\002\000\006\053\267\055\270\001\002" +
    "\000\006\053\uff60\055\uff60\001\002\000\026\034\uff5e\043" +
    "\uff5e\044\uff5e\045\uff5e\046\uff5e\051\uff5e\053\uff5e\055\uff5e" +
    "\105\uff5e\123\uff5e\001\002\000\010\054\256\121\261\123" +
    "\244\001\002\000\026\034\uff5d\043\uff5d\044\uff5d\045\uff5d" +
    "\046\uff5d\051\uff5d\053\uff5d\055\uff5d\105\uff5d\123\uff5d\001" +
    "\002\000\006\053\uff5f\055\uff5f\001\002\000\010\054\256" +
    "\121\261\123\244\001\002\000\030\040\uff50\051\uff50\053" +
    "\uff50\055\uff50\062\uff50\064\uff50\065\uff50\066\uff50\070\uff50" +
    "\105\uff50\123\244\001\002\000\004\123\244\001\002\000" +
    "\012\051\uff5a\053\uff5a\055\uff5a\105\uff5a\001\002\000\026" +
    "\040\uff51\051\uff51\053\uff51\055\uff51\062\uff51\064\uff51\065" +
    "\uff51\066\uff51\070\uff51\105\uff51\001\002\000\026\040\uff4f" +
    "\051\uff4f\053\uff4f\055\uff4f\062\uff4f\064\uff4f\065\uff4f\066" +
    "\uff4f\070\uff4f\105\uff4f\001\002\000\012\051\uff5b\053\uff5b" +
    "\055\uff5b\105\uff5b\001\002\000\006\121\261\123\244\001" +
    "\002\000\006\121\261\123\244\001\002\000\006\121\261" +
    "\123\244\001\002\000\006\071\152\121\153\001\002\000" +
    "\006\121\261\123\244\001\002\000\024\051\uff57\053\uff57" +
    "\055\uff57\062\uff57\064\302\065\303\066\301\070\304\105" +
    "\uff57\001\002\000\032\033\273\040\uff52\050\274\051\uff52" +
    "\053\uff52\055\uff52\062\uff52\064\uff52\065\uff52\066\uff52\070" +
    "\uff52\105\uff52\001\002\000\026\040\uff54\051\uff54\053\uff54" +
    "\055\uff54\062\uff54\064\uff54\065\uff54\066\uff54\070\uff54\105" +
    "\uff54\001\002\000\026\040\uff55\051\uff55\053\uff55\055\uff55" +
    "\062\uff55\064\uff55\065\uff55\066\uff55\070\304\105\uff55\001" +
    "\002\000\026\040\uff56\051\uff56\053\uff56\055\uff56\062\uff56" +
    "\064\uff56\065\uff56\066\uff56\070\304\105\uff56\001\002\000" +
    "\026\040\uff53\051\uff53\053\uff53\055\uff53\062\uff53\064\302" +
    "\065\303\066\uff53\070\304\105\uff53\001\002\000\010\050" +
    "\uff67\053\226\126\237\001\002\000\004\050\316\001\002" +
    "\000\020\043\231\044\232\045\233\046\235\054\uff69\121" +
    "\uff69\123\uff69\001\002\000\010\054\uff6c\121\uff6c\123\uff6c" +
    "\001\002\000\010\050\uff64\053\uff64\126\uff64\001\002\000" +
    "\010\050\uff67\053\325\126\237\001\002\000\012\033\323" +
    "\050\uff62\053\uff62\126\uff62\001\002\000\004\123\035\001" +
    "\002\000\010\050\uff61\053\uff61\126\uff61\001\002\000\004" +
    "\123\035\001\002\000\004\050\327\001\002\000\020\043" +
    "\231\044\232\045\233\046\235\054\uff69\121\uff69\123\uff69" +
    "\001\002\000\010\054\uff6b\121\uff6b\123\uff6b\001\002\000" +
    "\010\050\uff63\053\uff63\126\uff63\001\002\000\010\050\uff67" +
    "\053\226\126\237\001\002\000\004\050\334\001\002\000" +
    "\020\043\231\044\232\045\233\046\235\054\uff69\121\uff69" +
    "\123\uff69\001\002\000\010\054\uff6d\121\uff6d\123\uff6d\001" +
    "\002\000\012\050\uffcb\052\uffcb\053\uffcb\126\uffcb\001\002" +
    "\000\004\033\364\001\002\000\006\033\uffc6\124\uffcd\001" +
    "\002\000\004\124\342\001\002\000\006\051\ufff1\105\343" +
    "\001\002\000\012\054\346\121\023\122\031\123\035\001" +
    "\002\000\022\050\362\051\uff48\053\uff48\055\uff48\057\uff48" +
    "\064\uff48\065\uff48\070\uff48\001\002\000\020\051\uff46\053" +
    "\uff46\055\uff46\057\uff46\064\uff46\065\uff46\070\uff46\001\002" +
    "\000\012\054\346\121\023\122\031\123\035\001\002\000" +
    "\016\051\uff4d\053\uff4d\057\uff4d\064\uff4d\065\uff4d\070\uff4d" +
    "\001\002\000\004\051\ufff0\001\002\000\012\051\uff45\064" +
    "\352\065\353\070\354\001\002\000\012\054\346\121\023" +
    "\122\031\123\035\001\002\000\012\054\346\121\023\122" +
    "\031\123\035\001\002\000\006\071\152\121\153\001\002" +
    "\000\016\051\uff4a\053\uff4a\057\uff4a\064\uff4a\065\uff4a\070" +
    "\uff4a\001\002\000\016\051\uff4b\053\uff4b\057\uff4b\064\uff4b" +
    "\065\uff4b\070\354\001\002\000\016\051\uff4c\053\uff4c\057" +
    "\uff4c\064\uff4c\065\uff4c\070\354\001\002\000\004\055\361" +
    "\001\002\000\020\051\uff49\053\uff49\055\uff49\057\uff49\064" +
    "\uff49\065\uff49\070\uff49\001\002\000\004\123\035\001\002" +
    "\000\020\051\uff47\053\uff47\055\uff47\057\uff47\064\uff47\065" +
    "\uff47\070\uff47\001\002\000\004\123\244\001\002\000\004" +
    "\105\366\001\002\000\004\056\367\001\002\000\010\057" +
    "\373\123\035\124\065\001\002\000\004\051\ufff2\001\002" +
    "\000\006\053\376\057\377\001\002\000\004\050\374\001" +
    "\002\000\004\051\uffd7\001\002\000\012\054\346\121\023" +
    "\122\031\123\035\001\002\000\014\053\uffd5\057\uffd5\064" +
    "\352\065\353\070\354\001\002\000\006\123\035\124\065" +
    "\001\002\000\004\051\uffd6\001\002\000\004\050\u0101\001" +
    "\002\000\012\054\346\121\023\122\031\123\035\001\002" +
    "\000\014\053\uffd4\057\uffd4\064\352\065\353\070\354\001" +
    "\002\000\004\052\u0104\001\002\000\010\054\256\121\261" +
    "\123\244\001\002\000\004\105\u0106\001\002\000\004\056" +
    "\u0107\001\002\000\010\057\u010b\123\035\124\065\001\002" +
    "\000\004\051\uffef\001\002\000\006\053\u0114\057\u0115\001" +
    "\002\000\010\034\uffc3\053\uffc3\057\uffc3\001\002\000\004" +
    "\051\uffdb\001\002\000\006\034\u010e\053\u010d\001\002\000" +
    "\006\123\035\124\065\001\002\000\010\071\u0111\121\023" +
    "\122\031\001\002\000\006\053\uffd3\057\uffd3\001\002\000" +
    "\006\053\uffd9\057\uffd9\001\002\000\006\121\023\122\031" +
    "\001\002\000\006\053\uffd2\057\uffd2\001\002\000\010\034" +
    "\uffc2\053\uffc2\057\uffc2\001\002\000\006\123\035\124\065" +
    "\001\002\000\004\051\uffda\001\002\000\006\034\u0117\053" +
    "\u010d\001\002\000\010\071\u0111\121\023\122\031\001\002" +
    "\000\006\053\uffd8\057\uffd8\001\002\000\004\054\256\001" +
    "\002\000\014\043\231\044\232\045\233\046\235\123\uff69" +
    "\001\002\000\004\123\035\001\002\000\006\051\uffe3\053" +
    "\uffe3\001\002\000\006\051\uffea\053\u0124\001\002\000\006" +
    "\054\250\105\u011f\001\002\000\034\023\037\026\041\037" +
    "\054\054\062\060\034\062\022\071\025\120\043\121\023" +
    "\122\031\123\035\124\044\125\030\001\002\000\004\105" +
    "\u0121\001\002\000\034\023\037\026\041\037\054\054\062" +
    "\060\034\062\022\071\025\120\043\121\023\122\031\123" +
    "\035\124\044\125\030\001\002\000\102\040\141\051\uffe0" +
    "\053\uffe0\054\140\063\107\064\125\065\126\067\104\070" +
    "\114\071\111\072\116\073\105\074\137\075\115\076\132" +
    "\077\124\100\135\101\131\102\133\103\117\104\127\105" +
    "\110\106\136\107\130\110\123\111\122\112\134\113\113" +
    "\114\103\115\112\116\120\117\121\001\002\000\102\040" +
    "\141\051\uffe1\053\uffe1\054\140\063\107\064\125\065\126" +
    "\067\104\070\114\071\111\072\116\073\105\074\137\075" +
    "\115\076\132\077\124\100\135\101\131\102\133\103\117" +
    "\104\127\105\110\106\136\107\130\110\123\111\122\112" +
    "\134\113\113\114\103\115\112\116\120\117\121\001\002" +
    "\000\004\123\035\001\002\000\006\051\uffe4\053\uffe4\001" +
    "\002\000\130\024\uff98\025\uff98\027\uff98\031\uff98\032\uff98" +
    "\035\uff98\036\uff98\040\uff98\041\uff98\051\uff98\053\uff98\054" +
    "\uff98\055\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98" +
    "\067\uff98\070\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075" +
    "\uff98\076\uff98\077\uff98\100\uff98\101\uff98\102\uff98\103\uff98" +
    "\104\uff98\105\uff98\106\uff98\107\uff98\110\uff98\111\uff98\112" +
    "\uff98\113\uff98\114\uff98\115\uff98\116\uff98\117\uff98\001\002" +
    "\000\004\105\u0135\001\002\000\006\054\250\105\u0129\001" +
    "\002\000\034\023\037\026\041\037\054\054\062\060\034" +
    "\062\022\071\025\120\043\121\023\122\031\123\035\124" +
    "\044\125\030\001\002\000\004\105\u012b\001\002\000\034" +
    "\023\037\026\041\037\054\054\062\060\034\062\022\071" +
    "\025\120\043\121\023\122\031\123\035\124\044\125\030" +
    "\001\002\000\102\036\u012d\040\141\053\u012e\054\140\063" +
    "\107\064\125\065\126\067\104\070\114\071\111\072\116" +
    "\073\105\074\137\075\115\076\132\077\124\100\135\101" +
    "\131\102\133\103\117\104\127\105\110\106\136\107\130" +
    "\110\123\111\122\112\134\113\113\114\103\115\112\116" +
    "\120\117\121\001\002\000\034\023\037\026\041\037\054" +
    "\054\062\060\034\062\022\071\025\120\043\121\023\122" +
    "\031\123\035\124\044\125\030\001\002\000\006\054\250" +
    "\123\035\001\002\000\130\024\uff88\025\uff88\027\uff88\031" +
    "\uff88\032\uff88\035\uff88\036\uff88\040\uff88\041\uff88\051\uff88" +
    "\053\uff88\054\uff88\055\uff88\061\uff88\062\uff88\063\uff88\064" +
    "\uff88\065\uff88\067\uff88\070\uff88\071\uff88\072\uff88\073\uff88" +
    "\074\uff88\075\uff88\076\uff88\077\uff88\100\uff88\101\uff88\102" +
    "\uff88\103\uff88\104\uff88\105\uff88\106\uff88\107\uff88\110\uff88" +
    "\111\uff88\112\uff88\113\uff88\114\uff88\115\uff88\116\uff88\117" +
    "\uff88\001\002\000\130\024\uff86\025\uff86\027\uff86\031\uff86" +
    "\032\uff86\035\uff86\036\uff86\040\uff86\041\uff86\051\uff86\053" +
    "\uff86\054\uff86\055\uff86\061\uff86\062\uff86\063\uff86\064\uff86" +
    "\065\uff86\067\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074" +
    "\uff86\075\uff86\076\uff86\077\uff86\100\uff86\101\uff86\102\uff86" +
    "\103\uff86\104\uff86\105\uff86\106\uff86\107\uff86\110\uff86\111" +
    "\uff86\112\uff86\113\uff86\114\uff86\115\uff86\116\uff86\117\uff86" +
    "\001\002\000\100\027\u0132\040\141\054\140\063\107\064" +
    "\125\065\126\067\104\070\114\071\111\072\116\073\105" +
    "\074\137\075\115\076\132\077\124\100\135\101\131\102" +
    "\133\103\117\104\127\105\110\106\136\107\130\110\123" +
    "\111\122\112\134\113\113\114\103\115\112\116\120\117" +
    "\121\001\002\000\130\024\uff87\025\uff87\027\uff87\031\uff87" +
    "\032\uff87\035\uff87\036\uff87\040\uff87\041\uff87\051\uff87\053" +
    "\uff87\054\uff87\055\uff87\061\uff87\062\uff87\063\uff87\064\uff87" +
    "\065\uff87\067\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074" +
    "\uff87\075\uff87\076\uff87\077\uff87\100\uff87\101\uff87\102\uff87" +
    "\103\uff87\104\uff87\105\uff87\106\uff87\107\uff87\110\uff87\111" +
    "\uff87\112\uff87\113\uff87\114\uff87\115\uff87\116\uff87\117\uff87" +
    "\001\002\000\102\036\u012d\040\141\053\u012e\054\140\063" +
    "\107\064\125\065\126\067\104\070\114\071\111\072\116" +
    "\073\105\074\137\075\115\076\132\077\124\100\135\101" +
    "\131\102\133\103\117\104\127\105\110\106\136\107\130" +
    "\110\123\111\122\112\134\113\113\114\103\115\112\116" +
    "\120\117\121\001\002\000\130\024\uff8a\025\uff8a\027\uff8a" +
    "\031\uff8a\032\uff8a\035\uff8a\036\uff8a\040\uff8a\041\uff8a\051" +
    "\uff8a\053\uff8a\054\uff8a\055\uff8a\061\uff8a\062\uff8a\063\uff8a" +
    "\064\uff8a\065\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073" +
    "\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a\100\uff8a\101\uff8a" +
    "\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106\uff8a\107\uff8a\110" +
    "\uff8a\111\uff8a\112\uff8a\113\uff8a\114\uff8a\115\uff8a\116\uff8a" +
    "\117\uff8a\001\002\000\034\023\037\026\041\037\054\054" +
    "\062\060\034\062\022\071\025\120\043\121\023\122\031" +
    "\123\035\124\044\125\030\001\002\000\102\036\u012d\040" +
    "\141\053\u012e\054\140\063\107\064\125\065\126\067\104" +
    "\070\114\071\111\072\116\073\105\074\137\075\115\076" +
    "\132\077\124\100\135\101\131\102\133\103\117\104\127" +
    "\105\110\106\136\107\130\110\123\111\122\112\134\113" +
    "\113\114\103\115\112\116\120\117\121\001\002\000\130" +
    "\024\uff89\025\uff89\027\uff89\031\uff89\032\uff89\035\uff89\036" +
    "\uff89\040\uff89\041\uff89\051\uff89\053\uff89\054\uff89\055\uff89" +
    "\061\uff89\062\uff89\063\uff89\064\uff89\065\uff89\067\uff89\070" +
    "\uff89\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89" +
    "\077\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105" +
    "\uff89\106\uff89\107\uff89\110\uff89\111\uff89\112\uff89\113\uff89" +
    "\114\uff89\115\uff89\116\uff89\117\uff89\001\002\000\006\123" +
    "\035\124\065\001\002\000\004\047\u013a\001\002\000\006" +
    "\123\035\124\065\001\002\000\132\024\uff8b\025\uff8b\027" +
    "\uff8b\031\uff8b\032\uff8b\035\uff8b\036\uff8b\040\uff8b\041\uff8b" +
    "\051\uff8b\053\uff8b\054\uff8b\055\uff8b\061\uff8b\062\uff8b\063" +
    "\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b" +
    "\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\100" +
    "\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b" +
    "\107\uff8b\110\uff8b\111\uff8b\112\uff8b\113\uff8b\114\uff8b\115" +
    "\uff8b\116\uff8b\117\uff8b\001\002\000\004\105\u013d\001\002" +
    "\000\012\054\346\121\023\122\031\123\035\001\002\000" +
    "\012\051\ufff3\064\352\065\353\070\354\001\002\000\004" +
    "\105\u0140\001\002\000\010\054\256\121\261\123\244\001" +
    "\002\000\004\051\ufff4\001\002\000\004\054\256\001\002" +
    "\000\014\043\231\044\232\045\233\046\235\123\uff69\001" +
    "\002\000\004\123\035\001\002\000\006\051\uffeb\053\u014a" +
    "\001\002\000\006\052\u0148\053\226\001\002\000\006\051" +
    "\uffe5\053\uffe5\001\002\000\020\043\231\044\232\045\233" +
    "\046\235\054\uff69\121\uff69\123\uff69\001\002\000\006\051" +
    "\uffe2\053\uffe2\001\002\000\004\123\035\001\002\000\006" +
    "\051\uffe6\053\uffe6\001\002\000\004\052\u014d\001\002\000" +
    "\010\054\256\121\261\123\244\001\002\000\004\051\uffee" +
    "\001\002\000\034\023\037\026\041\037\054\054\062\060" +
    "\034\062\022\071\025\120\043\121\023\122\031\123\035" +
    "\124\044\125\030\001\002\000\006\032\u016d\054\140\001" +
    "\002\000\004\032\u0169\001\002\000\004\027\u0168\001\002" +
    "\000\034\023\037\026\041\037\054\054\062\060\034\062" +
    "\022\071\025\120\043\121\023\122\031\123\035\124\044" +
    "\125\030\001\002\000\022\023\u0153\024\uff85\025\uff85\027" +
    "\uff85\030\u014f\042\u0156\054\250\123\035\001\002\000\022" +
    "\023\uff84\024\uff84\025\uff84\027\uff84\030\uff84\042\uff84\054" +
    "\uff84\123\uff84\001\002\000\036\023\037\026\041\037\054" +
    "\051\u0157\054\062\060\034\062\022\071\025\120\043\121" +
    "\023\122\031\123\035\124\044\125\030\001\002\000\022" +
    "\023\uff7e\024\uff7e\025\uff7e\027\uff7e\030\uff7e\042\uff7e\054" +
    "\uff7e\123\uff7e\001\002\000\100\040\141\051\u0159\054\140" +
    "\063\107\064\125\065\126\067\104\070\114\071\111\072" +
    "\116\073\105\074\137\075\115\076\132\077\124\100\135" +
    "\101\131\102\133\103\117\104\127\105\110\106\136\107" +
    "\130\110\123\111\122\112\134\113\113\114\103\115\112" +
    "\116\120\117\121\001\002\000\022\023\uff7f\024\uff7f\025" +
    "\uff7f\027\uff7f\030\uff7f\042\uff7f\054\uff7f\123\uff7f\001\002" +
    "\000\022\023\uff83\024\uff83\025\uff83\027\uff83\030\uff83\042" +
    "\uff83\054\uff83\123\uff83\001\002\000\100\040\141\041\u015c" +
    "\054\140\063\107\064\125\065\126\067\104\070\114\071" +
    "\111\072\116\073\105\074\137\075\115\076\132\077\124" +
    "\100\135\101\131\102\133\103\117\104\127\105\110\106" +
    "\136\107\130\110\123\111\122\112\134\113\113\114\103" +
    "\115\112\116\120\117\121\001\002\000\014\023\u0153\030" +
    "\u014f\042\u0156\054\250\123\035\001\002\000\010\024\u015e" +
    "\025\u015f\027\u0161\001\002\000\014\023\u0153\030\u014f\042" +
    "\u0156\054\250\123\035\001\002\000\034\023\037\026\041" +
    "\037\054\054\062\060\034\062\022\071\025\120\043\121" +
    "\023\122\031\123\035\124\044\125\030\001\002\000\022" +
    "\023\uff7c\024\uff7c\025\uff7c\027\uff7c\030\uff7c\042\uff7c\054" +
    "\uff7c\123\uff7c\001\002\000\022\023\uff79\024\uff79\025\uff79" +
    "\027\uff79\030\uff79\042\uff79\054\uff79\123\uff79\001\002\000" +
    "\100\040\141\041\u0163\054\140\063\107\064\125\065\126" +
    "\067\104\070\114\071\111\072\116\073\105\074\137\075" +
    "\115\076\132\077\124\100\135\101\131\102\133\103\117" +
    "\104\127\105\110\106\136\107\130\110\123\111\122\112" +
    "\134\113\113\114\103\115\112\116\120\117\121\001\002" +
    "\000\014\023\u0153\030\u014f\042\u0156\054\250\123\035\001" +
    "\002\000\010\024\u015e\025\u015f\027\u0161\001\002\000\022" +
    "\023\uff7b\024\uff7b\025\uff7b\027\uff7b\030\uff7b\042\uff7b\054" +
    "\uff7b\123\uff7b\001\002\000\004\027\u0167\001\002\000\022" +
    "\023\uff7a\024\uff7a\025\uff7a\027\uff7a\030\uff7a\042\uff7a\054" +
    "\uff7a\123\uff7a\001\002\000\130\024\uff94\025\uff94\027\uff94" +
    "\031\uff94\032\uff94\035\uff94\036\uff94\040\uff94\041\uff94\051" +
    "\uff94\053\uff94\054\uff94\055\uff94\061\uff94\062\uff94\063\uff94" +
    "\064\uff94\065\uff94\067\uff94\070\uff94\071\uff94\072\uff94\073" +
    "\uff94\074\uff94\075\uff94\076\uff94\077\uff94\100\uff94\101\uff94" +
    "\102\uff94\103\uff94\104\uff94\105\uff94\106\uff94\107\uff94\110" +
    "\uff94\111\uff94\112\uff94\113\uff94\114\uff94\115\uff94\116\uff94" +
    "\117\uff94\001\002\000\034\023\037\026\041\037\054\054" +
    "\062\060\034\062\022\071\025\120\043\121\023\122\031" +
    "\123\035\124\044\125\030\001\002\000\100\040\141\051" +
    "\u016b\054\140\063\107\064\125\065\126\067\104\070\114" +
    "\071\111\072\116\073\105\074\137\075\115\076\132\077" +
    "\124\100\135\101\131\102\133\103\117\104\127\105\110" +
    "\106\136\107\130\110\123\111\122\112\134\113\113\114" +
    "\103\115\112\116\120\117\121\001\002\000\022\023\uff81" +
    "\024\uff81\025\uff81\027\uff81\030\uff81\042\uff81\054\uff81\123" +
    "\uff81\001\002\000\004\051\u0170\001\002\000\034\023\037" +
    "\026\041\037\054\054\062\060\034\062\022\071\025\120" +
    "\043\121\023\122\031\123\035\124\044\125\030\001\002" +
    "\000\100\040\141\051\u016f\054\140\063\107\064\125\065" +
    "\126\067\104\070\114\071\111\072\116\073\105\074\137" +
    "\075\115\076\132\077\124\100\135\101\131\102\133\103" +
    "\117\104\127\105\110\106\136\107\130\110\123\111\122" +
    "\112\134\113\113\114\103\115\112\116\120\117\121\001" +
    "\002\000\022\023\uff82\024\uff82\025\uff82\027\uff82\030\uff82" +
    "\042\uff82\054\uff82\123\uff82\001\002\000\022\023\uff80\024" +
    "\uff80\025\uff80\027\uff80\030\uff80\042\uff80\054\uff80\123\uff80" +
    "\001\002\000\100\031\u0172\040\141\054\140\063\107\064" +
    "\125\065\126\067\104\070\114\071\111\072\116\073\105" +
    "\074\137\075\115\076\132\077\124\100\135\101\131\102" +
    "\133\103\117\104\127\105\110\106\136\107\130\110\123" +
    "\111\122\112\134\113\113\114\103\115\112\116\120\117" +
    "\121\001\002\000\014\023\u0153\030\u014f\042\u0156\054\250" +
    "\123\035\001\002\000\004\027\u0174\001\002\000\022\023" +
    "\uff7d\024\uff7d\025\uff7d\027\uff7d\030\uff7d\042\uff7d\054\uff7d" +
    "\123\uff7d\001\002\000\034\023\037\026\041\037\054\054" +
    "\062\060\034\062\022\071\025\120\043\121\023\122\031" +
    "\123\035\124\044\125\030\001\002\000\130\024\uff9a\025" +
    "\uff9a\027\uff9a\031\uff9a\032\uff9a\035\uff9a\036\uff9a\040\141" +
    "\041\uff9a\051\uff9a\053\uff9a\054\140\055\uff9a\061\uff9a\062" +
    "\uff9a\063\107\064\125\065\126\067\104\070\114\071\111" +
    "\072\116\073\105\074\137\075\115\076\132\077\124\100" +
    "\135\101\131\102\133\103\117\104\127\105\110\106\136" +
    "\107\130\110\123\111\122\112\134\113\113\114\103\115" +
    "\112\116\120\117\121\001\002\000\100\040\141\041\u0178" +
    "\054\140\063\107\064\125\065\126\067\104\070\114\071" +
    "\111\072\116\073\105\074\137\075\115\076\132\077\124" +
    "\100\135\101\131\102\133\103\117\104\127\105\110\106" +
    "\136\107\130\110\123\111\122\112\134\113\113\114\103" +
    "\115\112\116\120\117\121\001\002\000\034\023\037\026" +
    "\041\037\054\054\062\060\034\062\022\071\025\120\043" +
    "\121\023\122\031\123\035\124\044\125\030\001\002\000" +
    "\102\024\u017a\025\u017c\040\141\054\140\063\107\064\125" +
    "\065\126\067\104\070\114\071\111\072\116\073\105\074" +
    "\137\075\115\076\132\077\124\100\135\101\131\102\133" +
    "\103\117\104\127\105\110\106\136\107\130\110\123\111" +
    "\122\112\134\113\113\114\103\115\112\116\120\117\121" +
    "\001\002\000\034\023\037\026\041\037\054\054\062\060" +
    "\034\062\022\071\025\120\043\121\023\122\031\123\035" +
    "\124\044\125\030\001\002\000\130\024\uff99\025\uff99\027" +
    "\uff99\031\uff99\032\uff99\035\uff99\036\uff99\040\uff99\041\uff99" +
    "\051\uff99\053\uff99\054\uff99\055\uff99\061\uff99\062\uff99\063" +
    "\uff99\064\uff99\065\uff99\067\uff99\070\uff99\071\uff99\072\uff99" +
    "\073\uff99\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99\101" +
    "\uff99\102\uff99\103\uff99\104\uff99\105\uff99\106\uff99\107\uff99" +
    "\110\uff99\111\uff99\112\uff99\113\uff99\114\uff99\115\uff99\116" +
    "\uff99\117\uff99\001\002\000\034\023\037\026\041\037\054" +
    "\054\062\060\034\062\022\071\025\120\043\121\023\122" +
    "\031\123\035\124\044\125\030\001\002\000\100\040\141" +
    "\041\u017e\054\140\063\107\064\125\065\126\067\104\070" +
    "\114\071\111\072\116\073\105\074\137\075\115\076\132" +
    "\077\124\100\135\101\131\102\133\103\117\104\127\105" +
    "\110\106\136\107\130\110\123\111\122\112\134\113\113" +
    "\114\103\115\112\116\120\117\121\001\002\000\034\023" +
    "\037\026\041\037\054\054\062\060\034\062\022\071\025" +
    "\120\043\121\023\122\031\123\035\124\044\125\030\001" +
    "\002\000\102\024\u017a\025\u017c\040\141\054\140\063\107" +
    "\064\125\065\126\067\104\070\114\071\111\072\116\073" +
    "\105\074\137\075\115\076\132\077\124\100\135\101\131" +
    "\102\133\103\117\104\127\105\110\106\136\107\130\110" +
    "\123\111\122\112\134\113\113\114\103\115\112\116\120" +
    "\117\121\001\002\000\130\024\uff8e\025\uff8e\027\uff8e\031" +
    "\uff8e\032\uff8e\035\uff8e\036\uff8e\040\uff8e\041\uff8e\051\uff8e" +
    "\053\uff8e\054\uff8e\055\uff8e\061\uff8e\062\uff8e\063\uff8e\064" +
    "\uff8e\065\uff8e\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e" +
    "\074\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e\101\uff8e\102" +
    "\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e\107\uff8e\110\uff8e" +
    "\111\uff8e\112\uff8e\113\uff8e\114\uff8e\115\uff8e\116\uff8e\117" +
    "\uff8e\001\002\000\100\027\u0182\040\141\054\140\063\107" +
    "\064\125\065\126\067\104\070\114\071\111\072\116\073" +
    "\105\074\137\075\115\076\132\077\124\100\135\101\131" +
    "\102\133\103\117\104\127\105\110\106\136\107\130\110" +
    "\123\111\122\112\134\113\113\114\103\115\112\116\120" +
    "\117\121\001\002\000\130\024\uff8d\025\uff8d\027\uff8d\031" +
    "\uff8d\032\uff8d\035\uff8d\036\uff8d\040\uff8d\041\uff8d\051\uff8d" +
    "\053\uff8d\054\uff8d\055\uff8d\061\uff8d\062\uff8d\063\uff8d\064" +
    "\uff8d\065\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d" +
    "\074\uff8d\075\uff8d\076\uff8d\077\uff8d\100\uff8d\101\uff8d\102" +
    "\uff8d\103\uff8d\104\uff8d\105\uff8d\106\uff8d\107\uff8d\110\uff8d" +
    "\111\uff8d\112\uff8d\113\uff8d\114\uff8d\115\uff8d\116\uff8d\117" +
    "\uff8d\001\002\000\006\051\ufff7\105\u0184\001\002\000\036" +
    "\023\037\026\041\037\054\054\062\056\u0186\060\034\062" +
    "\022\071\025\120\043\121\023\122\031\123\035\124\044" +
    "\125\030\001\002\000\100\040\141\051\ufff5\054\140\063" +
    "\107\064\125\065\126\067\104\070\114\071\111\072\116" +
    "\073\105\074\137\075\115\076\132\077\124\100\135\101" +
    "\131\102\133\103\117\104\127\105\110\106\136\107\130" +
    "\110\123\111\122\112\134\113\113\114\103\115\112\116" +
    "\120\117\121\001\002\000\006\123\035\124\065\001\002" +
    "\000\006\053\u010d\057\u0188\001\002\000\004\051\ufff6\001" +
    "\002\000\130\024\uff78\025\uff78\027\uff78\031\uff78\032\uff78" +
    "\035\uff78\036\uff78\040\uff78\041\uff78\051\uff78\053\uff78\054" +
    "\uff78\055\uff78\061\uff78\062\uff78\063\uff78\064\uff78\065\uff78" +
    "\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78\074\uff78\075" +
    "\uff78\076\uff78\077\uff78\100\uff78\101\uff78\102\uff78\103\uff78" +
    "\104\uff78\105\uff78\106\uff78\107\uff78\110\uff78\111\uff78\112" +
    "\uff78\113\uff78\114\uff78\115\uff78\116\uff78\117\uff78\001\002" +
    "\000\104\040\141\053\uffc1\054\140\061\uffc1\062\u018d\063" +
    "\107\064\125\065\126\067\104\070\114\071\111\072\116" +
    "\073\105\074\137\075\115\076\132\077\124\100\135\101" +
    "\131\102\133\103\117\104\127\105\110\106\136\107\130" +
    "\110\123\111\122\112\134\113\113\114\103\115\112\116" +
    "\120\117\121\001\002\000\006\053\146\061\u018c\001\002" +
    "\000\130\024\uff77\025\uff77\027\uff77\031\uff77\032\uff77\035" +
    "\uff77\036\uff77\040\uff77\041\uff77\051\uff77\053\uff77\054\uff77" +
    "\055\uff77\061\uff77\062\uff77\063\uff77\064\uff77\065\uff77\067" +
    "\uff77\070\uff77\071\uff77\072\uff77\073\uff77\074\uff77\075\uff77" +
    "\076\uff77\077\uff77\100\uff77\101\uff77\102\uff77\103\uff77\104" +
    "\uff77\105\uff77\106\uff77\107\uff77\110\uff77\111\uff77\112\uff77" +
    "\113\uff77\114\uff77\115\uff77\116\uff77\117\uff77\001\002\000" +
    "\040\023\037\026\041\037\054\053\uff72\054\062\060\034" +
    "\061\uff72\062\022\071\025\120\043\121\023\122\031\123" +
    "\035\124\044\125\030\001\002\000\006\053\211\061\u018f" +
    "\001\002\000\130\024\uff76\025\uff76\027\uff76\031\uff76\032" +
    "\uff76\035\uff76\036\uff76\040\uff76\041\uff76\051\uff76\053\uff76" +
    "\054\uff76\055\uff76\061\uff76\062\uff76\063\uff76\064\uff76\065" +
    "\uff76\067\uff76\070\uff76\071\uff76\072\uff76\073\uff76\074\uff76" +
    "\075\uff76\076\uff76\077\uff76\100\uff76\101\uff76\102\uff76\103" +
    "\uff76\104\uff76\105\uff76\106\uff76\107\uff76\110\uff76\111\uff76" +
    "\112\uff76\113\uff76\114\uff76\115\uff76\116\uff76\117\uff76\001" +
    "\002\000\064\002\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\023\ufffc\026\ufffc\037\ufffc\054\ufffc\060\ufffc\062\ufffc" +
    "\071\ufffc\120\ufffc\121\ufffc\122\ufffc\123\ufffc\124\ufffc\125" +
    "\ufffc\001\002\000\006\054\250\105\u0192\001\002\000\034" +
    "\023\037\026\041\037\054\054\062\060\034\062\022\071" +
    "\025\120\043\121\023\122\031\123\035\124\044\125\030" +
    "\001\002\000\004\105\u0194\001\002\000\034\023\037\026" +
    "\041\037\054\054\062\060\034\062\022\071\025\120\043" +
    "\121\023\122\031\123\035\124\044\125\030\001\002\000" +
    "\100\040\141\051\ufff9\054\140\063\107\064\125\065\126" +
    "\067\104\070\114\071\111\072\116\073\105\074\137\075" +
    "\115\076\132\077\124\100\135\101\131\102\133\103\117" +
    "\104\127\105\110\106\136\107\130\110\123\111\122\112" +
    "\134\113\113\114\103\115\112\116\120\117\121\001\002" +
    "\000\100\040\141\051\ufffa\054\140\063\107\064\125\065" +
    "\126\067\104\070\114\071\111\072\116\073\105\074\137" +
    "\075\115\076\132\077\124\100\135\101\131\102\133\103" +
    "\117\104\127\105\110\106\136\107\130\110\123\111\122" +
    "\112\134\113\113\114\103\115\112\116\120\117\121\001" +
    "\002\000\130\024\uffbb\025\uffbb\027\uffbb\031\uffbb\032\uffbb" +
    "\035\uffbb\036\uffbb\040\141\041\uffbb\051\uffbb\053\uffbb\054" +
    "\140\055\uffbb\061\uffbb\062\uffbb\063\uffbb\064\125\065\126" +
    "\067\104\070\114\071\uffbb\072\116\073\105\074\137\075" +
    "\115\076\132\077\124\100\135\101\131\102\133\103\117" +
    "\104\127\105\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb\112" +
    "\uffbb\113\uffbb\114\uffbb\115\uffbb\116\uffbb\117\uffbb\001\002" +
    "\000\004\124\u0199\001\002\000\004\051\uffed\001\002\000" +
    "\004\062\u019b\001\002\000\130\024\uff95\025\uff95\027\uff95" +
    "\031\uff95\032\uff95\035\uff95\036\uff95\040\uff95\041\uff95\051" +
    "\uff95\053\uff95\054\uff95\055\uff95\061\uff95\062\uff95\063\uff95" +
    "\064\uff95\065\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073" +
    "\uff95\074\uff95\075\uff95\076\uff95\077\uff95\100\uff95\101\uff95" +
    "\102\uff95\103\uff95\104\uff95\105\uff95\106\uff95\107\uff95\110" +
    "\uff95\111\uff95\112\uff95\113\uff95\114\uff95\115\uff95\116\uff95" +
    "\117\uff95\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019a\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\005\001\001\000\026\005\031\006\025" +
    "\007\052\013\047\016\050\017\062\023\037\030\032\051" +
    "\051\052\054\001\001\000\004\033\017\001\001\000\004" +
    "\033\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\306\041\u0199\042\252\001\001\000\002" +
    "\001\001\000\004\016\u0197\001\001\000\024\006\u0196\007" +
    "\052\013\047\016\050\017\062\023\037\030\032\051\051" +
    "\052\054\001\001\000\004\015\105\001\001\000\004\016" +
    "\u0190\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\u0189\007\052\013" +
    "\047\014\u018a\016\050\017\062\023\037\030\032\051\051" +
    "\052\054\001\001\000\002\001\001\000\004\016\u0182\001" +
    "\001\000\024\006\u0176\007\052\013\047\016\050\017\062" +
    "\023\037\030\032\051\051\052\054\001\001\000\002\001" +
    "\001\000\014\016\u014f\023\u0150\055\u0153\056\u0151\057\u0154" +
    "\001\001\000\004\016\u014b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0141\001\001\000\006\043\u013e" +
    "\044\233\001\001\000\004\016\u013b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\u0125\016\u0127\023\u0126\001\001\000\002\001" +
    "\001\000\004\020\u0118\001\001\000\004\016\u0102\001\001" +
    "\000\006\016\340\020\336\001\001\000\004\061\221\001" +
    "\001\000\026\006\067\007\071\013\047\016\070\017\062" +
    "\023\037\024\072\030\032\051\051\052\054\001\001\000" +
    "\002\001\001\000\006\016\066\017\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\217\024\216\001\001\000\024\006\100\007\052\013\047" +
    "\016\050\017\062\023\037\030\032\051\051\052\054\001" +
    "\001\000\002\001\001\000\004\015\105\001\001\000\030" +
    "\006\204\007\052\013\047\016\050\017\062\023\037\030" +
    "\032\051\051\052\054\053\205\054\206\001\001\000\024" +
    "\006\203\007\052\013\047\016\050\017\062\023\037\030" +
    "\032\051\051\052\054\001\001\000\024\006\202\007\052" +
    "\013\047\016\050\017\062\023\037\030\032\051\051\052" +
    "\054\001\001\000\024\006\201\007\052\013\047\016\050" +
    "\017\062\023\037\030\032\051\051\052\054\001\001\000" +
    "\002\001\001\000\024\006\200\007\052\013\047\016\050" +
    "\017\062\023\037\030\032\051\051\052\054\001\001\000" +
    "\024\006\177\007\052\013\047\016\050\017\062\023\037" +
    "\030\032\051\051\052\054\001\001\000\024\006\176\007" +
    "\052\013\047\016\050\017\062\023\037\030\032\051\051" +
    "\052\054\001\001\000\024\006\175\007\052\013\047\016" +
    "\050\017\062\023\037\030\032\051\051\052\054\001\001" +
    "\000\024\006\174\007\052\013\047\016\050\017\062\023" +
    "\037\030\032\051\051\052\054\001\001\000\004\032\173" +
    "\001\001\000\024\006\172\007\052\013\047\016\050\017" +
    "\062\023\037\030\032\051\051\052\054\001\001\000\024" +
    "\006\171\007\052\013\047\016\050\017\062\023\037\030" +
    "\032\051\051\052\054\001\001\000\002\001\001\000\024" +
    "\006\170\007\052\013\047\016\050\017\062\023\037\030" +
    "\032\051\051\052\054\001\001\000\024\006\167\007\052" +
    "\013\047\016\050\017\062\023\037\030\032\051\051\052" +
    "\054\001\001\000\024\006\166\007\052\013\047\016\050" +
    "\017\062\023\037\030\032\051\051\052\054\001\001\000" +
    "\024\006\165\007\052\013\047\016\050\017\062\023\037" +
    "\030\032\051\051\052\054\001\001\000\024\006\164\007" +
    "\052\013\047\016\050\017\062\023\037\030\032\051\051" +
    "\052\054\001\001\000\024\006\163\007\052\013\047\016" +
    "\050\017\062\023\037\030\032\051\051\052\054\001\001" +
    "\000\024\006\162\007\052\013\047\016\050\017\062\023" +
    "\037\030\032\051\051\052\054\001\001\000\002\001\001" +
    "\000\024\006\161\007\052\013\047\016\050\017\062\023" +
    "\037\030\032\051\051\052\054\001\001\000\024\006\160" +
    "\007\052\013\047\016\050\017\062\023\037\030\032\051" +
    "\051\052\054\001\001\000\024\006\157\007\052\013\047" +
    "\016\050\017\062\023\037\030\032\051\051\052\054\001" +
    "\001\000\002\001\001\000\024\006\156\007\052\013\047" +
    "\016\050\017\062\023\037\030\032\051\051\052\054\001" +
    "\001\000\024\006\155\007\052\013\047\016\050\017\062" +
    "\023\037\030\032\051\051\052\054\001\001\000\024\006" +
    "\154\007\052\013\047\016\050\017\062\023\037\030\032" +
    "\051\051\052\054\001\001\000\004\032\150\001\001\000" +
    "\026\006\142\007\052\013\047\014\143\016\050\017\062" +
    "\023\037\030\032\051\051\052\054\001\001\000\024\006" +
    "\141\007\052\013\047\016\050\017\062\023\037\030\032" +
    "\051\051\052\054\001\001\000\004\015\105\001\001\000" +
    "\004\015\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\147\007\052\013\047\016\050\017\062\023" +
    "\037\030\032\051\051\052\054\001\001\000\002\001\001" +
    "\000\004\015\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\105" +
    "\001\001\000\004\015\105\001\001\000\004\015\105\001" +
    "\001\000\004\015\105\001\001\000\004\015\105\001\001" +
    "\000\004\015\105\001\001\000\004\015\105\001\001\000" +
    "\004\015\105\001\001\000\004\015\105\001\001\000\004" +
    "\015\105\001\001\000\004\015\105\001\001\000\004\015" +
    "\105\001\001\000\004\015\105\001\001\000\004\015\105" +
    "\001\001\000\004\015\105\001\001\000\002\001\001\000" +
    "\004\015\105\001\001\000\004\015\105\001\001\000\004" +
    "\015\105\001\001\000\004\015\105\001\001\000\004\015" +
    "\105\001\001\000\004\015\105\001\001\000\004\015\105" +
    "\001\001\000\004\015\105\001\001\000\004\015\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\204\007\052\013\047\016\050\017\062\023" +
    "\037\030\032\051\051\052\054\054\211\001\001\000\002" +
    "\001\001\000\024\006\215\007\052\013\047\016\050\017" +
    "\062\023\037\030\032\051\051\052\054\001\001\000\024" +
    "\006\214\007\052\013\047\016\050\017\062\023\037\030" +
    "\032\051\051\052\054\001\001\000\004\015\105\001\001" +
    "\000\004\015\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\224\021\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\335\001\001\000\006\043\227\044\233\001\001" +
    "\000\002\001\001\000\006\016\224\021\331\001\001\000" +
    "\010\016\321\047\317\050\320\001\001\000\006\016\224" +
    "\021\313\001\001\000\014\020\253\040\254\041\256\042" +
    "\252\046\257\001\001\000\006\016\224\021\235\001\001" +
    "\000\004\062\237\001\001\000\006\020\242\063\244\001" +
    "\001\000\002\001\001\000\004\044\241\001\001\000\002" +
    "\001\001\000\004\023\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\246\001\001\000\004\023\250" +
    "\001\001\000\006\016\217\024\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\274" +
    "\001\001\000\002\001\001\000\016\020\253\040\264\041" +
    "\256\042\252\045\263\046\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\253\040" +
    "\262\041\256\042\252\046\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\020\253\040\270\041\256\042\252\046\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\253\040" +
    "\277\041\256\042\252\046\257\001\001\000\004\020\276" +
    "\001\001\000\004\020\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\306\042\312\001\001\000\006\020\306\042\311\001" +
    "\001\000\006\020\306\042\310\001\001\000\004\032\307" +
    "\001\001\000\006\020\306\042\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\314\001" +
    "\001\000\002\001\001\000\004\044\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\325\001\001\000" +
    "\002\001\001\000\004\016\323\001\001\000\002\001\001" +
    "\000\006\016\321\047\330\001\001\000\002\001\001\000" +
    "\004\044\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\332\001\001\000\002\001\001\000\004\044" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\343\025\347\026\350\027\346\030\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\343\027\357\030\344\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\343\026\356\027" +
    "\346\030\344\001\001\000\012\016\343\026\355\027\346" +
    "\030\344\001\001\000\004\032\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\362\001\001\000\002\001" +
    "\001\000\004\020\364\001\001\000\002\001\001\000\004" +
    "\034\367\001\001\000\010\016\066\017\371\035\370\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\343\026\374\027\346\030" +
    "\344\001\001\000\002\001\001\000\006\016\066\017\377" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\343\026\u0101\027\346\030\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\253\040\u0104\041\256\042" +
    "\252\046\257\001\001\000\002\001\001\000\004\037\u0107" +
    "\001\001\000\012\016\066\017\u0109\022\u010b\036\u0108\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\066\017" +
    "\u0112\001\001\000\006\030\u010e\031\u010f\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\u0111\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\066\017\u0109" +
    "\022\u0115\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\u010e\031\u0117\001\001\000\002\001\001\000\004" +
    "\046\u0119\001\001\000\004\044\u011a\001\001\000\010\016" +
    "\u011d\065\u011c\066\u011b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u011f\001\001\000\024\006\u0122\007" +
    "\052\013\047\016\050\017\062\023\037\030\032\051\051" +
    "\052\054\001\001\000\002\001\001\000\024\006\u0121\007" +
    "\052\013\047\016\050\017\062\023\037\030\032\051\051" +
    "\052\054\001\001\000\004\015\105\001\001\000\004\015" +
    "\105\001\001\000\006\016\u011d\066\u0124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u0129\001\001\000\024\006\u0132\007\052\013\047\016\050" +
    "\017\062\023\037\030\032\051\051\052\054\001\001\000" +
    "\002\001\001\000\024\006\u012b\007\052\013\047\016\050" +
    "\017\062\023\037\030\032\051\051\052\054\001\001\000" +
    "\006\012\u012e\015\105\001\001\000\024\006\u0130\007\052" +
    "\013\047\016\050\017\062\023\037\030\032\051\051\052" +
    "\054\001\001\000\010\011\u012f\016\u0127\023\u0126\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\105\001" +
    "\001\000\002\001\001\000\006\012\u0133\015\105\001\001" +
    "\000\002\001\001\000\024\006\u0135\007\052\013\047\016" +
    "\050\017\062\023\037\030\032\051\051\052\054\001\001" +
    "\000\006\012\u0136\015\105\001\001\000\002\001\001\000" +
    "\006\016\066\017\u0138\001\001\000\002\001\001\000\006" +
    "\016\066\017\u013a\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\343\026\u013d\027\346\030\344\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\253\040" +
    "\u0140\041\256\042\252\046\257\001\001\000\002\001\001" +
    "\000\004\046\u0142\001\001\000\004\044\u0143\001\001\000" +
    "\012\016\224\021\u0145\064\u0144\067\u0146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\043" +
    "\u0148\044\233\001\001\000\002\001\001\000\010\016\224" +
    "\021\u0145\067\u014a\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\253\040\u014d\041\256\042\252\046\257" +
    "\001\001\000\002\001\001\000\024\006\u0170\007\052\013" +
    "\047\016\050\017\062\023\037\030\032\051\051\052\054" +
    "\001\001\000\004\015\u016b\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\u015a\007\052\013\047\016\050" +
    "\017\062\023\037\030\032\051\051\052\054\001\001\000" +
    "\010\016\u014f\023\u0150\057\u0159\001\001\000\002\001\001" +
    "\000\024\006\u0157\007\052\013\047\016\050\017\062\023" +
    "\037\030\032\051\051\052\054\001\001\000\002\001\001" +
    "\000\004\015\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\105\001\001\000\014\016\u014f\023\u0150" +
    "\055\u0153\056\u015c\057\u0154\001\001\000\004\060\u015f\001" +
    "\001\000\014\016\u014f\023\u0150\055\u0153\056\u0165\057\u0154" +
    "\001\001\000\024\006\u0161\007\052\013\047\016\050\017" +
    "\062\023\037\030\032\051\051\052\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\105\001\001\000" +
    "\014\016\u014f\023\u0150\055\u0153\056\u0163\057\u0154\001\001" +
    "\000\004\060\u0164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\006\u0169" +
    "\007\052\013\047\016\050\017\062\023\037\030\032\051" +
    "\051\052\054\001\001\000\004\015\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\006\u016d\007\052\013" +
    "\047\016\050\017\062\023\037\030\032\051\051\052\054" +
    "\001\001\000\004\015\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\105\001\001\000\014\016\u014f" +
    "\023\u0150\055\u0153\056\u0172\057\u0154\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\u0175\007\052\013\047" +
    "\016\050\017\062\023\037\030\032\051\051\052\054\001" +
    "\001\000\004\015\105\001\001\000\004\015\105\001\001" +
    "\000\024\006\u0178\007\052\013\047\016\050\017\062\023" +
    "\037\030\032\051\051\052\054\001\001\000\006\010\u017a" +
    "\015\105\001\001\000\024\006\u0180\007\052\013\047\016" +
    "\050\017\062\023\037\030\032\051\051\052\054\001\001" +
    "\000\002\001\001\000\024\006\u017c\007\052\013\047\016" +
    "\050\017\062\023\037\030\032\051\051\052\054\001\001" +
    "\000\004\015\105\001\001\000\024\006\u017e\007\052\013" +
    "\047\016\050\017\062\023\037\030\032\051\051\052\054" +
    "\001\001\000\006\010\u017f\015\105\001\001\000\002\001" +
    "\001\000\004\015\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\u0184\007\052\013\047\016\050\017" +
    "\062\023\037\030\032\051\051\052\054\001\001\000\004" +
    "\015\105\001\001\000\010\016\066\017\u0109\022\u0186\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\006\204\007\052\013\047\016\050\017\062" +
    "\023\037\030\032\051\051\052\054\053\u018d\054\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u0192\001\001\000\024\006\u0195\007\052\013" +
    "\047\016\050\017\062\023\037\030\032\051\051\052\054" +
    "\001\001\000\002\001\001\000\024\006\u0194\007\052\013" +
    "\047\016\050\017\062\023\037\030\032\051\051\052\054" +
    "\001\001\000\004\015\105\001\001\000\004\015\105\001" +
    "\001\000\004\015\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* The file being parsed. Only needed for location info. */
    File file;                   

    /* Buffer to get syntax error ino from message and location info
       from CUP's syntax_error to CUP's report_fatal_error
       function. */
    String errorMessage;
    pacioli.Location errorLocation;

   /* Public interface */
    public Parser(Lexer lex, ComplexSymbolFactory sf, File file) {
        super(lex,sf);
        this.file = file;
    }

    public static ProgramNode parseFile(File file) throws Exception {
        BufferedReader reader = new BufferedReader(new FileReader(file));
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        Lexer lexer = new Lexer(reader, csf, file, null);
        Parser parser = new Parser(lexer, csf, file);
        return (ProgramNode) parser.parse().value;
    }

   /* CUP overrides to get error handling with location info */
    public void report_error(String message, Object info) {
    }

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        done_parsing();      
        throw new PacioliException(errorLocation, errorMessage);
    }

    public void syntax_error(Symbol cur_token) {
        assert(cur_token instanceof ComplexSymbol);
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();
        for (Integer expected : ids){
            list.add(symbl_name_from_id(expected));
        }
        ComplexSymbol token = (ComplexSymbol) cur_token;
        errorLocation = makeLoc(token.getLeft(), token.getRight());
        errorMessage = "Expected one of " + list;
    }

   /* Utility functions for the grammar rules */
    private pacioli.Location makeLoc(Location from, Location to) {
        pacioli.Location pacioliFrom = new pacioli.Location(file, from.getLine(), from.getColumn(), from.getOffset());
        pacioli.Location pacioliTo = new pacioli.Location(file, to.getLine(), to.getColumn(), to.getOffset());
        return pacioliFrom.join(pacioliTo);
    }

    private static List<String> idNames(List<IdentifierNode> ids) {
        List<String> names = new ArrayList<String>();
        for (IdentifierNode id: ids) {
            names.add(id.getName());
        }
        return names;
    }

    private ValueDefinition functionDefinition(pacioli.Location loc, IdentifierNode id, List<IdentifierNode> args, ExpressionNode body) {
        ExpressionNode function = new LambdaNode(freshUnderscores(idNames(args)), body, loc);
        return new ValueDefinition(loc, id, function);
    }

    private static List<String> freshUnderscores(List<String> names) {
          List<String> fresh = new ArrayList<String>();
          for (String name : names) {
              if (name.equals("_")) {
                  fresh.add(freshUnderscore());
              } else {
                  fresh.add(name);
              }
          }
          return fresh;
      }

    private static int counter = 0;

    private static String freshUnderscore() {
        return "_" + counter++;
    }
    
    private static String freshName(String prefix) {
        return prefix + counter++;
    }

    private static ExpressionNode binop(String name, ExpressionNode left, ExpressionNode right) {
        pacioli.Location loc = left.getLocation().join(right.getLocation());
        List<ExpressionNode> args = new ArrayList<ExpressionNode>();
        args.add(left);
        args.add(right);
        return new ApplicationNode(new IdentifierNode(name, loc), args, loc);
    }

    private static ExpressionNode desugarExp(String op, ExpressionNode base, String power,
        pacioli.Location loc, boolean swapSign) {
      
          int pow = Integer.parseInt(power);
          
        ExpressionNode bas;
        
        if (pow < 0) {
            bas = new ApplicationNode(new IdentifierNode(op.equals("multiply") ? "reciprocal" : "inverse", loc), Arrays.asList(base), loc);
        } else {
            bas = base;
        }
        return desugarExpHelper(op, bas, (pow < 0) ? -pow : pow, loc);
    }

    private static ExpressionNode desugarExpHelper(String op, ExpressionNode base, int power, pacioli.Location loc) {

        if (power == 0) {
        List<ExpressionNode> args = new ArrayList<ExpressionNode>();
        args.add(base);
        return new ApplicationNode(new IdentifierNode(op.equals("multiply")? "unit" : "left_identity", loc), args, loc);
        } else if (power == 1) {
        return base;
        } else {
        String fresh = freshName(op);

        ExpressionNode exp = new IdentifierNode(fresh, loc);

        for (int i = 1; i < power; i++) {
            List<ExpressionNode> args = new ArrayList<ExpressionNode>();
            args.add(exp);
            args.add(new IdentifierNode(fresh, loc));
            exp = new ApplicationNode(new IdentifierNode(op, loc), args, loc);
        }

        BindingNode binding = new LetBindingNode(loc, fresh, base);
        return new LetNode(Arrays.asList(binding), exp, loc);
        }
    }

    private static ExpressionNode singleop(String name, ExpressionNode exp, pacioli.Location loc) {
        List<ExpressionNode> args = new ArrayList<ExpressionNode>();
        args.add(exp);
        return new ApplicationNode(new IdentifierNode(name, loc), args, loc);
    }

    private static class GeneratorClause {
        public final IdentifierNode id;
        public final ExpressionNode list;
        public GeneratorClause(IdentifierNode id, ExpressionNode list) {
            this.id = id;
            this.list = list;
        }
    }

    private static class TupleGeneratorClause {
        public final List<IdentifierNode> ids;
        public final ExpressionNode list;
        public TupleGeneratorClause(List<IdentifierNode> ids, ExpressionNode list) {
            this.ids = ids;
            this.list = list;
        }
    }

    private static class AssignmentClause {
        public final IdentifierNode id;
        public final ExpressionNode value;
        public AssignmentClause(IdentifierNode id, ExpressionNode value) {
            this.id = id;
            this.value = value;
        }
    }

    private static class TupleAssignmentClause {
        public final List<IdentifierNode> ids;
        public final ExpressionNode value;
        public TupleAssignmentClause(List<IdentifierNode> ids, ExpressionNode value) {
            this.ids = ids;
            this.value = value;
        }
    }

    private static ExpressionNode desugarComprehension(pacioli.Location loc, ExpressionNode e, List<Object> ps) throws PacioliException {

        String accuName = freshName("_c_accu");
        String tupName = freshName("_c_tup");

        ExpressionNode addMut = new IdentifierNode("_add_mut", e.getLocation());
        ExpressionNode accu = new IdentifierNode(accuName, e.getLocation());
        ExpressionNode body = new ApplicationNode(addMut, Arrays.asList(accu, e), e.getLocation());

        for (int i = ps.size() - 1; 0 <= i; i--) {
            Object part = ps.get(i);
            if (part instanceof GeneratorClause) {
                GeneratorClause clause = (GeneratorClause) part;
                pacioli.Location loc2 = clause.list.getLocation();
                body = new ApplicationNode(
                                new IdentifierNode("loop_list",loc2),
                                Arrays.asList((ExpressionNode) new IdentifierNode(accuName, loc2),
                                              new LambdaNode(freshUnderscores(Arrays.asList(accuName, clause.id.getName())), body, loc2), clause.list),
                                loc2);
            } else if (part instanceof TupleGeneratorClause) {
                TupleGeneratorClause clause = (TupleGeneratorClause) part;
                pacioli.Location loc2 = clause.list.getLocation();

                List<String> args = new ArrayList<String>();
                for (IdentifierNode var : clause.ids) {
                    args.add(var.getName());
                }

                ExpressionNode apply = new IdentifierNode("apply", loc2);
                ExpressionNode restLambda = new LambdaNode(freshUnderscores(args), body, loc2);
                ExpressionNode tup = new IdentifierNode(tupName, loc2);
                ExpressionNode loopList = new IdentifierNode("loop_list", loc2);
                ExpressionNode accuId = new IdentifierNode(accuName, loc2);
                ExpressionNode restApp = new ApplicationNode(apply, Arrays.asList(restLambda, tup), loc2);
                ExpressionNode restAppLambda = new LambdaNode(Arrays.asList(accuName, tupName), restApp, loc2);

                body = new ApplicationNode(loopList, Arrays.asList(accuId, restAppLambda, clause.list), loc2);
            } else if (part instanceof AssignmentClause) {
                AssignmentClause clause = (AssignmentClause) part;

                body = new ApplicationNode(new LambdaNode(freshUnderscores(Arrays.asList(clause.id.getName())), body, body.getLocation()), Arrays.asList(clause.value), clause.value.getLocation());
            } else if (part instanceof TupleAssignmentClause) {

                TupleAssignmentClause clause = (TupleAssignmentClause) part;

                List<String> args = new ArrayList<String>();
                for (IdentifierNode var : clause.ids) {
                    args.add(var.getName());
                }

                ExpressionNode apply = new IdentifierNode("apply", loc);
                ExpressionNode restLambda = new LambdaNode(freshUnderscores(args), body, loc);

                body = new ApplicationNode(apply, Arrays.asList(restLambda, clause.value), clause.value.getLocation());
            } else if (part instanceof ExpressionNode) {
                ExpressionNode clause = (ExpressionNode) part;
                body = new BranchNode(clause, body, new IdentifierNode(accuName, loc), loc);
            } else {
                throw new PacioliException(loc, "Unexpected clause %s", part);
            }
        }

        ExpressionNode lambda = new LambdaNode(Arrays .asList(accuName), body, loc);
        ExpressionNode emptyListId = new IdentifierNode("empty_list", loc);
        ExpressionNode emptyList = new ApplicationNode(emptyListId, new ArrayList<ExpressionNode>(), loc);

        return new ApplicationNode(lambda, Arrays.asList(emptyList), loc);
    }

    private static ExpressionNode desugarFoldComprehension(pacioli.Location loc, IdentifierNode op, ExpressionNode e, List<Object> ps) throws PacioliException {
        pacioli.Location eLoc = e.getLocation();
        pacioli.Location opLoc = op.getLocation();
        ExpressionNode body = desugarComprehension(loc, e, ps);
        if (op.getName().equals("sum")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_sum", eLoc), Arrays.asList(body), opLoc);
        } else if (op.getName().equals("count")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_count", eLoc), Arrays.asList(body), opLoc);
        } else if (op.getName().equals("all")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_all", eLoc), Arrays.asList(body), opLoc);
        } else if (op.getName().equals("some")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_some", eLoc), Arrays.asList(body), opLoc);
        } else if (op.getName().equals("gcd")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_gcd", eLoc), Arrays.asList(body), opLoc);
        } else if (op.getName().equals("concat")) {
            return new ApplicationNode((ExpressionNode) new IdentifierNode("list_concat", eLoc), Arrays.asList(body), opLoc);
        } else {
            throw new PacioliException(op.getLocation(), "Comprehension operator '%s' unknown", op.getName());
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= includes commands 
            {
              ProgramNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Node> i = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Definition> c = (List<Definition>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<IncludeNode> includes = new ArrayList<IncludeNode>();
                                                       List<ImportNode> imports = new ArrayList<ImportNode>();
                                                       for (Node node : i) {
                                                           if (node instanceof IncludeNode) {
                                                               includes.add((IncludeNode) node);
                                                           } else {
                                                               imports.add((ImportNode) node);
                                                           }
                                                       }
                                                       RESULT = new ProgramNode(new pacioli.Location(file, 0, 0, 0), includes, imports, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // includes ::= includes INCLUDE path SEMICOLON 
            {
              List<Node> RESULT =null;
		Location isxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location isxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<Node> is = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		StringNode p = (StringNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 is.add(new IncludeNode(makeLoc(pxleft, pxright), p)); RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // includes ::= includes IMPORT path SEMICOLON 
            {
              List<Node> RESULT =null;
		Location isxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location isxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<Node> is = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		StringNode p = (StringNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 is.add(new ImportNode(makeLoc(pxleft, pxright), p)); RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // includes ::= 
            {
              List<Node> RESULT =null;
		 RESULT = new ArrayList<Node>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // commands ::= commands command SEMICOLON 
            {
              List<Definition> RESULT =null;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Definition> cs = (List<Definition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Definition c = (Definition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 cs.add(c); RESULT = cs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commands",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // commands ::= 
            {
              List<Definition> RESULT =null;
		 RESULT = new LinkedList<Definition>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commands",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command ::= DEFINE id EQL expr 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValueDefinition(makeLoc(dxleft, exright), id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command ::= DEFINE id idlist EQL expr 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = functionDefinition(makeLoc(dxleft, exright), id, ids, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // command ::= DECLARE quali ids DBLCLN schema 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location qxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location qxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultiDeclaration(makeLoc(dxleft, sxright), ids, s, q != null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // command ::= DEFINDEX id 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> names = new ArrayList<String>();
                                                       RESULT = new IndexSetDefinition(makeLoc(dxleft, idxright), id, names); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // command ::= DEFINDEX id EQL LBRC names RBRC 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IndexSetDefinition(makeLoc(dxleft, pxright), id, idNames(ids)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // command ::= DEFINDEX id EQL expr 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IndexSetDefinition(makeLoc(dxleft, exright), id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // command ::= DEFTYPE schema EQL type 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeDefinition(makeLoc(dxleft, txright), s.context, s.type, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // command ::= DEFALIAS id EQL unit 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AliasDefinition(makeLoc(dxleft, uxright), id, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // command ::= DEFUNIT typeid EXCL typeid EQL unitvec 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TypeIdentifierNode id = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeIdentifierNode n = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<UnitDecl> ps = (List<UnitDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 /* Todo: remove hashmap and use pair list directly in UnitVectorDefinition */
                                                       java.util.Map<String, UnitNode> unitVector = new HashMap<String, UnitNode>();
                                                       for (UnitDecl pair: ps) {
                                                           unitVector.put(pair.key.getName(), pair.value);
                                                       }
                                                       RESULT = new UnitVectorDefinition(makeLoc(dxleft, psxright), id, n, ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // command ::= DEFUNIT id STRING 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitDefinition(makeLoc(dxleft, sxright), id, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // command ::= DEFUNIT id STRING EQL dimnum 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode def = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitDefinition(makeLoc(dxleft, defxright), id, s, def); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // command ::= DEFMATRIX id DBLCLN type EQL matrix 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode s = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ValueDecl> m = (List<ValueDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 /* Change MatrixLiteralNode to accept a ValueDecl list */
                                                       //List<Pair<List<String>, String>> stringPairs = new ArrayList<Pair<List<String>, String>>();
                                                       //for (ValueDecl decl: m) {
                                                         //  stringPairs.add(new Pair<List<String>, String>(idNames(decl.key), decl.value));
                                                       //}
                                                       ExpressionNode body = new MatrixLiteralNode(makeLoc(mxleft, mxright), s, m);
                                                       //ExpressionNode body = new MatrixLiteralNode(makeLoc(mxleft, mxright), s, stringPairs);
                                                       RESULT = new ValueDefinition(makeLoc(dxleft, mxright), id, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // command ::= DEFCONV id DBLCLN type 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(dxleft, txright);
                                                       ExpressionNode conv = new ConversionNode(loc, t);
                                                       RESULT = new ValueDefinition(loc, id, conv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // command ::= DOC id STRING 
            {
              Definition RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(dxleft, sxright);
                                                       RESULT = new Documentation(loc, id, new StringNode(s, makeLoc(sxleft, sxright))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // command ::= expr 
            {
              Definition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Toplevel(e.getLocation(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // command ::= DEFCLASS typeid typelist vardecls classmembers 
            {
              Definition RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TypeIdentifierNode id = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<TypeNode> ids = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeContext v = (TypeContext)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<TypeAssertion> e = (List<TypeAssertion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ClassDefinition(id.getLocation(), new SchemaNode(id.getLocation(), v, new TypeApplicationNode(id.getLocation(), id, ids)), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // command ::= DEFINSTANCE typeid typelist vardecls classmemberdefs 
            {
              Definition RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TypeIdentifierNode id = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<TypeNode> ids = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeContext v = (TypeContext)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ValueEquation> e = (List<ValueEquation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstanceDefinition(id.getLocation(), new SchemaNode(id.getLocation(), v, new TypeApplicationNode(id.getLocation(), id, ids)), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // quali ::= EXPORT 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("quali",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // quali ::= PUBLIC 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("quali",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // quali ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("quali",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // classmembers ::= classmembers COMMA typeassertion 
            {
              List<TypeAssertion> RESULT =null;
		Location msxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location msxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<TypeAssertion> ms = (List<TypeAssertion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tasxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tasxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeAssertion tas = (TypeAssertion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ms.add(tas); RESULT = ms; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classmembers",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // classmembers ::= typeassertion 
            {
              List<TypeAssertion> RESULT =null;
		Location tasxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tasxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeAssertion tas = (TypeAssertion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<TypeAssertion>(); RESULT.add(tas); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classmembers",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classmemberdefs ::= classmemberdefs COMMA valueeq 
            {
              List<ValueEquation> RESULT =null;
		Location msxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location msxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ValueEquation> ms = (List<ValueEquation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location eqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location eqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ValueEquation eq = (ValueEquation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ms.add(eq); RESULT = ms; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classmemberdefs",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // classmemberdefs ::= valueeq 
            {
              List<ValueEquation> RESULT =null;
		Location eqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location eqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ValueEquation eq = (ValueEquation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<ValueEquation>(); RESULT.add(eq); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classmemberdefs",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // typeassertion ::= ids DBLCLN schema 
            {
              TypeAssertion RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SchemaNode s = (SchemaNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeAssertion(makeLoc(idsxleft, sxright), ids, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeassertion",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valueeq ::= id EQL expr 
            {
              ValueEquation RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValueEquation(makeLoc(idxleft, exright), id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valueeq",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valueeq ::= id idlist EQL expr 
            {
              ValueEquation RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ExpressionNode function = new LambdaNode(freshUnderscores(idNames(ids)), e, makeLoc(idxleft, exright));
                                                      RESULT = new ValueEquation(makeLoc(idxleft, exright), id, function); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valueeq",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // path ::= STRING 
            {
              StringNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(s, makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // path ::= IDENTIFIER 
            {
              StringNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(s, makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // path ::= path DIV STRING 
            {
              StringNode RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		StringNode p = (StringNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(p.valueString() + "/" + s, makeLoc(pxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // path ::= path DIV IDENTIFIER 
            {
              StringNode RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		StringNode p = (StringNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(p.valueString() + "/" + s, makeLoc(pxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // matrix ::= LBRC RBRC 
            {
              List<ValueDecl> RESULT =null;
		 RESULT = new LinkedList<ValueDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // matrix ::= LBRC matrix_parts RBRC 
            {
              List<ValueDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ValueDecl> ps = (List<ValueDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // matrix_parts ::= names TO number 
            {
              List<ValueDecl> RESULT =null;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ns = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ValueDecl>(Arrays.asList(new ValueDecl(ns, n))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_parts",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // matrix_parts ::= matrix_parts COMMA names TO number 
            {
              List<ValueDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<ValueDecl> ps = (List<ValueDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ns = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(new ValueDecl(ns, n)); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_parts",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unitvec ::= LBRC RBRC 
            {
              List<UnitDecl> RESULT =null;
		 RESULT = new LinkedList<UnitDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unitvec ::= LBRC unitvec_parts RBRC 
            {
              List<UnitDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<UnitDecl> ps = (List<UnitDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unitvec_parts ::= name COLON unit 
            {
              List<UnitDecl> RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<UnitDecl>(Arrays.asList(new UnitDecl(n, u))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec_parts",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unitvec_parts ::= unitvec_parts COMMA name COLON unit 
            {
              List<UnitDecl> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<UnitDecl> ps = (List<UnitDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(new UnitDecl(n, u)); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitvec_parts",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // number ::= unsigned 
            {
              String RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // number ::= NEG unsigned 
            {
              String RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "-" + u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // integer ::= NATURAL 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // integer ::= NEG NATURAL 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "-" + n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unsigned ::= DECIMAL 
            {
              String RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unsigned ::= NATURAL 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // id ::= IDENTIFIER 
            {
              IdentifierNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierNode(id, makeLoc(idxleft, idxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ids ::= id 
            {
              List<IdentifierNode> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<IdentifierNode>(Arrays.asList(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ids ::= ids COMMA id 
            {
              List<IdentifierNode> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ids.add(id); RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // idlist ::= LPAR RPAR 
            {
              List<IdentifierNode> RESULT =null;
		 RESULT = new LinkedList<IdentifierNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // idlist ::= LPAR idlist_tail 
            {
              List<IdentifierNode> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // idlist_tail ::= id RPAR 
            {
              List<IdentifierNode> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<IdentifierNode>(Arrays.asList(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist_tail",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // idlist_tail ::= id COMMA idlist_tail 
            {
              List<IdentifierNode> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ids.add(0, id); RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist_tail",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // typeid ::= IDENTIFIER 
            {
              TypeIdentifierNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeIdentifierNode(makeLoc(idxleft, idxright), id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeid",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // name ::= id 
            {
              IdentifierNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // name ::= STRING 
            {
              IdentifierNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierNode(s, makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // names ::= name 
            {
              List<IdentifierNode> RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<IdentifierNode>(Arrays.asList(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("names",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // names ::= names COMMA name 
            {
              List<IdentifierNode> RESULT =null;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ns = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode n = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ns.add(n); RESULT = ns; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("names",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exprs ::= expr 
            {
              List<ExpressionNode> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ExpressionNode>(Arrays.asList(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exprs ::= exprs COMMA expr 
            {
              List<ExpressionNode> RESULT =null;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ExpressionNode> es = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 es.add(e); RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exprlist ::= LPAR RPAR 
            {
              List<ExpressionNode> RESULT =null;
		 RESULT = new LinkedList<ExpressionNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exprlist ::= LPAR exprs RPAR 
            {
              List<ExpressionNode> RESULT =null;
		Location exprsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exprsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> exprs = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exprs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr_no_id 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= id 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_no_id ::= NEG expr 
            {
              ExpressionNode RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("negative", e, makeLoc(nxleft, exright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_no_id ::= idlist 
            {
              ExpressionNode RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdListNode(makeLoc(idsxleft, idsxright), ids); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr_no_id ::= LPAR expr_no_id RPAR 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr_no_id ::= expr NEG expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("minus", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_no_id ::= expr HAT integer 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = desugarExp("multiply", e1, e2, makeLoc(e1xleft, e2xright), false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_no_id ::= expr PER expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("dim_div", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_no_id ::= expr EQL expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("equal", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_no_id ::= expr TRANS 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("transpose", e, makeLoc(exleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr_no_id ::= expr RECI 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("reciprocal", e, makeLoc(exleft, rxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr_no_id ::= expr DIMINV 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = singleop("dim_inv", e, makeLoc(exleft, dxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr_no_id ::= expr MULT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("multiply", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr_no_id ::= expr PLUS expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("sum", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr_no_id ::= expr MMULT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("mmult", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr_no_id ::= expr MEXPT integer 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = desugarExp("mmult", e1, e2, makeLoc(e1xleft, e2xright), false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr_no_id ::= expr DIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("divide", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr_no_id ::= expr MDIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("right_division", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr_no_id ::= expr LEFTDIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("left_divide", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr_no_id ::= expr MLEFTDIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("left_division", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr_no_id ::= expr LSCALE expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("scale", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr_no_id ::= expr RSCALE expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("rscale", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr_no_id ::= expr LSCALEDOWN expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("lscale_down", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr_no_id ::= expr RSCALEDOWN expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("scale_down", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr_no_id ::= expr LEQ expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("less_eq", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr_no_id ::= expr GTQ expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("greater_eq", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr_no_id ::= expr NEQ expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("not_equal", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr_no_id ::= expr LE expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("less", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr_no_id ::= expr GT expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("greater", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr_no_id ::= expr FOLLOWSFROM expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e2, e1, new ConstNode("true", loc), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_no_id ::= expr IMPLIES expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e1, e2, new ConstNode("true", loc), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_no_id ::= expr EQUIV expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = binop("equiv", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_no_id ::= expr AND expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e1, e2, new ConstNode("false", loc), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_no_id ::= expr OR expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(e1xleft, e2xright);
                                                       RESULT = new BranchNode(e1, new ConstNode("true", loc), e2, loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr_no_id ::= expr exprlist 
            {
              ExpressionNode RESULT =null;
		Location funxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location funxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode fun = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ExpressionNode> args = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ApplicationNode(fun, args, makeLoc(funxleft, argsxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr_no_id ::= idlist TO expr 
            {
              ExpressionNode RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode b = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LambdaNode(freshUnderscores(idNames(ids)), b, makeLoc(idsxleft, bxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr_no_id ::= IF expr THEN expr if_tail 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode b = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BranchNode(c, b, t, makeLoc(ixleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr_no_id ::= LET lettail 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr_no_id ::= listlit 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr_no_id ::= comprehension 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr_no_id ::= PIPE matrix_type PIPE 
            {
              ExpressionNode RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeNode m = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MatrixTypeNode(makeLoc(mxleft, mxright), m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr_no_id ::= BEGIN sequence END 
            {
              ExpressionNode RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StatementNode(makeLoc(bxleft, exright), s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr_no_id ::= indexkey 
            {
              ExpressionNode RESULT =null;
		Location kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		KeyNode k = (KeyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = k; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr_no_id ::= unsigned 
            {
              ExpressionNode RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstNode(u, makeLoc(uxleft, uxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr_no_id ::= BOOLEAN 
            {
              ExpressionNode RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstNode(b, makeLoc(bxleft, bxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr_no_id ::= STRING 
            {
              ExpressionNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(s, makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr_no_id ::= QUESTIONMARKS 
            {
              ExpressionNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ApplicationNode(new IdentifierNode("_three_question_marks", makeLoc(sxleft, sxright)), new ArrayList<ExpressionNode>() , makeLoc(sxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no_id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // if_tail ::= ELSEIF expr THEN expr if_tail 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode b = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BranchNode(c, b, t, makeLoc(ixleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_tail",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // if_tail ::= ELSE expr END 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_tail",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // indexkey ::= name AT name 
            {
              KeyNode RESULT =null;
		Location idxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode idx = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new KeyNode(idx.getName(), id.getName(), makeLoc(idxxleft, idxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexkey",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // indexkey ::= indexkey MOD name AT name 
            {
              KeyNode RESULT =null;
		Location kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		KeyNode k = (KeyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode idx = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 KeyNode node = new KeyNode(idx.getName(), id.getName(), makeLoc(idxxleft, idxright));
                                                       RESULT = k.merge(node); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexkey",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // lettail ::= id EQL expr letrest 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> args = freshUnderscores(Arrays.asList(id.getName()));  // remove fresh underscors
                                                       BindingNode binding = new LetBindingNode(makeLoc(idxleft, exright), args.get(0), e);
                                                       RESULT = new LetNode(Arrays.asList(binding), r, makeLoc(idxleft, rxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lettail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // lettail ::= idlist EQL expr letrest 
            {
              ExpressionNode RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> args = freshUnderscores(idNames(ids));
                                                       pacioli.Location loc = makeLoc(idsxleft, rxright);
                                                       ExpressionNode fun = new LambdaNode(args, r, r.getLocation());
                                                       RESULT = new ApplicationNode(new IdentifierNode("apply", e.getLocation()), Arrays.asList(fun, e), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lettail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // lettail ::= id idlist EQL expr letrest 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //List<String> rArgs = freshUnderscores(Arrays.asList(id.getName()));
                                                       List<String> eArgs = freshUnderscores(idNames(ids)); // remove fresh underscors
                                                       pacioli.Location loc = makeLoc(idxleft, rxright);
                                                       ExpressionNode eFun = new LambdaNode(eArgs, e, e.getLocation());
                                                       BindingNode binding = new LetBindingNode(makeLoc(idsxleft, exright), id.getName(), eFun);
                                                       RESULT = new LetNode(Arrays.asList(binding), r, loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lettail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // letrest ::= IN expr END 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("letrest",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // letrest ::= COMMA lettail 
            {
              ExpressionNode RESULT =null;
		Location ltxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ltxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode lt = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("letrest",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sequence ::= statements 
            {
              SequenceNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ExpressionNode> s = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SequenceNode(makeLoc(sxleft, sxright), s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // statements ::= statement 
            {
              List<ExpressionNode> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode s = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ExpressionNode>(Arrays.asList(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // statements ::= statements statement 
            {
              List<ExpressionNode> RESULT =null;
		Location ssxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ssxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> ss = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode s = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // statement ::= id ASSIGN expr SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentNode(makeLoc(idxleft, sxright), id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // statement ::= idlist ASSIGN expr SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TupleAssignmentNode(makeLoc(idsxleft, sxright), ids, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // statement ::= id exprlist SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> es = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ApplicationNode(id, es, makeLoc(idxleft, sxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // statement ::= RETURN expr SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(rxleft, sxright);
                                                       RESULT = new ReturnNode(loc, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // statement ::= RETURN SEMICOLON 
            {
              ExpressionNode RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(rxleft, sxright);
                                                       RESULT = new ReturnNode(loc, new IdentifierNode("nothing", loc)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // statement ::= WHILE expr DO sequence END 
            {
              ExpressionNode RESULT =null;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileNode(makeLoc(wxleft, nxright), e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // statement ::= IF expr THEN sequence stm_if_tail 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(ixleft, txright);
                                                       RESULT = new IfStatementNode(loc, e, s, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // stm_if_tail ::= ELSEIF expr THEN sequence stm_if_tail 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, txright);
                                                       RESULT = new IfStatementNode(loc, e, s, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stm_if_tail",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // stm_if_tail ::= ELSE sequence END 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SequenceNode s = (SequenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stm_if_tail",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // stm_if_tail ::= END 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(exleft, exright);
                                                       RESULT = new ApplicationNode(new IdentifierNode("_skip", loc), new ArrayList<ExpressionNode>(), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stm_if_tail",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // listlit ::= LBRACK RBRACK 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, rxright);
                                                       RESULT = new ApplicationNode(new IdentifierNode("empty_list", loc), new ArrayList<ExpressionNode>(), loc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listlit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // listlit ::= LBRACK exprs RBRACK 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> es = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, rxright);
                                                       ExpressionNode list = new ApplicationNode(new IdentifierNode("empty_list", loc), new ArrayList<ExpressionNode>(), loc);
                                                       for (ExpressionNode item : es) {
                                                           List<ExpressionNode> tup = new ArrayList<ExpressionNode>();
                                                           tup.add(list);
                                                           tup.add(item);
                                                           list = new ApplicationNode(new IdentifierNode("_add_mut", loc), tup, item.getLocation());
                                                       }
                                                       RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listlit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // comprehension ::= LBRACK expr PIPE parts RBRACK 
            {
              ExpressionNode RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Object> ps = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(lxleft, rxright);
                                                       RESULT = desugarComprehension(loc, e, ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comprehension",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // comprehension ::= id LBRACK expr PIPE parts RBRACK 
            {
              ExpressionNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Object> ps = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pacioli.Location loc = makeLoc(idxleft, rxright);
                                                       RESULT = desugarFoldComprehension(loc, id, e, ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comprehension",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // parts ::= part 
            {
              List<Object> RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Object>(Arrays.asList(p)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parts",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // parts ::= parts COMMA part 
            {
              List<Object> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Object> ps = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(p); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parts",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // part ::= expr 
            {
              Object RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // part ::= expr FROM expr 
            {
              Object RESULT =null;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode g = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if (g instanceof IdListNode) {
                                                           RESULT = new TupleGeneratorClause(((IdListNode)g).ids, e);
                                                        } else if (g instanceof IdentifierNode) {
                                                            RESULT = new GeneratorClause((IdentifierNode) g, e);
                                                        } else {
                                                            errorLocation = g.getLocation();
                                                            errorMessage = "Expected a variable or tuple";
                                                            report_fatal_error("Fixme: this string is not used? How to throw an error here?", g);
                                                        }
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // part ::= expr ASSIGN expr 
            {
              Object RESULT =null;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode g = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if (g instanceof IdListNode) {
                                                           RESULT = new TupleAssignmentClause(((IdListNode)g).ids, e);
                                                        } else if (g instanceof IdentifierNode) {
                                                            RESULT = new AssignmentClause((IdentifierNode) g, e);
                                                        } else {
                                                            errorLocation = g.getLocation();
                                                            errorMessage = "Expected a variable or tuple";
                                                            report_fatal_error("Fixme: this string is not used? How to throw an error here?", g);
                                                        } 
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // schema ::= vardecls type 
            {
              SchemaNode RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeContext c = (TypeContext)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SchemaNode(makeLoc(txleft, txright), c, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("schema",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // vardecls ::= FORTYPE ids classcondition COLON vardecls 
            {
              TypeContext RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeContext s = (TypeContext)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  TypeContext context = s;
                                                            for (IdentifierNode id: ids) {
              		                                            context.addTypeVar(id.getName());
                                                            }
                                                            RESULT = context; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // vardecls ::= FORINDEX ids classcondition COLON vardecls 
            {
              TypeContext RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> ids = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeContext s = (TypeContext)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  TypeContext context = s;
                                                            for (IdentifierNode id: ids) {
              		                                            context.addIndexVar(id.getName());
                                                            }
                                                            RESULT = context; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // vardecls ::= FORUNIT vars classcondition COLON vardecls 
            {
              TypeContext RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location vsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location vsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<String> vs = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeContext s = (TypeContext)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  TypeContext context = s;
                                                            for (String v: vs) {
              		                                            context.addUnitVar(v);
                                                            }
                                                            RESULT = context; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // vardecls ::= FOROP ids classcondition COLON vardecls 
            {
              TypeContext RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location vsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location vsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IdentifierNode> vs = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeContext s = (TypeContext)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  TypeContext context = s;
                                                            for (IdentifierNode id: vs) {
              		                                          context.addOpVar(id.getName());
                                                            }
                                                            RESULT = context; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // vardecls ::= 
            {
              TypeContext RESULT =null;
		  RESULT = new TypeContext(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // classcondition ::= WHERE conditions 
            {
              List<TypeNode> RESULT =null;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<TypeNode> cs = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = List.of(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classcondition",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // classcondition ::= 
            {
              List<TypeNode> RESULT =null;
		 RESULT = List.of(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classcondition",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // conditions ::= conditions AND typeid idlist 
            {
              List<TypeNode> RESULT =null;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<TypeNode> cs = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeIdentifierNode id = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdentifierNode> ts = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = List.of(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // conditions ::= typeid idlist 
            {
              List<TypeNode> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeIdentifierNode id = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdentifierNode> ts = (List<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = List.of(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // vars ::= var 
            {
              List<String> RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<String>(Arrays.asList(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // vars ::= vars COMMA var 
            {
              List<String> RESULT =null;
		Location vsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location vsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> vs = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 vs.add(v); RESULT = vs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // var ::= id 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id.getName(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // var ::= id EXCL id 
            {
              String RESULT =null;
		Location idxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode idx = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = idx.getName() + "!" + id.getName(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // types ::= type 
            {
              List<TypeNode> RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<TypeNode>(Arrays.asList(t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // types ::= types COMMA type 
            {
              List<TypeNode> RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<TypeNode> ts = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ts.add(t); RESULT = ts; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // typelist ::= LPAR RPAR 
            {
              List<TypeNode> RESULT =null;
		 RESULT = new LinkedList<TypeNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typelist",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // typelist ::= LPAR types RPAR 
            {
              List<TypeNode> RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<TypeNode> ts = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ts; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typelist",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // type ::= typelist TO type 
            {
              TypeNode RESULT =null;
		Location asxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location asxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<TypeNode> as = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode b = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TypeNode domain = new TypeApplicationNode(makeLoc(asxleft, bxright), 
                                                                            new TypeIdentifierNode(makeLoc(asxleft, asxright), "Tuple"), as);
                                                       RESULT = new FunctionTypeNode(makeLoc(asxleft, bxright), domain, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // type ::= typeid TO type 
            {
              TypeNode RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeIdentifierNode a = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode b = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionTypeNode(makeLoc(axleft, bxright), a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // type ::= typeid typelist 
            {
              TypeNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeIdentifierNode id = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<TypeNode> ts = (List<TypeNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeApplicationNode(makeLoc(idxleft, tsxright), id, ts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // type ::= matrix_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // matrix_type ::= dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // matrix_type ::= dim_type PER dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypePerNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matrix_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // dim_type ::= dim_type MULT dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeMultiplyNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // dim_type ::= dim_type DIV dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeDivideNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // dim_type ::= dim_type HAT integer 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypePowerNode(makeLoc(xxleft, nxright), x, new NumberTypeNode(makeLoc(nxleft, nxright), n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // dim_type ::= dim_type MOD dim_type 
            {
              TypeNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeNode x = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeNode y = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeKroneckerNode(makeLoc(xxleft, yxright), x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // dim_type ::= typeid 
            {
              TypeNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdentifierNode id = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // dim_type ::= typeid COLON typeid 
            {
              TypeNode RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeIdentifierNode p = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdentifierNode u = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrefixUnitTypeNode(makeLoc(pxleft, uxright), p, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // dim_type ::= typeid EXCL 
            {
              TypeNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeIdentifierNode i = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BangTypeNode(makeLoc(ixleft, exright), i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // dim_type ::= typeid EXCL typeid 
            {
              TypeNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeIdentifierNode i = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdentifierNode u = (TypeIdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BangTypeNode(makeLoc(ixleft, uxright), i, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // dim_type ::= NATURAL 
            {
              TypeNode RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (n.equals("1")) {
                                                           RESULT = new NumberTypeNode(makeLoc(nxleft, nxright), n);
                                                       } else {
                                                           report_fatal_error("Number unexpected. Only number 1 allowed.", n);
                                                       } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // unit ::= unit_term 
            {
              UnitNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode t = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // unit ::= unit MULT unit 
            {
              UnitNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		UnitNode x = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode y = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitOperationNode(makeLoc(xxleft, yxright), "*", x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // unit ::= unit DIV unit 
            {
              UnitNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		UnitNode x = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode y = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitOperationNode(makeLoc(xxleft, yxright), "/", x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // unit ::= unit HAT integer 
            {
              UnitNode RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		UnitNode x = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitPowerNode(makeLoc(xxleft, nxright), x, new NumberUnitNode(n, makeLoc(nxleft, nxright))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // unit_term ::= LPAR unit_term RPAR 
            {
              UnitNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		UnitNode t = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // unit_term ::= id 
            {
              UnitNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitIdentifierNode(id.getLocation(), id.getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // unit_term ::= id COLON id 
            {
              UnitNode RESULT =null;
		Location prexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location prexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IdentifierNode pre = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitIdentifierNode(pre.getLocation().join(id.getLocation()), pre.getName(), id.getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // unit_term ::= unsigned 
            {
              UnitNode RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NumberUnitNode(n, makeLoc(nxleft, nxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit_term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // dimnum ::= unit 
            {
              UnitNode RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnitNode u = (UnitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimnum",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
