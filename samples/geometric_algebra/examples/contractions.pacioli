import geometry;
import geometric_algebra;

# Leo's figure 3.4 contractions example
# Hard coded inverse of f1^f2 => -f1^f2, TODO unit inverse?
declare dualization_2D :: for_unit a: (MultiVector(a, 1, Geom2!)) -> MultiVector(a, 1, Geom2!);
define dualization_2D(a) =
    left_contraction(a, outer_product(make_multivector([make_term(1, f2)]), make_multivector([make_term(1, f1)])));

multivector2string(dualization_2D(make_multivector([make_term(8, f2)])));

# double dualization of a must return -a in 2D and 3D (Leo p81)
# Double dualization must not change units. (test case)
multivector2string(dualization_2D(dualization_2D(make_multivector([make_term(8, f2)]))));

# Leo's figure 3.5 - we take the reverse of e123 for the inverse. TODO unit inverse?
declare dualization_3D :: for_unit a: (MultiVector(a, 1, Geom3!)) -> MultiVector(a, 1, Geom3!);
define dualization_3D(a) =
    left_contraction(a, parse_mv("e321"));

multivector2string(dualization_3D(parse_mv("e1+e2+e3")));

# double dualization
multivector2string(dualization_3D(dualization_3D(parse_mv("e1+e2+e3"))));


# Leo's figure 3.5a - dual of a bivector
multivector2string(dualization_3D(parse_mv("e12")));

# double dualization
multivector2string(dualization_3D(dualization_3D(parse_mv("e12"))));

multivector2string(make_multivector([term_inverse(make_term(3, e12))]));

multivector2string(make_multivector([term_inverse(term_inverse(make_term(3, e12)))]));