# ----------------------------------------------------------------------------
# This demo of Fourier Motzkin's algorithm to compute the nullifiers
# of an integer matrix is an adaptation of Colom and Silva's algorithm
# from 'Convex geometry and semiflows in P/T nets. A comparative study
# of algorithms for computation of minimal P-semiflows.' (Advances in
# Petri Nets, 1990).
#
# In the algorithm a matrix |A I| is constructed. This matrix grows
# and shrinks in the row dimension when a column from A is
# eliminated. When it ends with matrix |B C| the rows in C are the
# nullifiers.
#   
# The main data structure in this implementation is a list of
# quadruples. This version does not create matrix |A I| but creates
# pairs (v,w) of rows v from A and w from I, and operates on these
# pairs instead of the matrix. Because the support is often needed
# these are added to get quadruples (v, w, support(v), support(w)).
#   
# Also the rows and columns are switched with respect to Colom and
# Silva.
#
# The sort of the result is to ease the analysis of the semi flow
# list. Semi flows with fewer entries are listed first.
#
# Paul Griffioen 2011-2014
# ----------------------------------------------------------------------------

include quad;

declare fourier_motzkin ::
  for_index P,Q: for_unit a,P!u: (a*P!u per Q!) -> List(Q!);

define fourier_motzkin(matrix) = 
  fourier_motzkin_fast(matrix);
  
#define fourier_motzkin(matrix) =
#  fourier_motzkin_naive(matrix);

# ----------------------------------------------------------------------------
# Naive implementation
#
# The elimination of rows is in the order of the rows with fewer
# connections. The order is in principle arbitrary and this heuristics
# seems to avoid the generation of large intermediate quadruple lists.
#
# ----------------------------------------------------------------------------
  
define fourier_motzkin_naive(matrix) =
    let
        rows = row_domain(matrix),
        quads = [make_quad(v,w) | (v,w) <- zip(columns(matrix),
                                               columns(right_identity(matrix)))]
    in
        [quad_right(q) | q <- loop_list(quads, eliminate, rows)]
    end;


define eliminate(quads, row) =
    let
        combined = [canonical(x) |
                      (q,r) <- combis(quads),
                      alpha := quad_magnitude(q, row), 
                      beta := quad_magnitude(r, row),
                      alpha * beta < 0,
                      x := combine_quads(abs(beta), q, abs(alpha), r)]
    in
        minimize(append(combined, [q | q <- quads, quad_magnitude(q, row) = 0]))
    end;
  
define minimize(quads) =
#  [q | q <- quads, all[support_sub(r,q) ==> r = q | r <- quads]];
  [q | q <- quads, all[r = q | r <- quads, support_sub(r,q)]];

# ----------------------------------------------------------------------------
# Faster implementation
# ----------------------------------------------------------------------------

define fourier_motzkin_fast(matrix) =
  begin

      # Initialize the rows to eliminate and the initial list of flows
      rows := row_domain(matrix);
      quads := [make_quad(v,w) | (v,w) <- zip(columns(matrix),
                                              columns(right_identity(matrix)))];

      # Eliminate all sequences first. A sequence is a node with one
      # in and one out arrow.
      i := find_seq(quads, rows);
      while 0 <= i do
          quads := eliminate_fast(quads, nth(i, rows));
          rows := remove_nth(i, rows);
          i := find_seq(quads, rows);
      end

      # Eliminate all remaining nodes.
      while rows != [] do

          # Determine the number of positive and negative entries
          pi := sum[quad_pos_count(q) | q <- quads];
          nu := sum[quad_neg_count(q) | q <- quads];

          # Choose row 0 to eliminate
          choice := 0;
          chosen := nth(0, rows);
          pi_0 := get(pi, chosen, _);
          nu_0 := get(nu, chosen, _);
          best_prod := pi_0 * nu_0;
          optimal := best_prod < pi_0 + nu_0;

          # See if there is a better row to eliminate
          size := list_size(rows);
          i := 1;
          while i != size and not(optimal) do
              p := nth(i, rows);
              pi_p := get(pi, p, _);
              nu_p := get(nu, p, _);
              prod := pi_p * nu_p;
              if prod < pi_p + nu_p then
                  choice := i;
                  chosen := p;
                  optimal := true;
              else if prod < best_prod then
                  choice := i;
                  chosen := p;
                  best_prod := prod;
              end
              i := i + 1;
          end

          # Eliminate the chosen row
          quads := eliminate_fast(quads, chosen);
          rows := remove_nth(choice, rows);

      end

      # Extract the semi-flows from the list of flows.
      return [quad_right(q) | q <- quads];

  end;

define find_seq(quads, rows) =
  begin
      pi := sum[quad_pos_count(q) | q <- quads];
      nu := sum[quad_neg_count(q) | q <- quads];

      i := 0;
      n := list_size(rows);
      j := -1;
      while i != n and j < 0 do
          p := nth(i, rows);
          if get(pi, p, _) = 1 and get(nu, p, _) = 1 then
              j := i;
          end
          i := i + 1;
      end
      return j;
  end;

define eliminate_fast(quads, row) =
  begin
      #print(tuple(row, list_size(quads)));

      n := list_size(quads);

      i := 0;
      pos := [];
      neg := [];
      minimal := [];
      while i != n do
          q := nth(i, quads);
          m := quad_magnitude(q, row);
          if 0 < m then
              pos := _add_mut(pos, i);
          else if m < 0 then
              neg := _add_mut(neg, i);
          else
              minimal := _add_mut(minimal, q);
          end
          i := i + 1;
      end

      pos_size := list_size(pos);
      neg_size := list_size(neg);

      k := 0;
      while k != pos_size do
          i := nth(k, pos);
          q := nth(i, quads);
          alpha := quad_magnitude(q, row);
          l := 0;
          while l != neg_size do
              j := nth(l, neg);
              r := nth(j, quads);
              beta := quad_magnitude(r, row);
              tmp := canonical(combine_quads(abs(beta), q, abs(alpha), r));
              minimal := insert_if_minimal(tmp, minimal);
              l := l + 1;
          end
          k := k + 1;
      end

      return minimal;
  end;

define insert_if_minimal(candidate, quads) =
  begin
      sub_found := false;
      n := list_size(quads);
      i := 0;
      while i != n and not(sub_found) do
          x := nth(i, quads);
          if support_sub(x, candidate) then
              sub_found := true;
          end
          i := i + 1;
      end
      return if sub_found then quads else _add_mut(quads, candidate) end;
  end;
